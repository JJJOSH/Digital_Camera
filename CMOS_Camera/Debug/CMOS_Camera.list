
CMOS_Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08010e94  08010e94  00020e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fd4  08010fd4  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010fd4  08010fd4  00020fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fdc  08010fdc  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fdc  08010fdc  00020fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fe0  08010fe0  00020fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08010fe4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a0  2**0
                  CONTENTS
 10 .bss          00004c08  200000a0  200000a0  000300a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ca8  20004ca8  000300a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b894  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000068e8  00000000  00000000  0005b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002290  00000000  00000000  00062290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a93  00000000  00000000  00064520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b61f  00000000  00000000  00065fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030821  00000000  00000000  000915d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e5c25  00000000  00000000  000c1df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009838  00000000  00000000  001a7a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001b1250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e7c 	.word	0x08010e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08010e7c 	.word	0x08010e7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200000bc 	.word	0x200000bc
 800059c:	2000015c 	.word	0x2000015c

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f001 fb13 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f897 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fa47 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b2:	f000 fa0f 	bl	80009d4 <MX_DMA_Init>
  MX_SPI1_Init();
 80005b6:	f000 f959 	bl	800086c <MX_SPI1_Init>
  MX_DCMI_Init();
 80005ba:	f000 f901 	bl	80007c0 <MX_DCMI_Init>
  MX_FSMC_Init();
 80005be:	f000 fb2d 	bl	8000c1c <MX_FSMC_Init>
  MX_I2C2_Init();
 80005c2:	f000 f925 	bl	8000810 <MX_I2C2_Init>
  MX_TIM5_Init();
 80005c6:	f000 f987 	bl	80008d8 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f9d9 	bl	8000980 <MX_USART2_UART_Init>
  MX_LIBJPEG_Init();
 80005ce:	f00a fab0 	bl	800ab32 <MX_LIBJPEG_Init>
  MX_FATFS_Init();
 80005d2:	f00a fa45 	bl	800aa60 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* initialize system */
  retarget_init();
 80005d6:	f000 fb91 	bl	8000cfc <retarget_init>
  //printf("\n");
  printf("Lynn Huang\n");
 80005da:	483a      	ldr	r0, [pc, #232]	; (80006c4 <main+0x124>)
 80005dc:	f00f fd76 	bl	80100cc <puts>


  /*initialize LCD */
  lcdIli9341_init();
 80005e0:	f001 f852 	bl	8001688 <lcdIli9341_init>
  //lcdIli9341_drawRect(100, 100, 80, 40, LCD_ILI9342_COLOR_RED);

  uint16_t* p_lcdData;
  p_lcdData = lcdIli9341_getDrawAddress();
 80005e4:	f001 f846 	bl	8001674 <lcdIli9341_getDrawAddress>
 80005e8:	61f8      	str	r0, [r7, #28]


  lcdIli9341_setArea(0, 0, LCD_ILI9342_WIDTH -1, LCD_ILI9342_HEIGHT - 1);
 80005ea:	23ef      	movs	r3, #239	; 0xef
 80005ec:	f240 123f 	movw	r2, #319	; 0x13f
 80005f0:	2100      	movs	r1, #0
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 ffb4 	bl	8001560 <lcdIli9341_setArea>
  for (uint32_t y = 0 * LCD_ILI9342_HEIGHT/3; y < 1 * LCD_ILI9342_HEIGHT/3; y++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
 80005fc:	e010      	b.n	8000620 <main+0x80>
  	for (uint32_t x = 0; x < LCD_ILI9342_WIDTH; x++){
 80005fe:	2300      	movs	r3, #0
 8000600:	633b      	str	r3, [r7, #48]	; 0x30
 8000602:	e006      	b.n	8000612 <main+0x72>
  		*p_lcdData = LCD_ILI9342_COLOR_RED;
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800060a:	801a      	strh	r2, [r3, #0]
  	for (uint32_t x = 0; x < LCD_ILI9342_WIDTH; x++){
 800060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800060e:	3301      	adds	r3, #1
 8000610:	633b      	str	r3, [r7, #48]	; 0x30
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000618:	d3f4      	bcc.n	8000604 <main+0x64>
  for (uint32_t y = 0 * LCD_ILI9342_HEIGHT/3; y < 1 * LCD_ILI9342_HEIGHT/3; y++){
 800061a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800061c:	3301      	adds	r3, #1
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
 8000620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000622:	2b4f      	cmp	r3, #79	; 0x4f
 8000624:	d9eb      	bls.n	80005fe <main+0x5e>
  		}

  }

  for (uint32_t y = 1 * LCD_ILI9342_HEIGHT/3; y < 2 * LCD_ILI9342_HEIGHT/3; y++){
 8000626:	2350      	movs	r3, #80	; 0x50
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800062a:	e010      	b.n	800064e <main+0xae>
  	for (uint32_t x = 0; x < LCD_ILI9342_WIDTH; x++){
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000630:	e006      	b.n	8000640 <main+0xa0>
  		*p_lcdData = LCD_ILI9342_COLOR_GREEN;
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000638:	801a      	strh	r2, [r3, #0]
  	for (uint32_t x = 0; x < LCD_ILI9342_WIDTH; x++){
 800063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063c:	3301      	adds	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000642:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000646:	d3f4      	bcc.n	8000632 <main+0x92>
  for (uint32_t y = 1 * LCD_ILI9342_HEIGHT/3; y < 2 * LCD_ILI9342_HEIGHT/3; y++){
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	3301      	adds	r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000650:	2b9f      	cmp	r3, #159	; 0x9f
 8000652:	d9eb      	bls.n	800062c <main+0x8c>
  		}

  }

  for (uint32_t y = 2 * LCD_ILI9342_HEIGHT/3; y < 3 * LCD_ILI9342_HEIGHT/3; y++){
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
 8000658:	e00f      	b.n	800067a <main+0xda>
  	for (uint32_t x = 0; x < LCD_ILI9342_WIDTH; x++){
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
 800065e:	e005      	b.n	800066c <main+0xcc>
  		*p_lcdData = LCD_ILI9342_COLOR_BLUE;
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	221f      	movs	r2, #31
 8000664:	801a      	strh	r2, [r3, #0]
  	for (uint32_t x = 0; x < LCD_ILI9342_WIDTH; x++){
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	3301      	adds	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
 800066c:	6a3b      	ldr	r3, [r7, #32]
 800066e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000672:	d3f5      	bcc.n	8000660 <main+0xc0>
  for (uint32_t y = 2 * LCD_ILI9342_HEIGHT/3; y < 3 * LCD_ILI9342_HEIGHT/3; y++){
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	3301      	adds	r3, #1
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	2bef      	cmp	r3, #239	; 0xef
 800067e:	d9ec      	bls.n	800065a <main+0xba>
  		}

  }

  /* init Camera */
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000680:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <main+0x128>)
 8000682:	4912      	ldr	r1, [pc, #72]	; (80006cc <main+0x12c>)
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <main+0x130>)
 8000686:	f001 f8dd 	bl	8001844 <ov7670_init>
  ov7670_config (OV7670_MODE_QVGA_RGB565);
 800068a:	2000      	movs	r0, #0
 800068c:	f001 f920 	bl	80018d0 <ov7670_config>
  //ov7670_startCap(OV7670_CAP_CONTINUOUS, p_lcdData);
  ov7670_startCap(OV7670_CAP_CONTINUOUS, p_lcdData);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	4619      	mov	r1, r3
 8000694:	2000      	movs	r0, #0
 8000696:	f001 f94b 	bl	8001930 <ov7670_startCap>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <main+0x134>)
 800069c:	463c      	mov	r4, r7
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ac:	463b      	mov	r3, r7
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00c fdbd 	bl	800d230 <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <main+0x138>)
 80006ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006bc:	f00c fdb1 	bl	800d222 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x120>
 80006c2:	bf00      	nop
 80006c4:	08010e94 	.word	0x08010e94
 80006c8:	200003fc 	.word	0x200003fc
 80006cc:	2000039c 	.word	0x2000039c
 80006d0:	2000035c 	.word	0x2000035c
 80006d4:	08010eac 	.word	0x08010eac
 80006d8:	200005e8 	.word	0x200005e8

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00f fe84 	bl	80103f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <SystemClock_Config+0xdc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xdc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a25      	ldr	r2, [pc, #148]	; (80007bc <SystemClock_Config+0xe0>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xe0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075a:	2307      	movs	r3, #7
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4618      	mov	r0, r3
 8000764:	f007 f868 	bl	8007838 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076e:	f000 fabf 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2105      	movs	r1, #5
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fac9 	bl	8007d28 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800079c:	f000 faa8 	bl	8000cf0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 80007a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80007a4:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80007a8:	2000      	movs	r0, #0
 80007aa:	f007 fba3 	bl	8007ef4 <HAL_RCC_MCOConfig>
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_DCMI_Init+0x48>)
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <MX_DCMI_Init+0x4c>)
 80007c8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_DCMI_Init+0x48>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_DCMI_Init+0x48>)
 80007d2:	2220      	movs	r2, #32
 80007d4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_DCMI_Init+0x48>)
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_DCMI_Init+0x48>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_DCMI_Init+0x48>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_DCMI_Init+0x48>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_DCMI_Init+0x48>)
 80007f0:	2208      	movs	r2, #8
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_DCMI_Init+0x48>)
 80007f6:	f001 fdcd 	bl	8002394 <HAL_DCMI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000800:	f000 fa76 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000035c 	.word	0x2000035c
 800080c:	50050000 	.word	0x50050000

08000810 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C2_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_I2C2_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C2_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_I2C2_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C2_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C2_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2C2_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C2_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2C2_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2C2_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2C2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2C2_Init+0x50>)
 800084e:	f005 fe69 	bl	8006524 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 fa4a 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200003fc 	.word	0x200003fc
 8000864:	40005800 	.word	0x40005800
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008be:	f007 fcbb 	bl	8008238 <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c8:	f000 fa12 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000450 	.word	0x20000450
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2224      	movs	r2, #36	; 0x24
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00f fd86 	bl	80103f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_TIM5_Init+0xa0>)
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <MX_TIM5_Init+0xa4>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_TIM5_Init+0xa0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM5_Init+0xa0>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM5_Init+0xa0>)
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM5_Init+0xa0>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM5_Init+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800091a:	2301      	movs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000932:	2301      	movs	r3, #1
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM5_Init+0xa0>)
 8000946:	f007 fe5b 	bl	8008600 <HAL_TIM_Encoder_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 f9ce 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM5_Init+0xa0>)
 8000962:	f007 ff9f 	bl	80088a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800096c:	f000 f9c0 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200004a8 	.word	0x200004a8
 800097c:	40000c00 	.word	0x40000c00

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f007 fff0 	bl	800899c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f995 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200004f0 	.word	0x200004f0
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_DMA_Init+0x68>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <MX_DMA_Init+0x68>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_DMA_Init+0x68>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_DMA_Init+0x68>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <MX_DMA_Init+0x68>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <MX_DMA_Init+0x68>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	2010      	movs	r0, #16
 8000a18:	f001 fa4b 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a1c:	2010      	movs	r0, #16
 8000a1e:	f001 fa64 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	2039      	movs	r0, #57	; 0x39
 8000a28:	f001 fa43 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a2c:	2039      	movs	r0, #57	; 0x39
 8000a2e:	f001 fa5c 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a69      	ldr	r2, [pc, #420]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b67      	ldr	r3, [pc, #412]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	4b63      	ldr	r3, [pc, #396]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a62      	ldr	r2, [pc, #392]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b60      	ldr	r3, [pc, #384]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a5b      	ldr	r2, [pc, #364]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b59      	ldr	r3, [pc, #356]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b55      	ldr	r3, [pc, #340]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a54      	ldr	r2, [pc, #336]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b4e      	ldr	r3, [pc, #312]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a4d      	ldr	r2, [pc, #308]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a46      	ldr	r2, [pc, #280]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <MX_GPIO_Init+0x1c4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	4841      	ldr	r0, [pc, #260]	; (8000c08 <MX_GPIO_Init+0x1c8>)
 8000b04:	f003 fbda 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	483f      	ldr	r0, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x1cc>)
 8000b0e:	f003 fbd5 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2120      	movs	r1, #32
 8000b16:	483d      	ldr	r0, [pc, #244]	; (8000c0c <MX_GPIO_Init+0x1cc>)
 8000b18:	f003 fbd0 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b22:	483b      	ldr	r0, [pc, #236]	; (8000c10 <MX_GPIO_Init+0x1d0>)
 8000b24:	f003 fbca 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	4839      	ldr	r0, [pc, #228]	; (8000c14 <MX_GPIO_Init+0x1d4>)
 8000b30:	f003 fbc4 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b34:	2308      	movs	r3, #8
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482f      	ldr	r0, [pc, #188]	; (8000c08 <MX_GPIO_Init+0x1c8>)
 8000b4c:	f003 fa1a 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CAMERA_RESET_Pin;
 8000b50:	2321      	movs	r3, #33	; 0x21
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4829      	ldr	r0, [pc, #164]	; (8000c0c <MX_GPIO_Init+0x1cc>)
 8000b68:	f003 fa0c 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_CAP_Pin BTN_MODE_Pin BTN_OTHER0_Pin */
  GPIO_InitStruct.Pin = BTN_CAP_Pin|BTN_MODE_Pin|BTN_OTHER0_Pin;
 8000b6c:	230e      	movs	r3, #14
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4823      	ldr	r0, [pc, #140]	; (8000c0c <MX_GPIO_Init+0x1cc>)
 8000b80:	f003 fa00 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b84:	2304      	movs	r3, #4
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4820      	ldr	r0, [pc, #128]	; (8000c18 <MX_GPIO_Init+0x1d8>)
 8000b98:	f003 f9f4 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000b9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4816      	ldr	r0, [pc, #88]	; (8000c10 <MX_GPIO_Init+0x1d0>)
 8000bb6:	f003 f9e5 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480f      	ldr	r0, [pc, #60]	; (8000c14 <MX_GPIO_Init+0x1d4>)
 8000bd8:	f003 f9d4 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4807      	ldr	r0, [pc, #28]	; (8000c14 <MX_GPIO_Init+0x1d4>)
 8000bf6:	f003 f9c5 	bl	8003f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	; 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40020800 	.word	0x40020800
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020400 	.word	0x40020400

08000c1c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c36:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c3a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <MX_FSMC_Init+0xbc>)
 8000c40:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c56:	2210      	movs	r2, #16
 8000c58:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000cac:	2311      	movs	r3, #17
 8000cae:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_FSMC_Init+0xb8>)
 8000cbc:	f007 fc58 	bl	8008570 <HAL_SRAM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000cc6:	f000 f813 	bl	8000cf0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000598 	.word	0x20000598
 8000cd8:	a0000104 	.word	0xa0000104

08000cdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000ce4:	f00e fd0a 	bl	800f6fc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f00c faed 	bl	800d2c8 <osDelay>
 8000cee:	e7fb      	b.n	8000ce8 <StartDefaultTask+0xc>

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <retarget_init>:
#include <stdio.h>
#include "common.h"
#include "./uartTerminal/uartTerminal.h"

void retarget_init()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  extern UART_HandleTypeDef huart2;
  uartTerminal_init(&huart2);
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <retarget_init+0x38>)
 8000d02:	f000 fed1 	bl	8001aa8 <uartTerminal_init>
  setbuf(stdin, NULL);
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <retarget_init+0x3c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00f f9e4 	bl	80100dc <setbuf>
  setbuf(stdout, NULL);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <retarget_init+0x3c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00f f9dd 	bl	80100dc <setbuf>
  setbuf(stderr, NULL);
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <retarget_init+0x3c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00f f9d6 	bl	80100dc <setbuf>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200004f0 	.word	0x200004f0
 8000d38:	2000009c 	.word	0x2000009c

08000d3c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uartTerminal_send(ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fec9 	bl	8001ae0 <uartTerminal_send>
  return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <__io_getchar>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif /* __GNUC__ */

GETCHAR_PROTOTYPE
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  return uartTerminal_recv();
 8000d5c:	f000 feda 	bl	8001b14 <uartTerminal_recv>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_MspInit+0x64>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_MspInit+0x64>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_MspInit+0x64>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x64>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x64>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x64>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	210f      	movs	r1, #15
 8000daa:	f06f 0001 	mvn.w	r0, #1
 8000dae:	f001 f880 	bl	8001eb2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2105      	movs	r1, #5
 8000db6:	2005      	movs	r0, #5
 8000db8:	f001 f87b 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000dbc:	2005      	movs	r0, #5
 8000dbe:	f001 f894 	bl	8001eea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a63      	ldr	r2, [pc, #396]	; (8000f7c <HAL_DCMI_MspInit+0x1ac>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	f040 80bf 	bne.w	8000f72 <HAL_DCMI_MspInit+0x1a2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	4b61      	ldr	r3, [pc, #388]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfc:	4a60      	ldr	r2, [pc, #384]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6353      	str	r3, [r2, #52]	; 0x34
 8000e04:	4b5e      	ldr	r3, [pc, #376]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a59      	ldr	r2, [pc, #356]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a52      	ldr	r2, [pc, #328]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a4b      	ldr	r2, [pc, #300]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a44      	ldr	r2, [pc, #272]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <HAL_DCMI_MspInit+0x1b0>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    PE0     ------> DCMI_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e80:	2350      	movs	r3, #80	; 0x50
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e90:	230d      	movs	r3, #13
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	483a      	ldr	r0, [pc, #232]	; (8000f84 <HAL_DCMI_MspInit+0x1b4>)
 8000e9c:	f003 f872 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8000ea0:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4832      	ldr	r0, [pc, #200]	; (8000f88 <HAL_DCMI_MspInit+0x1b8>)
 8000ebe:	f003 f861 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ec2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ed4:	230d      	movs	r3, #13
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	482b      	ldr	r0, [pc, #172]	; (8000f8c <HAL_DCMI_MspInit+0x1bc>)
 8000ee0:	f003 f850 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eec:	2302      	movs	r3, #2
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ef4:	230d      	movs	r3, #13
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4824      	ldr	r0, [pc, #144]	; (8000f90 <HAL_DCMI_MspInit+0x1c0>)
 8000f00:	f003 f840 	bl	8003f84 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <HAL_DCMI_MspInit+0x1c8>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f48:	f001 fa92 	bl	8002470 <HAL_DMA_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_DCMI_MspInit+0x186>
    {
      Error_Handler();
 8000f52:	f7ff fecd 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_DCMI_MspInit+0x1c4>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	204e      	movs	r0, #78	; 0x4e
 8000f68:	f000 ffa3 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f6c:	204e      	movs	r0, #78	; 0x4e
 8000f6e:	f000 ffbc 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3730      	adds	r7, #48	; 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	50050000 	.word	0x50050000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40021000 	.word	0x40021000
 8000f94:	2000039c 	.word	0x2000039c
 8000f98:	40026428 	.word	0x40026428

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_I2C_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fec:	2304      	movs	r3, #4
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480c      	ldr	r0, [pc, #48]	; (8001028 <HAL_I2C_MspInit+0x8c>)
 8000ff8:	f002 ffc4 	bl	8003f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8001006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_I2C_MspInit+0x88>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40005800 	.word	0x40005800
 8001024:	40023800 	.word	0x40023800
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <HAL_SPI_MspInit+0xd0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d151      	bne.n	80010f2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_SPI_MspInit+0xd4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010a2:	23a0      	movs	r3, #160	; 0xa0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b2:	2305      	movs	r3, #5
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <HAL_SPI_MspInit+0xd8>)
 80010be:	f002 ff61 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c2:	2310      	movs	r3, #16
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d2:	2305      	movs	r3, #5
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 80010de:	f002 ff51 	bl	8003f84 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2105      	movs	r1, #5
 80010e6:	2023      	movs	r0, #35	; 0x23
 80010e8:	f000 fee3 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010ec:	2023      	movs	r0, #35	; 0x23
 80010ee:	f000 fefc 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40013000 	.word	0x40013000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400

0800110c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_TIM_Encoder_MspInit+0x84>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12b      	bne.n	8001186 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_TIM_Encoder_MspInit+0x88>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_TIM_Encoder_MspInit+0x88>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_TIM_Encoder_MspInit+0x88>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_TIM_Encoder_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_TIM_Encoder_MspInit+0x88>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_TIM_Encoder_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001166:	2303      	movs	r3, #3
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001176:	2302      	movs	r3, #2
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001182:	f002 feff 	bl	8003f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40000c00 	.word	0x40000c00
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a30      	ldr	r2, [pc, #192]	; (800127c <HAL_UART_MspInit+0xe0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d15a      	bne.n	8001274 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <HAL_UART_MspInit+0xe4>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <HAL_UART_MspInit+0xe4>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <HAL_UART_MspInit+0xe4>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_UART_MspInit+0xe4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_UART_MspInit+0xe4>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_UART_MspInit+0xe4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <HAL_UART_MspInit+0xe8>)
 8001212:	f002 feb7 	bl	8003f84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_UART_MspInit+0xf0>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_UART_MspInit+0xec>)
 800121e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001222:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_UART_MspInit+0xec>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001236:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_UART_MspInit+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_UART_MspInit+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <HAL_UART_MspInit+0xec>)
 800125a:	f001 f909 	bl	8002470 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001264:	f7ff fd44 	bl	8000cf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_UART_MspInit+0xec>)
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_UART_MspInit+0xec>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004400 	.word	0x40004400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000
 8001288:	20000538 	.word	0x20000538
 800128c:	40026088 	.word	0x40026088

08001290 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_FSMC_MspInit+0x88>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d131      	bne.n	8001310 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_FSMC_MspInit+0x88>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_FSMC_MspInit+0x8c>)
 80012b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_FSMC_MspInit+0x8c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6393      	str	r3, [r2, #56]	; 0x38
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_FSMC_MspInit+0x8c>)
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012ce:	f64f 7380 	movw	r3, #65408	; 0xff80
 80012d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012e0:	230c      	movs	r3, #12
 80012e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <HAL_FSMC_MspInit+0x90>)
 80012ea:	f002 fe4b 	bl	8003f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012ee:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80012f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001300:	230c      	movs	r3, #12
 8001302:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <HAL_FSMC_MspInit+0x94>)
 800130a:	f002 fe3b 	bl	8003f84 <HAL_GPIO_Init>
 800130e:	e000      	b.n	8001312 <HAL_FSMC_MspInit+0x82>
    return;
 8001310:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200005ec 	.word	0x200005ec
 800131c:	40023800 	.word	0x40023800
 8001320:	40021000 	.word	0x40021000
 8001324:	40020c00 	.word	0x40020c00

08001328 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001330:	f7ff ffae 	bl	8001290 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	e7fe      	b.n	8001340 <NMI_Handler+0x4>

08001342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <HardFault_Handler+0x4>

08001348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler+0x4>

0800134e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler+0x4>

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 fc82 	bl	8001c74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001370:	f00d fc82 	bl	800ec78 <xTaskGetSchedulerState>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800137a:	f00d ff45 	bl	800f208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA1_Stream5_IRQHandler+0x10>)
 8001396:	f001 fa03 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000538 	.word	0x20000538

080013a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <SPI1_IRQHandler+0x10>)
 80013aa:	f006 ffcf 	bl	800834c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000450 	.word	0x20000450

080013b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <DMA2_Stream1_IRQHandler+0x10>)
 80013be:	f001 f9ef 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000039c 	.word	0x2000039c

080013cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <OTG_FS_IRQHandler+0x10>)
 80013d2:	f003 fa6d 	bl	80048b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000477c 	.word	0x2000477c

080013e0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DCMI_IRQHandler+0x10>)
 80013e6:	f000 fe97 	bl	8002118 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000035c 	.word	0x2000035c

080013f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001406:	f7ff fca7 	bl	8000d58 <__io_getchar>
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
  }

  return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e009      	b.n	8001454 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fc77 	bl	8000d3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf1      	blt.n	8001440 <_write+0x12>
  }
  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148e:	605a      	str	r2, [r3, #4]
  return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f00f f82e 	bl	8010560 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20020000 	.word	0x20020000
 8001530:	00000400 	.word	0x00000400
 8001534:	200005f0 	.word	0x200005f0
 8001538:	20004ca8 	.word	0x20004ca8

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <lcdIli9341_setArea>:
#endif
static void lcdIli9341_readData();

/*** External Function Defines ***/
void lcdIli9341_setArea(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	80bb      	strh	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	803b      	strh	r3, [r7, #0]
  lcdIli9341_writeCmd(0x2a);
 800157e:	202a      	movs	r0, #42	; 0x2a
 8001580:	f000 f941 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(xStart >> 8);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f94a 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(xStart & 0xff);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f944 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd >> 8);
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f93e 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd & 0xff);
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f938 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b);
 80015b4:	202b      	movs	r0, #43	; 0x2b
 80015b6:	f000 f926 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(yStart >> 8);
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f92f 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(yStart & 0xff);
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f929 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd >> 8);
 80015d2:	883b      	ldrh	r3, [r7, #0]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f923 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd & 0xff);
 80015de:	883b      	ldrh	r3, [r7, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f91d 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2c);
 80015ea:	202c      	movs	r0, #44	; 0x2c
 80015ec:	f000 f90b 	bl	8001806 <lcdIli9341_writeCmd>
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <lcdIli9341_drawRect>:
  // the first read is invalid
  lcdIli9341_readData();
}

void lcdIli9341_drawRect(uint16_t xStart, uint16_t yStart, uint16_t width, uint16_t height, uint16_t color)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4623      	mov	r3, r4
 8001608:	80fb      	strh	r3, [r7, #6]
 800160a:	4603      	mov	r3, r0
 800160c:	80bb      	strh	r3, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]
 8001612:	4613      	mov	r3, r2
 8001614:	803b      	strh	r3, [r7, #0]
  lcdIli9341_setArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 8001616:	88fa      	ldrh	r2, [r7, #6]
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	4413      	add	r3, r2
 800161c:	b29b      	uxth	r3, r3
 800161e:	3b01      	subs	r3, #1
 8001620:	b29c      	uxth	r4, r3
 8001622:	88ba      	ldrh	r2, [r7, #4]
 8001624:	883b      	ldrh	r3, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	88b9      	ldrh	r1, [r7, #4]
 8001630:	88f8      	ldrh	r0, [r7, #6]
 8001632:	4622      	mov	r2, r4
 8001634:	f7ff ff94 	bl	8001560 <lcdIli9341_setArea>
  for( uint16_t y = 0; y < height; y++ ){
 8001638:	2300      	movs	r3, #0
 800163a:	81fb      	strh	r3, [r7, #14]
 800163c:	e00f      	b.n	800165e <lcdIli9341_drawRect+0x66>
    for( uint16_t x = 0; x < width; x++ ){
 800163e:	2300      	movs	r3, #0
 8001640:	81bb      	strh	r3, [r7, #12]
 8001642:	e005      	b.n	8001650 <lcdIli9341_drawRect+0x58>
//      lcdIli9341_writeData(color >> 8);
//      lcdIli9341_writeData(color);
      LCD_DATA = color;
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <lcdIli9341_drawRect+0x78>)
 8001646:	8c3b      	ldrh	r3, [r7, #32]
 8001648:	8013      	strh	r3, [r2, #0]
    for( uint16_t x = 0; x < width; x++ ){
 800164a:	89bb      	ldrh	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	81bb      	strh	r3, [r7, #12]
 8001650:	89ba      	ldrh	r2, [r7, #12]
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3f5      	bcc.n	8001644 <lcdIli9341_drawRect+0x4c>
  for( uint16_t y = 0; y < height; y++ ){
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	3301      	adds	r3, #1
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	89fa      	ldrh	r2, [r7, #14]
 8001660:	883b      	ldrh	r3, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d3eb      	bcc.n	800163e <lcdIli9341_drawRect+0x46>
    }
  }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	60020000 	.word	0x60020000

08001674 <lcdIli9341_getDrawAddress>:

inline uint16_t* lcdIli9341_getDrawAddress()
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return (uint16_t*)LCD_DATA_ADDR;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <lcdIli9341_getDrawAddress+0x10>)
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	60020000 	.word	0x60020000

08001688 <lcdIli9341_init>:

RET lcdIli9341_init()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af02      	add	r7, sp, #8
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_ResetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);

  lcdIli9341_writeCmd(0x01); //software reset
 800168e:	2001      	movs	r0, #1
 8001690:	f000 f8b9 	bl	8001806 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 8001694:	2032      	movs	r0, #50	; 0x32
 8001696:	f000 fb0d 	bl	8001cb4 <HAL_Delay>
  lcdIli9341_writeCmd(0x11); //exit sleep
 800169a:	2011      	movs	r0, #17
 800169c:	f000 f8b3 	bl	8001806 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 80016a0:	2032      	movs	r0, #50	; 0x32
 80016a2:	f000 fb07 	bl	8001cb4 <HAL_Delay>

  lcdIli9341_writeCmd(0xB6);
 80016a6:	20b6      	movs	r0, #182	; 0xb6
 80016a8:	f000 f8ad 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0A);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f000 f8b9 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xC2);
 80016b2:	20c2      	movs	r0, #194	; 0xc2
 80016b4:	f000 f8b6 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x36);   // memory access control
 80016b8:	2036      	movs	r0, #54	; 0x36
 80016ba:	f000 f8a4 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x68);     // BGR -> seems RGB
 80016be:	2068      	movs	r0, #104	; 0x68
 80016c0:	f000 f8b0 	bl	8001824 <lcdIli9341_writeData>
//  lcdIli9341_writeData(0x60);     // RGB -> seems BGR

  lcdIli9341_writeCmd(0x3A); // pixel format
 80016c4:	203a      	movs	r0, #58	; 0x3a
 80016c6:	f000 f89e 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x55); //RGB565 (16bit)
 80016ca:	2055      	movs	r0, #85	; 0x55
 80016cc:	f000 f8aa 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0xE0); //gamma
 80016d0:	20e0      	movs	r0, #224	; 0xe0
 80016d2:	f000 f898 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x10);
 80016d6:	2010      	movs	r0, #16
 80016d8:	f000 f8a4 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 80016dc:	2010      	movs	r0, #16
 80016de:	f000 f8a1 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 80016e2:	2010      	movs	r0, #16
 80016e4:	f000 f89e 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x08);
 80016e8:	2008      	movs	r0, #8
 80016ea:	f000 f89b 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 80016ee:	200e      	movs	r0, #14
 80016f0:	f000 f898 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x06);
 80016f4:	2006      	movs	r0, #6
 80016f6:	f000 f895 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x42);
 80016fa:	2042      	movs	r0, #66	; 0x42
 80016fc:	f000 f892 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x28);
 8001700:	2028      	movs	r0, #40	; 0x28
 8001702:	f000 f88f 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x36);
 8001706:	2036      	movs	r0, #54	; 0x36
 8001708:	f000 f88c 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f889 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8001712:	200e      	movs	r0, #14
 8001714:	f000 f886 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8001718:	2004      	movs	r0, #4
 800171a:	f000 f883 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x13);
 800171e:	2013      	movs	r0, #19
 8001720:	f000 f880 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8001724:	200e      	movs	r0, #14
 8001726:	f000 f87d 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 800172a:	200c      	movs	r0, #12
 800172c:	f000 f87a 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0XE1); //gamma
 8001730:	20e1      	movs	r0, #225	; 0xe1
 8001732:	f000 f868 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0C);
 8001736:	200c      	movs	r0, #12
 8001738:	f000 f874 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x23);
 800173c:	2023      	movs	r0, #35	; 0x23
 800173e:	f000 f871 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x26);
 8001742:	2026      	movs	r0, #38	; 0x26
 8001744:	f000 f86e 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8001748:	2004      	movs	r0, #4
 800174a:	f000 f86b 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 800174e:	200c      	movs	r0, #12
 8001750:	f000 f868 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8001754:	2004      	movs	r0, #4
 8001756:	f000 f865 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x39);
 800175a:	2039      	movs	r0, #57	; 0x39
 800175c:	f000 f862 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x24);
 8001760:	2024      	movs	r0, #36	; 0x24
 8001762:	f000 f85f 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x4B);
 8001766:	204b      	movs	r0, #75	; 0x4b
 8001768:	f000 f85c 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f859 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8001772:	200b      	movs	r0, #11
 8001774:	f000 f856 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8001778:	200b      	movs	r0, #11
 800177a:	f000 f853 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x33);
 800177e:	2033      	movs	r0, #51	; 0x33
 8001780:	f000 f850 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x37);
 8001784:	2037      	movs	r0, #55	; 0x37
 8001786:	f000 f84d 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0F);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f84a 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2a);//
 8001790:	202a      	movs	r0, #42	; 0x2a
 8001792:	f000 f838 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f844 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f000 f841 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f83e 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xef);
 80017a8:	20ef      	movs	r0, #239	; 0xef
 80017aa:	f000 f83b 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b); //
 80017ae:	202b      	movs	r0, #43	; 0x2b
 80017b0:	f000 f829 	bl	8001806 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f835 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f832 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x01);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 f82f 	bl	8001824 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x3f);
 80017c6:	203f      	movs	r0, #63	; 0x3f
 80017c8:	f000 f82c 	bl	8001824 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x29);
 80017cc:	2029      	movs	r0, #41	; 0x29
 80017ce:	f000 f81a 	bl	8001806 <lcdIli9341_writeCmd>
  HAL_Delay(10);
 80017d2:	200a      	movs	r0, #10
 80017d4:	f000 fa6e 	bl	8001cb4 <HAL_Delay>
  lcdIli9341_writeCmd(0x2C);
 80017d8:	202c      	movs	r0, #44	; 0x2c
 80017da:	f000 f814 	bl	8001806 <lcdIli9341_writeCmd>
//  lcdIli9341_readData();
//  lcdIli9341_readData();
//  lcdIli9341_readData();

//  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0xffff);
  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0x0000);
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	23f0      	movs	r3, #240	; 0xf0
 80017e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017e8:	2100      	movs	r1, #0
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff ff04 	bl	80015f8 <lcdIli9341_drawRect>
  lcdIli9341_setArea(0, 0, LCD_ILI9342_WIDTH - 1, LCD_ILI9342_HEIGHT - 1);
 80017f0:	23ef      	movs	r3, #239	; 0xef
 80017f2:	f240 123f 	movw	r2, #319	; 0x13f
 80017f6:	2100      	movs	r1, #0
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff feb1 	bl	8001560 <lcdIli9341_setArea>

  return RET_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <lcdIli9341_writeCmd>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeCmd(uint16_t cmd)
#else
inline static void lcdIli9341_writeCmd(uint8_t cmd)
#endif
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	80fb      	strh	r3, [r7, #6]
  LCD_CMD = cmd;
 8001810:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	8013      	strh	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <lcdIli9341_writeData>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeData(uint16_t data)
#else
inline static void lcdIli9341_writeData(uint8_t data)
#endif
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
  LCD_DATA = data;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <lcdIli9341_writeData+0x1c>)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	8013      	strh	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	60020000 	.word	0x60020000

08001844 <ov7670_init>:
static RET ov7670_read(uint8_t regAddr, uint8_t *data);


/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <ov7670_init+0x74>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8001856:	4a19      	ldr	r2, [pc, #100]	; (80018bc <ov7670_init+0x78>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <ov7670_init+0x7c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <ov7670_init+0x80>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2120      	movs	r1, #32
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <ov7670_init+0x84>)
 800186e:	f002 fd25 	bl	80042bc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001872:	2064      	movs	r0, #100	; 0x64
 8001874:	f000 fa1e 	bl	8001cb4 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2120      	movs	r1, #32
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <ov7670_init+0x84>)
 800187e:	f002 fd1d 	bl	80042bc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001882:	2064      	movs	r0, #100	; 0x64
 8001884:	f000 fa16 	bl	8001cb4 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	2012      	movs	r0, #18
 800188c:	f000 f8c6 	bl	8001a1c <ov7670_write>
  HAL_Delay(30);
 8001890:	201e      	movs	r0, #30
 8001892:	f000 fa0f 	bl	8001cb4 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	200b      	movs	r0, #11
 800189e:	f000 f8dd 	bl	8001a5c <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 80018a2:	7d3b      	ldrb	r3, [r7, #20]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <ov7670_init+0x88>)
 80018a8:	f00e fbaa 	bl	8010000 <iprintf>


  return RET_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200005f4 	.word	0x200005f4
 80018bc:	200005f8 	.word	0x200005f8
 80018c0:	200005fc 	.word	0x200005fc
 80018c4:	20000600 	.word	0x20000600
 80018c8:	40020800 	.word	0x40020800
 80018cc:	08010ec8 	.word	0x08010ec8

080018d0 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 80018d8:	f000 f858 	bl	800198c <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	2012      	movs	r0, #18
 80018e0:	f000 f89c 	bl	8001a1c <ov7670_write>
  HAL_Delay(30);
 80018e4:	201e      	movs	r0, #30
 80018e6:	f000 f9e5 	bl	8001cb4 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e012      	b.n	8001916 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <ov7670_config+0x5c>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <ov7670_config+0x5c>)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	440b      	add	r3, r1
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	4619      	mov	r1, r3
 8001904:	4610      	mov	r0, r2
 8001906:	f000 f889 	bl	8001a1c <ov7670_write>
    HAL_Delay(1);
 800190a:	2001      	movs	r0, #1
 800190c:	f000 f9d2 	bl	8001cb4 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <ov7670_config+0x5c>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d1e6      	bne.n	80018f0 <ov7670_config+0x20>
  }
  return RET_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	08010f3c 	.word	0x08010f3c

08001930 <ov7670_startCap>:

//RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 800193a:	f000 f827 	bl	800198c <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <ov7670_startCap+0x54>)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <ov7670_startCap+0x58>)
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	2100      	movs	r1, #0
 8001956:	f000 fae3 	bl	8001f20 <HAL_DCMI_Start_DMA>
 800195a:	e00d      	b.n	8001978 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10a      	bne.n	8001978 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <ov7670_startCap+0x54>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <ov7670_startCap+0x58>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	2102      	movs	r1, #2
 8001974:	f000 fad4 	bl	8001f20 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000600 	.word	0x20000600
 8001988:	200005f4 	.word	0x200005f4

0800198c <ov7670_stopCap>:

RET ov7670_stopCap()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <ov7670_stopCap+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fb63 	bl	8002060 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200005f4 	.word	0x200005f4

080019a4 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_DCMI_FrameEventCallback+0x54>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_DCMI_FrameEventCallback+0x1c>
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_DCMI_FrameEventCallback+0x54>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a10      	ldr	r2, [pc, #64]	; (80019fc <HAL_DCMI_FrameEventCallback+0x58>)
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	4610      	mov	r0, r2
 80019be:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_DCMI_FrameEventCallback+0x5c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3328      	adds	r3, #40	; 0x28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_DCMI_FrameEventCallback+0x5c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80019dc:	f000 fdf6 	bl	80025cc <HAL_DMA_Start_IT>
  }
  s_currentV++;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_DCMI_FrameEventCallback+0x58>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_DCMI_FrameEventCallback+0x58>)
 80019e8:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_DCMI_FrameEventCallback+0x60>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000604 	.word	0x20000604
 80019fc:	2000060c 	.word	0x2000060c
 8001a00:	20000600 	.word	0x20000600
 8001a04:	20000608 	.word	0x20000608

08001a08 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <ov7670_write>:
//}

/*** Internal Function Defines ***/
//static RET ov7670_write(uint8_t regAddr, uint8_t data)
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af04      	add	r7, sp, #16
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <ov7670_write+0x3c>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	1dbb      	adds	r3, r7, #6
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	2142      	movs	r1, #66	; 0x42
 8001a44:	f005 f9e2 	bl	8006e0c <HAL_I2C_Mem_Write>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200005fc 	.word	0x200005fc

08001a5c <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <ov7670_read+0x48>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	1dfa      	adds	r2, r7, #7
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2301      	movs	r3, #1
 8001a74:	2142      	movs	r1, #66	; 0x42
 8001a76:	f004 fe99 	bl	80067ac <HAL_I2C_Master_Transmit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <ov7670_read+0x48>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	2364      	movs	r3, #100	; 0x64
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	2142      	movs	r1, #66	; 0x42
 8001a8c:	f004 ff8c 	bl	80069a8 <HAL_I2C_Master_Receive>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200005fc 	.word	0x200005fc

08001aa8 <uartTerminal_init>:

/*** Internal Function Declarations ***/

/*** External Function Defines ***/
RET uartTerminal_init(UART_HandleTypeDef *huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  sp_huart = huart;
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <uartTerminal_init+0x2c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  //HAL_UART_Receive_DMA(sp_huart, s_bufferRx, BUFFER_SIZE);
  HAL_UART_Receive_DMA(sp_huart, (uint8_t*)s_bufferRx, BUFFER_SIZE); // Changed Cast to uint8_t* to discard volatile qualifier warning
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <uartTerminal_init+0x2c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2210      	movs	r2, #16
 8001abc:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <uartTerminal_init+0x30>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f007 f847 	bl	8008b52 <HAL_UART_Receive_DMA>
  s_bufferRxRp = 0;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <uartTerminal_init+0x34>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

//  /* echo test */
//  while(1){
//    uartTerminal_send(uartTerminal_recv());
//  }
  return RET_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000610 	.word	0x20000610
 8001ad8:	20000614 	.word	0x20000614
 8001adc:	20000624 	.word	0x20000624

08001ae0 <uartTerminal_send>:

RET uartTerminal_send(uint8_t data)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  ret = HAL_UART_Transmit(sp_huart, &data, 1, 100);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <uartTerminal_send+0x30>)
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	1df9      	adds	r1, r7, #7
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	2201      	movs	r2, #1
 8001af4:	f006 ffa2 	bl	8008a3c <HAL_UART_Transmit>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
  if (ret == HAL_OK ) {
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <uartTerminal_send+0x26>
    return RET_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <uartTerminal_send+0x28>
  } else {
    return RET_ERR;
 8001b06:	2301      	movs	r3, #1
  }
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000610 	.word	0x20000610

08001b14 <uartTerminal_recv>:

uint8_t uartTerminal_recv()
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  while (bufferRxWp == s_bufferRxRp);
 8001b1e:	bf00      	nop
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <uartTerminal_recv+0x5c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f1c3 0310 	rsb	r3, r3, #16
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <uartTerminal_recv+0x60>)
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d0f1      	beq.n	8001b20 <uartTerminal_recv+0xc>
  data = s_bufferRx[s_bufferRxRp++];
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <uartTerminal_recv+0x60>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	b2d1      	uxtb	r1, r2
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <uartTerminal_recv+0x60>)
 8001b48:	7011      	strb	r1, [r2, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <uartTerminal_recv+0x64>)
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	71fb      	strb	r3, [r7, #7]
  s_bufferRxRp &= (BUFFER_SIZE - 1);
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <uartTerminal_recv+0x60>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <uartTerminal_recv+0x60>)
 8001b60:	701a      	strb	r2, [r3, #0]
  return data;
 8001b62:	79fb      	ldrb	r3, [r7, #7]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000610 	.word	0x20000610
 8001b74:	20000624 	.word	0x20000624
 8001b78:	20000614 	.word	0x20000614

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b80:	f7ff fcdc 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	; (8001bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	; (8001bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f00e fcdf 	bl	801056c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7fe fcf7 	bl	80005a0 <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001bc0:	08010fe4 	.word	0x08010fe4
  ldr r2, =_sbss
 8001bc4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001bc8:	20004ca8 	.word	0x20004ca8

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>
	...

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <HAL_Init+0x40>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <HAL_Init+0x40>)
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x40>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f94f 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff f8b0 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f967 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f92f 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000628 	.word	0x20000628

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000628 	.word	0x20000628

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_DCMI_Start_DMA+0x20>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e086      	b.n	800204e <HAL_DCMI_Start_DMA+0x12e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0202 	bic.w	r2, r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_DCMI_Start_DMA+0x138>)
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	4a33      	ldr	r2, [pc, #204]	; (800205c <HAL_DCMI_Start_DMA+0x13c>)
 8001f8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	2200      	movs	r2, #0
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d20a      	bcs.n	8001fc2 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3328      	adds	r3, #40	; 0x28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	f000 fb06 	bl	80025cc <HAL_DMA_Start_IT>
 8001fc0:	e038      	b.n	8002034 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	4a24      	ldr	r2, [pc, #144]	; (8002058 <HAL_DCMI_Start_DMA+0x138>)
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001fdc:	e009      	b.n	8001ff2 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	085a      	lsrs	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	005a      	lsls	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d2f0      	bcs.n	8001fde <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	1e9a      	subs	r2, r3, #2
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3328      	adds	r3, #40	; 0x28
 8002024:	4619      	mov	r1, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	f000 fe20 	bl	8002c74 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	0800223d 	.word	0x0800223d
 800205c:	08002367 	.word	0x08002367

08002060 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_DCMI_Stop+0xb0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	4a29      	ldr	r2, [pc, #164]	; (8002114 <HAL_DCMI_Stop+0xb4>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_DCMI_Stop+0x2a>
 8002086:	2302      	movs	r3, #2
 8002088:	e03e      	b.n	8002108 <HAL_DCMI_Stop+0xa8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d108      	bne.n	80020c6 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	73fb      	strb	r3, [r7, #15]
      break;
 80020c4:	e006      	b.n	80020d4 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ea      	bne.n	80020aa <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020e2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fac7 	bl	800267c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000000 	.word	0x20000000
 8002114:	92492493 	.word	0x92492493

08002118 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <HAL_DCMI_IRQHandler+0xf8>)
 8002154:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fafe 	bl	800275c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <HAL_DCMI_IRQHandler+0xf8>)
 800218c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fae2 	bl	800275c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2210      	movs	r2, #16
 80021a8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f83c 	bl	8002228 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2208      	movs	r2, #8
 80021c0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fc20 	bl	8001a08 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d019      	beq.n	8002206 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d107      	bne.n	80021f0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 021e 	bic.w	r2, r2, #30
 80021ee:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fbcf 	bl	80019a4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	08002367 	.word	0x08002367

08002214 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d043      	beq.n	80022de <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d118      	bne.n	80022a2 <DCMI_DMAXferCplt+0x66>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d015      	beq.n	80022a2 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	00da      	lsls	r2, r3, #3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4413      	add	r3, r2
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	f001 fe37 	bl	8003f04 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	1e5a      	subs	r2, r3, #1
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
 80022a0:	e044      	b.n	800232c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d13c      	bne.n	800232c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	00da      	lsls	r2, r3, #3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	2201      	movs	r2, #1
 80022cc:	4619      	mov	r1, r3
 80022ce:	f001 fe19 	bl	8003f04 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
 80022dc:	e026      	b.n	800232c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	e017      	b.n	800232c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10f      	bne.n	800232c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	440a      	add	r2, r1
 8002322:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	429a      	cmp	r2, r3
 8002336:	d112      	bne.n	800235e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff ff44 	bl	8002214 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e05f      	b.n	8002466 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fd08 	bl	8000dd0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fd05 	bl	8000dd0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023dc:	f023 0308 	bic.w	r3, r3, #8
 80023e0:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80023f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002402:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800240e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b10      	cmp	r3, #16
 800241e:	d112      	bne.n	8002446 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7f1b      	ldrb	r3, [r3, #28]
 8002424:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7f5b      	ldrb	r3, [r3, #29]
 800242a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800242c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7f9b      	ldrb	r3, [r3, #30]
 8002432:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002434:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7fdb      	ldrb	r3, [r3, #31]
 800243c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002442:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002444:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 021e 	orr.w	r2, r2, #30
 8002454:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff fc0e 	bl	8001c9c <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e099      	b.n	80025c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ac:	e00f      	b.n	80024ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ae:	f7ff fbf5 	bl	8001c9c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d908      	bls.n	80024ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e078      	b.n	80025c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e8      	bne.n	80024ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_DMA_Init+0x158>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	2b04      	cmp	r3, #4
 8002526:	d107      	bne.n	8002538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	4313      	orrs	r3, r2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f023 0307 	bic.w	r3, r3, #7
 800254e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b04      	cmp	r3, #4
 8002560:	d117      	bne.n	8002592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fb01 	bl	8002b7c <DMA_CheckFifoParam>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800258e:	2301      	movs	r3, #1
 8002590:	e016      	b.n	80025c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fab8 	bl	8002b10 <DMA_CalcBaseAndBitshift>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	223f      	movs	r2, #63	; 0x3f
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	f010803f 	.word	0xf010803f

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_Start_IT+0x26>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e040      	b.n	8002674 <HAL_DMA_Start_IT+0xa8>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d12f      	bne.n	8002666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fa4a 	bl	8002ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	223f      	movs	r2, #63	; 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0216 	orr.w	r2, r2, #22
 800263a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0208 	orr.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e005      	b.n	8002672 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800266e:	2302      	movs	r3, #2
 8002670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002672:	7dfb      	ldrb	r3, [r7, #23]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800268a:	f7ff fb07 	bl	8001c9c <HAL_GetTick>
 800268e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d008      	beq.n	80026ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e052      	b.n	8002754 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0216 	bic.w	r2, r2, #22
 80026bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_DMA_Abort+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0208 	bic.w	r2, r2, #8
 80026ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fe:	e013      	b.n	8002728 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002700:	f7ff facc 	bl	8001c9c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b05      	cmp	r3, #5
 800270c:	d90c      	bls.n	8002728 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2203      	movs	r2, #3
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e015      	b.n	8002754 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e4      	bne.n	8002700 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	223f      	movs	r2, #63	; 0x3f
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d004      	beq.n	800277a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00c      	b.n	8002794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2205      	movs	r2, #5
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ac:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <HAL_DMA_IRQHandler+0x248>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a8e      	ldr	r2, [pc, #568]	; (80029ec <HAL_DMA_IRQHandler+0x24c>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2208      	movs	r2, #8
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01a      	beq.n	800280c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2208      	movs	r2, #8
 80027fa:	409a      	lsls	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2201      	movs	r2, #1
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0202 	orr.w	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2204      	movs	r2, #4
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2204      	movs	r2, #4
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2210      	movs	r2, #16
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d043      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03c      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	2210      	movs	r2, #16
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d024      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e01f      	b.n	8002910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
 80028e0:	e016      	b.n	8002910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0208 	bic.w	r2, r2, #8
 80028fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2220      	movs	r2, #32
 8002916:	409a      	lsls	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 808f 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8087 	beq.w	8002a40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2220      	movs	r2, #32
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b05      	cmp	r3, #5
 8002948:	d136      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0216 	bic.w	r2, r2, #22
 8002958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <HAL_DMA_IRQHandler+0x1da>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0208 	bic.w	r2, r2, #8
 8002988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	223f      	movs	r2, #63	; 0x3f
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07e      	beq.n	8002aac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
        }
        return;
 80029b6:	e079      	b.n	8002aac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01d      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10d      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d031      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e02c      	b.n	8002a40 <HAL_DMA_IRQHandler+0x2a0>
 80029e6:	bf00      	nop
 80029e8:	20000000 	.word	0x20000000
 80029ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d023      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
 8002a00:	e01e      	b.n	8002a40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0210 	bic.w	r2, r2, #16
 8002a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d032      	beq.n	8002aae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d022      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2205      	movs	r2, #5
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d307      	bcc.n	8002a88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f2      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x2cc>
 8002a86:	e000      	b.n	8002a8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aac:	bf00      	nop
    }
  }
}
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d108      	bne.n	8002af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002af2:	e007      	b.n	8002b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3b10      	subs	r3, #16
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <DMA_CalcBaseAndBitshift+0x64>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2a:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d909      	bls.n	8002b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	1d1a      	adds	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b50:	e007      	b.n	8002b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	aaaaaaab 	.word	0xaaaaaaab
 8002b78:	08010f98 	.word	0x08010f98

08002b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11f      	bne.n	8002bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d856      	bhi.n	8002c4a <DMA_CheckFifoParam+0xce>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <DMA_CheckFifoParam+0x28>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc7 	.word	0x08002bc7
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002c4b 	.word	0x08002c4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d046      	beq.n	8002c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e043      	b.n	8002c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bce:	d140      	bne.n	8002c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e03d      	b.n	8002c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bde:	d121      	bne.n	8002c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d837      	bhi.n	8002c56 <DMA_CheckFifoParam+0xda>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <DMA_CheckFifoParam+0x70>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c03 	.word	0x08002c03
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c15 	.word	0x08002c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e030      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d025      	beq.n	8002c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e022      	b.n	8002c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c1c:	d11f      	bne.n	8002c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c22:	e01c      	b.n	8002c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d903      	bls.n	8002c32 <DMA_CheckFifoParam+0xb6>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c30:	e018      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      break;
 8002c36:	e015      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e00b      	b.n	8002c62 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e00a      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e008      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e006      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
    }
  } 
  
  return status; 
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop

08002c74 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d106      	bne.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f001 b911 	b.w	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2240      	movs	r2, #64	; 0x40
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f001 b8ff 	b.w	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f001 b8f7 	b.w	8003ebe <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	f041 80e5 	bne.w	8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d02:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f001 f910 	bl	8003f38 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b8d      	ldr	r3, [pc, #564]	; (8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d960      	bls.n	8002de6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a8b      	ldr	r2, [pc, #556]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d057      	beq.n	8002dde <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a8a      	ldr	r2, [pc, #552]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d050      	beq.n	8002dda <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a88      	ldr	r2, [pc, #544]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d049      	beq.n	8002dd6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a87      	ldr	r2, [pc, #540]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d042      	beq.n	8002dd2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a85      	ldr	r2, [pc, #532]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d03a      	beq.n	8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a84      	ldr	r2, [pc, #528]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d032      	beq.n	8002dc6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a82      	ldr	r2, [pc, #520]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02a      	beq.n	8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a81      	ldr	r2, [pc, #516]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7f      	ldr	r2, [pc, #508]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01a      	beq.n	8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d012      	beq.n	8002dae <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7c      	ldr	r2, [pc, #496]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00a      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7b      	ldr	r2, [pc, #492]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d102      	bne.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002da0:	e01e      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002da6:	e01b      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002da8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dac:	e018      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002db2:	e015      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002db4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002db8:	e012      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dbe:	e00f      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dc4:	e00c      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dca:	e009      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dd0:	e006      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e004      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e002      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e000      	b.n	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002dde:	2320      	movs	r3, #32
 8002de0:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002de2:	60d3      	str	r3, [r2, #12]
 8002de4:	e14f      	b.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d960      	bls.n	8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d057      	beq.n	8002eac <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a56      	ldr	r2, [pc, #344]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d050      	beq.n	8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a55      	ldr	r2, [pc, #340]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d049      	beq.n	8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a53      	ldr	r2, [pc, #332]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d042      	beq.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d03a      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a50      	ldr	r2, [pc, #320]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d032      	beq.n	8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a4f      	ldr	r2, [pc, #316]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02a      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a4d      	ldr	r2, [pc, #308]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d022      	beq.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a4c      	ldr	r2, [pc, #304]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01a      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a4a      	ldr	r2, [pc, #296]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d012      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00a      	beq.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a47      	ldr	r2, [pc, #284]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d102      	bne.n	8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002e6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e6e:	e01e      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e74:	e01b      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e7a:	e018      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e80:	e015      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e86:	e012      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e8c:	e00f      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e92:	e00c      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e98:	e009      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e9e:	e006      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e004      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e002      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e000      	b.n	8002eae <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002eac:	2320      	movs	r3, #32
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002eb0:	6093      	str	r3, [r2, #8]
 8002eb2:	e0e8      	b.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b35      	ldr	r3, [pc, #212]	; (8002f90 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f240 8082 	bls.w	8002fc6 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d078      	beq.n	8002fbe <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d071      	beq.n	8002fba <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d06a      	beq.n	8002fb6 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d063      	beq.n	8002fb2 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d05b      	beq.n	8002fac <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d053      	beq.n	8002fa6 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d04b      	beq.n	8002fa0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d043      	beq.n	8002f9a <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d012      	beq.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00a      	beq.n	8002f46 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d102      	bne.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002f3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f3e:	e03f      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f44:	e03c      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f4a:	e039      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f50:	e036      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f52:	bf00      	nop
 8002f54:	40026458 	.word	0x40026458
 8002f58:	40026010 	.word	0x40026010
 8002f5c:	40026410 	.word	0x40026410
 8002f60:	40026070 	.word	0x40026070
 8002f64:	40026470 	.word	0x40026470
 8002f68:	40026028 	.word	0x40026028
 8002f6c:	40026428 	.word	0x40026428
 8002f70:	40026088 	.word	0x40026088
 8002f74:	40026488 	.word	0x40026488
 8002f78:	40026040 	.word	0x40026040
 8002f7c:	40026440 	.word	0x40026440
 8002f80:	400260a0 	.word	0x400260a0
 8002f84:	400264a0 	.word	0x400264a0
 8002f88:	40026400 	.word	0x40026400
 8002f8c:	400260b8 	.word	0x400260b8
 8002f90:	40026058 	.word	0x40026058
 8002f94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f98:	e012      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9e:	e00f      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa4:	e00c      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002faa:	e009      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fb0:	e006      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e004      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e002      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e000      	b.n	8002fc0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	4a8c      	ldr	r2, [pc, #560]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002fc2:	60d3      	str	r3, [r2, #12]
 8002fc4:	e05f      	b.n	8003086 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a8b      	ldr	r2, [pc, #556]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d057      	beq.n	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a89      	ldr	r2, [pc, #548]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d050      	beq.n	800307c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a88      	ldr	r2, [pc, #544]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d049      	beq.n	8003078 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a86      	ldr	r2, [pc, #536]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d042      	beq.n	8003074 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a85      	ldr	r2, [pc, #532]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d03a      	beq.n	800306e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a83      	ldr	r2, [pc, #524]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d032      	beq.n	8003068 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a82      	ldr	r2, [pc, #520]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d02a      	beq.n	8003062 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a80      	ldr	r2, [pc, #512]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d022      	beq.n	800305c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7f      	ldr	r2, [pc, #508]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d01a      	beq.n	8003056 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a7d      	ldr	r2, [pc, #500]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d012      	beq.n	8003050 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7c      	ldr	r2, [pc, #496]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00a      	beq.n	800304a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7a      	ldr	r2, [pc, #488]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d102      	bne.n	8003044 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 800303e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003042:	e01e      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003048:	e01b      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800304a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800304e:	e018      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003054:	e015      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800305a:	e012      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800305c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003060:	e00f      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003066:	e00c      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800306c:	e009      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800306e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003072:	e006      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003074:	2320      	movs	r3, #32
 8003076:	e004      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003078:	2320      	movs	r3, #32
 800307a:	e002      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800307c:	2320      	movs	r3, #32
 800307e:	e000      	b.n	8003082 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003080:	2320      	movs	r3, #32
 8003082:	4a5c      	ldr	r2, [pc, #368]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003084:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4b66      	ldr	r3, [pc, #408]	; (8003228 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800308e:	429a      	cmp	r2, r3
 8003090:	d960      	bls.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a58      	ldr	r2, [pc, #352]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d057      	beq.n	800314c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a56      	ldr	r2, [pc, #344]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d050      	beq.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a55      	ldr	r2, [pc, #340]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d049      	beq.n	8003144 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d042      	beq.n	8003140 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d03a      	beq.n	800313a <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d032      	beq.n	8003134 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d02a      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a4c      	ldr	r2, [pc, #304]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d01a      	beq.n	8003122 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d012      	beq.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00a      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a47      	ldr	r2, [pc, #284]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d102      	bne.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800310a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800310e:	e01e      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003110:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003114:	e01b      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003116:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800311a:	e018      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800311c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003120:	e015      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003122:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003126:	e012      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	e00f      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003132:	e00c      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	e009      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800313a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313e:	e006      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003140:	2310      	movs	r3, #16
 8003142:	e004      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003144:	2310      	movs	r3, #16
 8003146:	e002      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003148:	2310      	movs	r3, #16
 800314a:	e000      	b.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800314c:	2310      	movs	r3, #16
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003150:	60d3      	str	r3, [r2, #12]
 8003152:	e14f      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800315c:	429a      	cmp	r2, r3
 800315e:	f240 8082 	bls.w	8003266 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d078      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a22      	ldr	r2, [pc, #136]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d071      	beq.n	800325a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a21      	ldr	r2, [pc, #132]	; (8003200 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d06a      	beq.n	8003256 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d063      	beq.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d05b      	beq.n	800324c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d053      	beq.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04b      	beq.n	8003240 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a19      	ldr	r2, [pc, #100]	; (8003214 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d043      	beq.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d03b      	beq.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d012      	beq.n	80031ec <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00a      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d102      	bne.n	80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80031da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031de:	e03f      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031e4:	e03c      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031ea:	e039      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031f0:	e036      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80031f2:	bf00      	nop
 80031f4:	40026000 	.word	0x40026000
 80031f8:	40026010 	.word	0x40026010
 80031fc:	40026410 	.word	0x40026410
 8003200:	40026070 	.word	0x40026070
 8003204:	40026470 	.word	0x40026470
 8003208:	40026028 	.word	0x40026028
 800320c:	40026428 	.word	0x40026428
 8003210:	40026088 	.word	0x40026088
 8003214:	40026488 	.word	0x40026488
 8003218:	40026040 	.word	0x40026040
 800321c:	40026440 	.word	0x40026440
 8003220:	400260a0 	.word	0x400260a0
 8003224:	400264a0 	.word	0x400264a0
 8003228:	40026458 	.word	0x40026458
 800322c:	40026400 	.word	0x40026400
 8003230:	400260b8 	.word	0x400260b8
 8003234:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003238:	e012      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800323a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323e:	e00f      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	e00c      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800324a:	e009      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800324c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003250:	e006      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003252:	2310      	movs	r3, #16
 8003254:	e004      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003256:	2310      	movs	r3, #16
 8003258:	e002      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800325a:	2310      	movs	r3, #16
 800325c:	e000      	b.n	8003260 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800325e:	2310      	movs	r3, #16
 8003260:	4a8c      	ldr	r2, [pc, #560]	; (8003494 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	e0c6      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800326e:	429a      	cmp	r2, r3
 8003270:	d960      	bls.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a89      	ldr	r2, [pc, #548]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d057      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a87      	ldr	r2, [pc, #540]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d050      	beq.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a86      	ldr	r2, [pc, #536]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d049      	beq.n	8003324 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a84      	ldr	r2, [pc, #528]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d042      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a83      	ldr	r2, [pc, #524]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d03a      	beq.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a81      	ldr	r2, [pc, #516]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d032      	beq.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a80      	ldr	r2, [pc, #512]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d02a      	beq.n	800330e <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7e      	ldr	r2, [pc, #504]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d022      	beq.n	8003308 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7d      	ldr	r2, [pc, #500]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d01a      	beq.n	8003302 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a7b      	ldr	r2, [pc, #492]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d012      	beq.n	80032fc <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00a      	beq.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a78      	ldr	r2, [pc, #480]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d102      	bne.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80032ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ee:	e01e      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032f4:	e01b      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032fa:	e018      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80032fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003300:	e015      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003306:	e012      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330c:	e00f      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800330e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003312:	e00c      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003318:	e009      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800331a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331e:	e006      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003320:	2310      	movs	r3, #16
 8003322:	e004      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003324:	2310      	movs	r3, #16
 8003326:	e002      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003328:	2310      	movs	r3, #16
 800332a:	e000      	b.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800332c:	2310      	movs	r3, #16
 800332e:	4a67      	ldr	r2, [pc, #412]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003330:	60d3      	str	r3, [r2, #12]
 8003332:	e05f      	b.n	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d057      	beq.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d050      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a55      	ldr	r2, [pc, #340]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d049      	beq.n	80033e6 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a54      	ldr	r2, [pc, #336]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d042      	beq.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03a      	beq.n	80033dc <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a51      	ldr	r2, [pc, #324]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d032      	beq.n	80033d6 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a4f      	ldr	r2, [pc, #316]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02a      	beq.n	80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4e      	ldr	r2, [pc, #312]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4c      	ldr	r2, [pc, #304]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01a      	beq.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4b      	ldr	r2, [pc, #300]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d012      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a49      	ldr	r2, [pc, #292]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00a      	beq.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a48      	ldr	r2, [pc, #288]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d102      	bne.n	80033b2 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80033ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033b0:	e01e      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033b6:	e01b      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033bc:	e018      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033c2:	e015      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033c8:	e012      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ce:	e00f      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d4:	e00c      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033da:	e009      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e0:	e006      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033e2:	2310      	movs	r3, #16
 80033e4:	e004      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033e6:	2310      	movs	r3, #16
 80033e8:	e002      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033ea:	2310      	movs	r3, #16
 80033ec:	e000      	b.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80033ee:	2310      	movs	r3, #16
 80033f0:	4a36      	ldr	r2, [pc, #216]	; (80034cc <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80033f2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f240 8082 	bls.w	8003506 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a25      	ldr	r2, [pc, #148]	; (800349c <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d078      	beq.n	80034fe <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d071      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d06a      	beq.n	80034f6 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d063      	beq.n	80034f2 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d05b      	beq.n	80034ec <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d053      	beq.n	80034e6 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04b      	beq.n	80034e0 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1a      	ldr	r2, [pc, #104]	; (80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d043      	beq.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d012      	beq.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00a      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d102      	bne.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800347a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800347e:	e03f      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003484:	e03c      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003486:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800348a:	e039      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800348c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003490:	e036      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003492:	bf00      	nop
 8003494:	40026400 	.word	0x40026400
 8003498:	40026058 	.word	0x40026058
 800349c:	40026010 	.word	0x40026010
 80034a0:	40026410 	.word	0x40026410
 80034a4:	40026070 	.word	0x40026070
 80034a8:	40026470 	.word	0x40026470
 80034ac:	40026028 	.word	0x40026028
 80034b0:	40026428 	.word	0x40026428
 80034b4:	40026088 	.word	0x40026088
 80034b8:	40026488 	.word	0x40026488
 80034bc:	40026040 	.word	0x40026040
 80034c0:	40026440 	.word	0x40026440
 80034c4:	400260a0 	.word	0x400260a0
 80034c8:	400264a0 	.word	0x400264a0
 80034cc:	40026000 	.word	0x40026000
 80034d0:	40026458 	.word	0x40026458
 80034d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034d8:	e012      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034de:	e00f      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e4:	e00c      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ea:	e009      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f0:	e006      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034f2:	2308      	movs	r3, #8
 80034f4:	e004      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034f6:	2308      	movs	r3, #8
 80034f8:	e002      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034fa:	2308      	movs	r3, #8
 80034fc:	e000      	b.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80034fe:	2308      	movs	r3, #8
 8003500:	4a8c      	ldr	r2, [pc, #560]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003502:	60d3      	str	r3, [r2, #12]
 8003504:	e14e      	b.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800350e:	429a      	cmp	r2, r3
 8003510:	d960      	bls.n	80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a89      	ldr	r2, [pc, #548]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d057      	beq.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0x958>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a87      	ldr	r2, [pc, #540]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d050      	beq.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a86      	ldr	r2, [pc, #536]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d049      	beq.n	80035c4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a84      	ldr	r2, [pc, #528]	; (8003748 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d042      	beq.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a83      	ldr	r2, [pc, #524]	; (800374c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d03a      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a81      	ldr	r2, [pc, #516]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d032      	beq.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a80      	ldr	r2, [pc, #512]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d02a      	beq.n	80035ae <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a7e      	ldr	r2, [pc, #504]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d022      	beq.n	80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d01a      	beq.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d012      	beq.n	800359c <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7a      	ldr	r2, [pc, #488]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00a      	beq.n	8003596 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a78      	ldr	r2, [pc, #480]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d102      	bne.n	8003590 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800358a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800358e:	e01e      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003594:	e01b      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003596:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800359a:	e018      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800359c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035a0:	e015      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035a6:	e012      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ac:	e00f      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b2:	e00c      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b8:	e009      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035be:	e006      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035c0:	2308      	movs	r3, #8
 80035c2:	e004      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035c4:	2308      	movs	r3, #8
 80035c6:	e002      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035c8:	2308      	movs	r3, #8
 80035ca:	e000      	b.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80035cc:	2308      	movs	r3, #8
 80035ce:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	e0e7      	b.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b64      	ldr	r3, [pc, #400]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80035dc:	429a      	cmp	r2, r3
 80035de:	d960      	bls.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a55      	ldr	r2, [pc, #340]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d057      	beq.n	800369a <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a54      	ldr	r2, [pc, #336]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d050      	beq.n	8003696 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d049      	beq.n	8003692 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d042      	beq.n	800368e <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a4f      	ldr	r2, [pc, #316]	; (800374c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d03a      	beq.n	8003688 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4e      	ldr	r2, [pc, #312]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d032      	beq.n	8003682 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4c      	ldr	r2, [pc, #304]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d02a      	beq.n	800367c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a49      	ldr	r2, [pc, #292]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01a      	beq.n	8003670 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d012      	beq.n	800366a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a46      	ldr	r2, [pc, #280]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00a      	beq.n	8003664 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a45      	ldr	r2, [pc, #276]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d102      	bne.n	800365e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003658:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800365c:	e01e      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800365e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003662:	e01b      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003664:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003668:	e018      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800366a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800366e:	e015      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003670:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003674:	e012      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367a:	e00f      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800367c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003680:	e00c      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003686:	e009      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800368c:	e006      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800368e:	2308      	movs	r3, #8
 8003690:	e004      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003692:	2308      	movs	r3, #8
 8003694:	e002      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003696:	2308      	movs	r3, #8
 8003698:	e000      	b.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800369a:	2308      	movs	r3, #8
 800369c:	4a34      	ldr	r2, [pc, #208]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800369e:	60d3      	str	r3, [r2, #12]
 80036a0:	e080      	b.n	80037a4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d078      	beq.n	800379e <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d071      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d06a      	beq.n	8003796 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d063      	beq.n	8003792 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d05b      	beq.n	800378c <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d053      	beq.n	8003786 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04b      	beq.n	8003780 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d043      	beq.n	800377a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d012      	beq.n	800372c <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00a      	beq.n	8003726 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d102      	bne.n	8003720 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800371a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800371e:	e03f      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003724:	e03c      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003726:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800372a:	e039      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800372c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003730:	e036      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003732:	bf00      	nop
 8003734:	40026400 	.word	0x40026400
 8003738:	400260b8 	.word	0x400260b8
 800373c:	40026010 	.word	0x40026010
 8003740:	40026410 	.word	0x40026410
 8003744:	40026070 	.word	0x40026070
 8003748:	40026470 	.word	0x40026470
 800374c:	40026028 	.word	0x40026028
 8003750:	40026428 	.word	0x40026428
 8003754:	40026088 	.word	0x40026088
 8003758:	40026488 	.word	0x40026488
 800375c:	40026040 	.word	0x40026040
 8003760:	40026440 	.word	0x40026440
 8003764:	400260a0 	.word	0x400260a0
 8003768:	400264a0 	.word	0x400264a0
 800376c:	40026058 	.word	0x40026058
 8003770:	40026000 	.word	0x40026000
 8003774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003778:	e012      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800377a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377e:	e00f      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003784:	e00c      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378a:	e009      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800378c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003790:	e006      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003792:	2308      	movs	r3, #8
 8003794:	e004      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003796:	2308      	movs	r3, #8
 8003798:	e002      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800379a:	2308      	movs	r3, #8
 800379c:	e000      	b.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800379e:	2308      	movs	r3, #8
 80037a0:	4a8a      	ldr	r2, [pc, #552]	; (80039cc <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80037a2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	4b89      	ldr	r3, [pc, #548]	; (80039d0 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d960      	bls.n	8003872 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a87      	ldr	r2, [pc, #540]	; (80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d057      	beq.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a86      	ldr	r2, [pc, #536]	; (80039d8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d050      	beq.n	8003866 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a84      	ldr	r2, [pc, #528]	; (80039dc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d049      	beq.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a83      	ldr	r2, [pc, #524]	; (80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d042      	beq.n	800385e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a81      	ldr	r2, [pc, #516]	; (80039e4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d03a      	beq.n	8003858 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a80      	ldr	r2, [pc, #512]	; (80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d032      	beq.n	8003852 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7e      	ldr	r2, [pc, #504]	; (80039ec <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02a      	beq.n	800384c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7d      	ldr	r2, [pc, #500]	; (80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7b      	ldr	r2, [pc, #492]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01a      	beq.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7a      	ldr	r2, [pc, #488]	; (80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d012      	beq.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a78      	ldr	r2, [pc, #480]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00a      	beq.n	8003834 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a77      	ldr	r2, [pc, #476]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d102      	bne.n	800382e <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800382c:	e01e      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800382e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003832:	e01b      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003838:	e018      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800383a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800383e:	e015      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003840:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003844:	e012      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800384a:	e00f      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800384c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003850:	e00c      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003856:	e009      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800385c:	e006      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800385e:	2304      	movs	r3, #4
 8003860:	e004      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003862:	2304      	movs	r3, #4
 8003864:	e002      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003866:	2304      	movs	r3, #4
 8003868:	e000      	b.n	800386c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800386a:	2304      	movs	r3, #4
 800386c:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800386e:	60d3      	str	r3, [r2, #12]
 8003870:	e150      	b.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800387a:	429a      	cmp	r2, r3
 800387c:	d960      	bls.n	8003940 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a54      	ldr	r2, [pc, #336]	; (80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d057      	beq.n	8003938 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d050      	beq.n	8003934 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a51      	ldr	r2, [pc, #324]	; (80039dc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d049      	beq.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d042      	beq.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03a      	beq.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4c      	ldr	r2, [pc, #304]	; (80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d032      	beq.n	8003920 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02a      	beq.n	800391a <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a49      	ldr	r2, [pc, #292]	; (80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d022      	beq.n	8003914 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d01a      	beq.n	800390e <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a46      	ldr	r2, [pc, #280]	; (80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d012      	beq.n	8003908 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a45      	ldr	r2, [pc, #276]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00a      	beq.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d102      	bne.n	80038fc <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80038f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038fa:	e01e      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80038fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003900:	e01b      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003902:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003906:	e018      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003908:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800390c:	e015      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800390e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003912:	e012      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003918:	e00f      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800391a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800391e:	e00c      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003924:	e009      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392a:	e006      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800392c:	2304      	movs	r3, #4
 800392e:	e004      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003930:	2304      	movs	r3, #4
 8003932:	e002      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003934:	2304      	movs	r3, #4
 8003936:	e000      	b.n	800393a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003938:	2304      	movs	r3, #4
 800393a:	4a32      	ldr	r2, [pc, #200]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800393c:	6093      	str	r3, [r2, #8]
 800393e:	e0e9      	b.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003948:	429a      	cmp	r2, r3
 800394a:	f240 8083 	bls.w	8003a54 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a20      	ldr	r2, [pc, #128]	; (80039d4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d079      	beq.n	8003a4c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d072      	beq.n	8003a48 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d06b      	beq.n	8003a44 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d064      	beq.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d05c      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d054      	beq.n	8003a34 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04c      	beq.n	8003a2e <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d044      	beq.n	8003a28 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03c      	beq.n	8003a22 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d034      	beq.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d02c      	beq.n	8003a16 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0f      	ldr	r2, [pc, #60]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d124      	bne.n	8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80039c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039ca:	e040      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80039cc:	40026000 	.word	0x40026000
 80039d0:	40026458 	.word	0x40026458
 80039d4:	40026010 	.word	0x40026010
 80039d8:	40026410 	.word	0x40026410
 80039dc:	40026070 	.word	0x40026070
 80039e0:	40026470 	.word	0x40026470
 80039e4:	40026028 	.word	0x40026028
 80039e8:	40026428 	.word	0x40026428
 80039ec:	40026088 	.word	0x40026088
 80039f0:	40026488 	.word	0x40026488
 80039f4:	40026040 	.word	0x40026040
 80039f8:	40026440 	.word	0x40026440
 80039fc:	400260a0 	.word	0x400260a0
 8003a00:	400264a0 	.word	0x400264a0
 8003a04:	40026400 	.word	0x40026400
 8003a08:	400260b8 	.word	0x400260b8
 8003a0c:	40026058 	.word	0x40026058
 8003a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a14:	e01b      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a1a:	e018      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a20:	e015      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a26:	e012      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a2c:	e00f      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a32:	e00c      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a38:	e009      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3e:	e006      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a40:	2304      	movs	r3, #4
 8003a42:	e004      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a44:	2304      	movs	r3, #4
 8003a46:	e002      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e000      	b.n	8003a4e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	4a8b      	ldr	r2, [pc, #556]	; (8003c7c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003a50:	60d3      	str	r3, [r2, #12]
 8003a52:	e05f      	b.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a89      	ldr	r2, [pc, #548]	; (8003c80 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d057      	beq.n	8003b0e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a88      	ldr	r2, [pc, #544]	; (8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d050      	beq.n	8003b0a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a86      	ldr	r2, [pc, #536]	; (8003c88 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d049      	beq.n	8003b06 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a85      	ldr	r2, [pc, #532]	; (8003c8c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d042      	beq.n	8003b02 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a83      	ldr	r2, [pc, #524]	; (8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03a      	beq.n	8003afc <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a82      	ldr	r2, [pc, #520]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d032      	beq.n	8003af6 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a80      	ldr	r2, [pc, #512]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02a      	beq.n	8003af0 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a7f      	ldr	r2, [pc, #508]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a7d      	ldr	r2, [pc, #500]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01a      	beq.n	8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d012      	beq.n	8003ade <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7a      	ldr	r2, [pc, #488]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a79      	ldr	r2, [pc, #484]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003acc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ad0:	e01e      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad6:	e01b      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003ad8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003adc:	e018      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003ade:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ae2:	e015      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ae8:	e012      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aee:	e00f      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af4:	e00c      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003afa:	e009      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b00:	e006      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b02:	2304      	movs	r3, #4
 8003b04:	e004      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b06:	2304      	movs	r3, #4
 8003b08:	e002      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b0a:	2304      	movs	r3, #4
 8003b0c:	e000      	b.n	8003b10 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	4a5a      	ldr	r2, [pc, #360]	; (8003c7c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003b12:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d95c      	bls.n	8003bda <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a56      	ldr	r2, [pc, #344]	; (8003c80 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d053      	beq.n	8003bd2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a55      	ldr	r2, [pc, #340]	; (8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04c      	beq.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a53      	ldr	r2, [pc, #332]	; (8003c88 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03e      	beq.n	8003bc6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a50      	ldr	r2, [pc, #320]	; (8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d037      	beq.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4f      	ldr	r2, [pc, #316]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d030      	beq.n	8003bbe <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4d      	ldr	r2, [pc, #308]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d029      	beq.n	8003bba <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4a      	ldr	r2, [pc, #296]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01a      	beq.n	8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a49      	ldr	r2, [pc, #292]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d012      	beq.n	8003baa <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a47      	ldr	r2, [pc, #284]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a46      	ldr	r2, [pc, #280]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d102      	bne.n	8003b9e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9c:	e01a      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ba2:	e017      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba8:	e014      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bae:	e011      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb4:	e00e      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	e00c      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	e00a      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	e008      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bc2:	2340      	movs	r3, #64	; 0x40
 8003bc4:	e006      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e004      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e002      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4a37      	ldr	r2, [pc, #220]	; (8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003bd6:	60d3      	str	r3, [r2, #12]
 8003bd8:	e141      	b.n	8003e5e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d97c      	bls.n	8003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d073      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d06c      	beq.n	8003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d065      	beq.n	8003cd0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d05e      	beq.n	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d057      	beq.n	8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d050      	beq.n	8003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d049      	beq.n	8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d042      	beq.n	8003cbc <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d01a      	beq.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d012      	beq.n	8003c70 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00a      	beq.n	8003c6a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d102      	bne.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c62:	e03a      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c68:	e037      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6e:	e034      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c74:	e031      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c7a:	e02e      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003c7c:	40026000 	.word	0x40026000
 8003c80:	40026010 	.word	0x40026010
 8003c84:	40026410 	.word	0x40026410
 8003c88:	40026070 	.word	0x40026070
 8003c8c:	40026470 	.word	0x40026470
 8003c90:	40026028 	.word	0x40026028
 8003c94:	40026428 	.word	0x40026428
 8003c98:	40026088 	.word	0x40026088
 8003c9c:	40026488 	.word	0x40026488
 8003ca0:	40026040 	.word	0x40026040
 8003ca4:	40026440 	.word	0x40026440
 8003ca8:	400260a0 	.word	0x400260a0
 8003cac:	400264a0 	.word	0x400264a0
 8003cb0:	40026458 	.word	0x40026458
 8003cb4:	40026400 	.word	0x40026400
 8003cb8:	400260b8 	.word	0x400260b8
 8003cbc:	2340      	movs	r3, #64	; 0x40
 8003cbe:	e00c      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	e00a      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cc4:	2340      	movs	r3, #64	; 0x40
 8003cc6:	e008      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cc8:	2340      	movs	r3, #64	; 0x40
 8003cca:	e006      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e004      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e002      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	4a7b      	ldr	r2, [pc, #492]	; (8003ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	e0be      	b.n	8003e5e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d95c      	bls.n	8003da6 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d053      	beq.n	8003d9e <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a76      	ldr	r2, [pc, #472]	; (8003ed4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04c      	beq.n	8003d9a <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a74      	ldr	r2, [pc, #464]	; (8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a73      	ldr	r2, [pc, #460]	; (8003edc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d03e      	beq.n	8003d92 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a71      	ldr	r2, [pc, #452]	; (8003ee0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d037      	beq.n	8003d8e <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a70      	ldr	r2, [pc, #448]	; (8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d030      	beq.n	8003d8a <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d029      	beq.n	8003d86 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6d      	ldr	r2, [pc, #436]	; (8003eec <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d022      	beq.n	8003d82 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6b      	ldr	r2, [pc, #428]	; (8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01a      	beq.n	8003d7c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6a      	ldr	r2, [pc, #424]	; (8003ef4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d012      	beq.n	8003d76 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a68      	ldr	r2, [pc, #416]	; (8003ef8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00a      	beq.n	8003d70 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a67      	ldr	r2, [pc, #412]	; (8003efc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d102      	bne.n	8003d6a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d68:	e01a      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d6e:	e017      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d74:	e014      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d7a:	e011      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d80:	e00e      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d82:	2340      	movs	r3, #64	; 0x40
 8003d84:	e00c      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d86:	2340      	movs	r3, #64	; 0x40
 8003d88:	e00a      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	e008      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d8e:	2340      	movs	r3, #64	; 0x40
 8003d90:	e006      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e004      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e002      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4a57      	ldr	r2, [pc, #348]	; (8003f00 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003da2:	60d3      	str	r3, [r2, #12]
 8003da4:	e05b      	b.n	8003e5e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a49      	ldr	r2, [pc, #292]	; (8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d053      	beq.n	8003e58 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a47      	ldr	r2, [pc, #284]	; (8003ed4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d04c      	beq.n	8003e54 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a46      	ldr	r2, [pc, #280]	; (8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d045      	beq.n	8003e50 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a44      	ldr	r2, [pc, #272]	; (8003edc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03e      	beq.n	8003e4c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a43      	ldr	r2, [pc, #268]	; (8003ee0 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d037      	beq.n	8003e48 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a41      	ldr	r2, [pc, #260]	; (8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d030      	beq.n	8003e44 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d029      	beq.n	8003e40 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3e      	ldr	r2, [pc, #248]	; (8003eec <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d022      	beq.n	8003e3c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01a      	beq.n	8003e36 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d012      	beq.n	8003e30 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00a      	beq.n	8003e2a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d102      	bne.n	8003e24 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e22:	e01a      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e28:	e017      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2e:	e014      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e34:	e011      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3a:	e00e      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e3c:	2340      	movs	r3, #64	; 0x40
 8003e3e:	e00c      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e40:	2340      	movs	r3, #64	; 0x40
 8003e42:	e00a      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	e008      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	e006      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e004      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e002      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003e5c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0216 	orr.w	r2, r2, #22
 8003e6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0208 	orr.w	r2, r2, #8
 8003e9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e005      	b.n	8003ebc <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40026400 	.word	0x40026400
 8003ecc:	40026058 	.word	0x40026058
 8003ed0:	40026010 	.word	0x40026010
 8003ed4:	40026410 	.word	0x40026410
 8003ed8:	40026070 	.word	0x40026070
 8003edc:	40026470 	.word	0x40026470
 8003ee0:	40026028 	.word	0x40026028
 8003ee4:	40026428 	.word	0x40026428
 8003ee8:	40026088 	.word	0x40026088
 8003eec:	40026488 	.word	0x40026488
 8003ef0:	40026040 	.word	0x40026040
 8003ef4:	40026440 	.word	0x40026440
 8003ef8:	400260a0 	.word	0x400260a0
 8003efc:	400264a0 	.word	0x400264a0
 8003f00:	40026000 	.word	0x40026000

08003f04 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	60da      	str	r2, [r3, #12]
 8003f20:	e003      	b.n	8003f2a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d108      	bne.n	8003f68 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f66:	e007      	b.n	8003f78 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	; 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e16b      	b.n	8004278 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	f040 815a 	bne.w	8004272 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d005      	beq.n	8003fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d130      	bne.n	8004038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800400c:	2201      	movs	r2, #1
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 0201 	and.w	r2, r3, #1
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b03      	cmp	r3, #3
 8004042:	d017      	beq.n	8004074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d123      	bne.n	80040c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	08da      	lsrs	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3208      	adds	r2, #8
 8004088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	220f      	movs	r2, #15
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	08da      	lsrs	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3208      	adds	r2, #8
 80040c2:	69b9      	ldr	r1, [r7, #24]
 80040c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80b4 	beq.w	8004272 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	4b60      	ldr	r3, [pc, #384]	; (8004290 <HAL_GPIO_Init+0x30c>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	4a5f      	ldr	r2, [pc, #380]	; (8004290 <HAL_GPIO_Init+0x30c>)
 8004114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004118:	6453      	str	r3, [r2, #68]	; 0x44
 800411a:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_GPIO_Init+0x30c>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004126:	4a5b      	ldr	r2, [pc, #364]	; (8004294 <HAL_GPIO_Init+0x310>)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	3302      	adds	r3, #2
 800412e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	220f      	movs	r2, #15
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a52      	ldr	r2, [pc, #328]	; (8004298 <HAL_GPIO_Init+0x314>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d02b      	beq.n	80041aa <HAL_GPIO_Init+0x226>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_GPIO_Init+0x318>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d025      	beq.n	80041a6 <HAL_GPIO_Init+0x222>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a50      	ldr	r2, [pc, #320]	; (80042a0 <HAL_GPIO_Init+0x31c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01f      	beq.n	80041a2 <HAL_GPIO_Init+0x21e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4f      	ldr	r2, [pc, #316]	; (80042a4 <HAL_GPIO_Init+0x320>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d019      	beq.n	800419e <HAL_GPIO_Init+0x21a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4e      	ldr	r2, [pc, #312]	; (80042a8 <HAL_GPIO_Init+0x324>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_GPIO_Init+0x216>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4d      	ldr	r2, [pc, #308]	; (80042ac <HAL_GPIO_Init+0x328>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00d      	beq.n	8004196 <HAL_GPIO_Init+0x212>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4c      	ldr	r2, [pc, #304]	; (80042b0 <HAL_GPIO_Init+0x32c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <HAL_GPIO_Init+0x20e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4b      	ldr	r2, [pc, #300]	; (80042b4 <HAL_GPIO_Init+0x330>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_GPIO_Init+0x20a>
 800418a:	2307      	movs	r3, #7
 800418c:	e00e      	b.n	80041ac <HAL_GPIO_Init+0x228>
 800418e:	2308      	movs	r3, #8
 8004190:	e00c      	b.n	80041ac <HAL_GPIO_Init+0x228>
 8004192:	2306      	movs	r3, #6
 8004194:	e00a      	b.n	80041ac <HAL_GPIO_Init+0x228>
 8004196:	2305      	movs	r3, #5
 8004198:	e008      	b.n	80041ac <HAL_GPIO_Init+0x228>
 800419a:	2304      	movs	r3, #4
 800419c:	e006      	b.n	80041ac <HAL_GPIO_Init+0x228>
 800419e:	2303      	movs	r3, #3
 80041a0:	e004      	b.n	80041ac <HAL_GPIO_Init+0x228>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_Init+0x228>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_GPIO_Init+0x228>
 80041aa:	2300      	movs	r3, #0
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	f002 0203 	and.w	r2, r2, #3
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	4093      	lsls	r3, r2
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041bc:	4935      	ldr	r1, [pc, #212]	; (8004294 <HAL_GPIO_Init+0x310>)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	089b      	lsrs	r3, r3, #2
 80041c2:	3302      	adds	r3, #2
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ca:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_GPIO_Init+0x334>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ee:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <HAL_GPIO_Init+0x334>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_GPIO_Init+0x334>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004218:	4a27      	ldr	r2, [pc, #156]	; (80042b8 <HAL_GPIO_Init+0x334>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <HAL_GPIO_Init+0x334>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004242:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_GPIO_Init+0x334>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <HAL_GPIO_Init+0x334>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <HAL_GPIO_Init+0x334>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3301      	adds	r3, #1
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	f67f ae90 	bls.w	8003fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	40013800 	.word	0x40013800
 8004298:	40020000 	.word	0x40020000
 800429c:	40020400 	.word	0x40020400
 80042a0:	40020800 	.word	0x40020800
 80042a4:	40020c00 	.word	0x40020c00
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40021400 	.word	0x40021400
 80042b0:	40021800 	.word	0x40021800
 80042b4:	40021c00 	.word	0x40021c00
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d8:	e003      	b.n	80042e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	041a      	lsls	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	619a      	str	r2, [r3, #24]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af02      	add	r7, sp, #8
 80042f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e059      	b.n	80043b4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f00b fa42 	bl	800f7a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2203      	movs	r2, #3
 8004324:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432e:	d102      	bne.n	8004336 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f005 fa97 	bl	800986e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7c1a      	ldrb	r2, [r3, #16]
 8004348:	f88d 2000 	strb.w	r2, [sp]
 800434c:	3304      	adds	r3, #4
 800434e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004350:	f005 fa18 	bl	8009784 <USB_CoreInit>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e026      	b.n	80043b4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f005 fa8f 	bl	8009890 <USB_SetCurrentMode>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e017      	b.n	80043b4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7c1a      	ldrb	r2, [r3, #16]
 800438c:	f88d 2000 	strb.w	r2, [sp]
 8004390:	3304      	adds	r3, #4
 8004392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004394:	f005 fc32 	bl	8009bfc <USB_HostInit>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e004      	b.n	80043b4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b08b      	sub	sp, #44	; 0x2c
 80043c0:	af04      	add	r7, sp, #16
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	4608      	mov	r0, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	70fb      	strb	r3, [r7, #3]
 80043ce:	460b      	mov	r3, r1
 80043d0:	70bb      	strb	r3, [r7, #2]
 80043d2:	4613      	mov	r3, r2
 80043d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80043d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80043d8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_HCD_HC_Init+0x2c>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e09d      	b.n	8004524 <HAL_HCD_HC_Init+0x168>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3319      	adds	r3, #25
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3314      	adds	r3, #20
 8004414:	787a      	ldrb	r2, [r7, #1]
 8004416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	3315      	adds	r3, #21
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3326      	adds	r3, #38	; 0x26
 800443c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004440:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	78bb      	ldrb	r3, [r7, #2]
 8004446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444a:	b2d8      	uxtb	r0, r3
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3316      	adds	r3, #22
 800445a:	4602      	mov	r2, r0
 800445c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fbc8 	bl	8004bf8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004468:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800446c:	2b00      	cmp	r3, #0
 800446e:	da0a      	bge.n	8004486 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	3317      	adds	r3, #23
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e009      	b.n	800449a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3317      	adds	r3, #23
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f005 fd10 	bl	8009ec4 <USB_GetHostSpeed>
 80044a4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80044a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d10b      	bne.n	80044c6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80044ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <HAL_HCD_HC_Init+0x10a>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2bbc      	cmp	r3, #188	; 0xbc
 80044c0:	d901      	bls.n	80044c6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80044c2:	23bc      	movs	r3, #188	; 0xbc
 80044c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3318      	adds	r3, #24
 80044d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80044da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	b298      	uxth	r0, r3
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3328      	adds	r3, #40	; 0x28
 80044f0:	4602      	mov	r2, r0
 80044f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	787c      	ldrb	r4, [r7, #1]
 80044fe:	78ba      	ldrb	r2, [r7, #2]
 8004500:	78f9      	ldrb	r1, [r7, #3]
 8004502:	9302      	str	r3, [sp, #8]
 8004504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	4623      	mov	r3, r4
 8004512:	f005 fcff 	bl	8009f14 <USB_HC_Init>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd90      	pop	{r4, r7, pc}

0800452c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_HCD_HC_Halt+0x1e>
 8004546:	2302      	movs	r3, #2
 8004548:	e00f      	b.n	800456a <HAL_HCD_HC_Halt+0x3e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f006 f891 	bl	800a682 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	70fb      	strb	r3, [r7, #3]
 8004586:	460b      	mov	r3, r1
 8004588:	70bb      	strb	r3, [r7, #2]
 800458a:	4613      	mov	r3, r2
 800458c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3317      	adds	r3, #23
 800459e:	78ba      	ldrb	r2, [r7, #2]
 80045a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3326      	adds	r3, #38	; 0x26
 80045b2:	787a      	ldrb	r2, [r7, #1]
 80045b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80045b6:	7c3b      	ldrb	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d114      	bne.n	80045e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	332a      	adds	r3, #42	; 0x2a
 80045cc:	2203      	movs	r2, #3
 80045ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3319      	adds	r3, #25
 80045e0:	7f3a      	ldrb	r2, [r7, #28]
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e009      	b.n	80045fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	332a      	adds	r3, #42	; 0x2a
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80045fa:	787b      	ldrb	r3, [r7, #1]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	f200 8102 	bhi.w	8004806 <HAL_HCD_HC_SubmitRequest+0x292>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004619 	.word	0x08004619
 800460c:	080047f1 	.word	0x080047f1
 8004610:	080046dd 	.word	0x080046dd
 8004614:	08004767 	.word	0x08004767
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004618:	7c3b      	ldrb	r3, [r7, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	f040 80f5 	bne.w	800480a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004620:	78bb      	ldrb	r3, [r7, #2]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d12d      	bne.n	8004682 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004626:	8b3b      	ldrh	r3, [r7, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	333d      	adds	r3, #61	; 0x3d
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	333d      	adds	r3, #61	; 0x3d
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	332a      	adds	r3, #42	; 0x2a
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800466a:	e0ce      	b.n	800480a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	332a      	adds	r3, #42	; 0x2a
 800467c:	2202      	movs	r2, #2
 800467e:	701a      	strb	r2, [r3, #0]
      break;
 8004680:	e0c3      	b.n	800480a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	331a      	adds	r3, #26
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 80b8 	bne.w	800480a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	333c      	adds	r3, #60	; 0x3c
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	332a      	adds	r3, #42	; 0x2a
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
      break;
 80046c4:	e0a1      	b.n	800480a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	332a      	adds	r3, #42	; 0x2a
 80046d6:	2202      	movs	r2, #2
 80046d8:	701a      	strb	r2, [r3, #0]
      break;
 80046da:	e096      	b.n	800480a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80046dc:	78bb      	ldrb	r3, [r7, #2]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d120      	bne.n	8004724 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	333d      	adds	r3, #61	; 0x3d
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	332a      	adds	r3, #42	; 0x2a
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800470c:	e07e      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	332a      	adds	r3, #42	; 0x2a
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
      break;
 8004722:	e073      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	333c      	adds	r3, #60	; 0x3c
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	332a      	adds	r3, #42	; 0x2a
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
      break;
 800474e:	e05d      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	332a      	adds	r3, #42	; 0x2a
 8004760:	2202      	movs	r2, #2
 8004762:	701a      	strb	r2, [r3, #0]
      break;
 8004764:	e052      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004766:	78bb      	ldrb	r3, [r7, #2]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d120      	bne.n	80047ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	333d      	adds	r3, #61	; 0x3d
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	332a      	adds	r3, #42	; 0x2a
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004796:	e039      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	332a      	adds	r3, #42	; 0x2a
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
      break;
 80047ac:	e02e      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	333c      	adds	r3, #60	; 0x3c
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	332a      	adds	r3, #42	; 0x2a
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
      break;
 80047d8:	e018      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	332a      	adds	r3, #42	; 0x2a
 80047ea:	2202      	movs	r2, #2
 80047ec:	701a      	strb	r2, [r3, #0]
      break;
 80047ee:	e00d      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	332a      	adds	r3, #42	; 0x2a
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
      break;
 8004804:	e002      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800480a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	332c      	adds	r3, #44	; 0x2c
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	8b39      	ldrh	r1, [r7, #24]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4403      	add	r3, r0
 8004830:	3334      	adds	r3, #52	; 0x34
 8004832:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	334c      	adds	r3, #76	; 0x4c
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3338      	adds	r3, #56	; 0x38
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3315      	adds	r3, #21
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	334d      	adds	r3, #77	; 0x4d
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	3310      	adds	r3, #16
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	1d19      	adds	r1, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	799b      	ldrb	r3, [r3, #6]
 800489e:	461a      	mov	r2, r3
 80048a0:	f005 fc64 	bl	800a16c <USB_HC_StartXfer>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop

080048b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f005 f958 	bl	8009b7c <USB_GetMode>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f040 80fb 	bne.w	8004aca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f005 f91b 	bl	8009b14 <USB_ReadInterrupts>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80f1 	beq.w	8004ac8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 f912 	bl	8009b14 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fa:	d104      	bne.n	8004906 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f005 f902 	bl	8009b14 <USB_ReadInterrupts>
 8004910:	4603      	mov	r3, r0
 8004912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491a:	d104      	bne.n	8004926 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f005 f8f2 	bl	8009b14 <USB_ReadInterrupts>
 8004930:	4603      	mov	r3, r0
 8004932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493a:	d104      	bne.n	8004946 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f005 f8e2 	bl	8009b14 <USB_ReadInterrupts>
 8004950:	4603      	mov	r3, r0
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d103      	bne.n	8004962 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2202      	movs	r2, #2
 8004960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f005 f8d4 	bl	8009b14 <USB_ReadInterrupts>
 800496c:	4603      	mov	r3, r0
 800496e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004976:	d120      	bne.n	80049ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004980:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d113      	bne.n	80049ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004992:	2110      	movs	r1, #16
 8004994:	6938      	ldr	r0, [r7, #16]
 8004996:	f004 ffc7 	bl	8009928 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800499a:	6938      	ldr	r0, [r7, #16]
 800499c:	f004 fff6 	bl	800998c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	7a5b      	ldrb	r3, [r3, #9]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d105      	bne.n	80049b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f005 f9e8 	bl	8009d84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f00a ff73 	bl	800f8a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f005 f8a8 	bl	8009b14 <USB_ReadInterrupts>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ce:	d102      	bne.n	80049d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f001 fd33 	bl	800643c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f005 f89a 	bl	8009b14 <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d106      	bne.n	80049f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f00a ff3c 	bl	800f868 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2208      	movs	r2, #8
 80049f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f005 f889 	bl	8009b14 <USB_ReadInterrupts>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a0c:	d139      	bne.n	8004a82 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 fe24 	bl	800a660 <USB_HC_ReadInterrupt>
 8004a18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e025      	b.n	8004a6c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d018      	beq.n	8004a66 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d106      	bne.n	8004a5a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f905 	bl	8004c62 <HCD_HC_IN_IRQHandler>
 8004a58:	e005      	b.n	8004a66 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 ff67 	bl	8005934 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	795b      	ldrb	r3, [r3, #5]
 8004a70:	461a      	mov	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d3d3      	bcc.n	8004a20 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 f844 	bl	8009b14 <USB_ReadInterrupts>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d101      	bne.n	8004a9a <HAL_HCD_IRQHandler+0x1ea>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_HCD_IRQHandler+0x1ec>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d014      	beq.n	8004aca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0210 	bic.w	r2, r2, #16
 8004aae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f001 fbe4 	bl	800627e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0210 	orr.w	r2, r2, #16
 8004ac4:	619a      	str	r2, [r3, #24]
 8004ac6:	e000      	b.n	8004aca <HAL_HCD_IRQHandler+0x21a>
      return;
 8004ac8:	bf00      	nop
    }
  }
}
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_HCD_Start+0x16>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e013      	b.n	8004b0e <HAL_HCD_Start+0x3e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f005 f9ac 	bl	8009e52 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 fea4 	bl	800984c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_HCD_Stop+0x16>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e00d      	b.n	8004b48 <HAL_HCD_Stop+0x32>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f005 feff 	bl	800a93c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f005 f94e 	bl	8009dfe <USB_ResetPort>
 8004b62:	4603      	mov	r3, r0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	334c      	adds	r3, #76	; 0x4c
 8004b88:	781b      	ldrb	r3, [r3, #0]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3338      	adds	r3, #56	; 0x38
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f005 f990 	bl	8009ef2 <USB_GetCurrentFrame>
 8004bd2:	4603      	mov	r3, r0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f005 f96b 	bl	8009ec4 <USB_GetHostSpeed>
 8004bee:	4603      	mov	r3, r0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	331a      	adds	r3, #26
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	331b      	adds	r3, #27
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004c2c:	78fa      	ldrb	r2, [r7, #3]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3325      	adds	r3, #37	; 0x25
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f004 ff5a 	bl	8009b3a <USB_ReadChInterrupts>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11a      	bne.n	8004cc6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	334d      	adds	r3, #77	; 0x4d
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f005 fcdf 	bl	800a682 <USB_HC_Halt>
 8004cc4:	e09e      	b.n	8004e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 ff33 	bl	8009b3a <USB_ReadChInterrupts>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d11b      	bne.n	8004d18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	461a      	mov	r2, r3
 8004cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	334d      	adds	r3, #77	; 0x4d
 8004d04:	2208      	movs	r2, #8
 8004d06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f005 fcb6 	bl	800a682 <USB_HC_Halt>
 8004d16:	e075      	b.n	8004e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f004 ff0a 	bl	8009b3a <USB_ReadChInterrupts>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d11a      	bne.n	8004d66 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2308      	movs	r3, #8
 8004d40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	334d      	adds	r3, #77	; 0x4d
 8004d52:	2206      	movs	r2, #6
 8004d54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 fc8f 	bl	800a682 <USB_HC_Halt>
 8004d64:	e04e      	b.n	8004e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f004 fee3 	bl	8009b3a <USB_ReadChInterrupts>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d11b      	bne.n	8004db8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	334d      	adds	r3, #77	; 0x4d
 8004da4:	2209      	movs	r2, #9
 8004da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f005 fc66 	bl	800a682 <USB_HC_Halt>
 8004db6:	e025      	b.n	8004e04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 feba 	bl	8009b3a <USB_ReadChInterrupts>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d119      	bne.n	8004e04 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	334d      	adds	r3, #77	; 0x4d
 8004df2:	2207      	movs	r2, #7
 8004df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f005 fc3f 	bl	800a682 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 fe94 	bl	8009b3a <USB_ReadChInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1c:	d112      	bne.n	8004e44 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f005 fc2b 	bl	800a682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e3e:	6093      	str	r3, [r2, #8]
 8004e40:	f000 bd75 	b.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f004 fe74 	bl	8009b3a <USB_ReadChInterrupts>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	f040 8128 	bne.w	80050ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	331b      	adds	r3, #27
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d119      	bne.n	8004eba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	331b      	adds	r3, #27
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	799b      	ldrb	r3, [r3, #6]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01b      	beq.n	8004efa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3330      	adds	r3, #48	; 0x30
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	1ac9      	subs	r1, r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4403      	add	r3, r0
 8004ef6:	3338      	adds	r3, #56	; 0x38
 8004ef8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	334d      	adds	r3, #77	; 0x4d
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3344      	adds	r3, #68	; 0x44
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2301      	movs	r3, #1
 8004f32:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3326      	adds	r3, #38	; 0x26
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3326      	adds	r3, #38	; 0x26
 8004f5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d110      	bne.n	8004f82 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f005 fb8a 	bl	800a682 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	6093      	str	r3, [r2, #8]
 8004f80:	e03d      	b.n	8004ffe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3326      	adds	r3, #38	; 0x26
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d00a      	beq.n	8004fae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3326      	adds	r3, #38	; 0x26
 8004fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d127      	bne.n	8004ffe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fcc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	334c      	adds	r3, #76	; 0x4c
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	334c      	adds	r3, #76	; 0x4c
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f00a fc5f 	bl	800f8bc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	799b      	ldrb	r3, [r3, #6]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d13b      	bne.n	800507e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3338      	adds	r3, #56	; 0x38
 8005016:	6819      	ldr	r1, [r3, #0]
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4403      	add	r3, r0
 8005026:	3328      	adds	r3, #40	; 0x28
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	440b      	add	r3, r1
 800502c:	1e59      	subs	r1, r3, #1
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4403      	add	r3, r0
 800503c:	3328      	adds	r3, #40	; 0x28
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	fbb1 f3f3 	udiv	r3, r1, r3
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8470 	beq.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	333c      	adds	r3, #60	; 0x3c
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	f083 0301 	eor.w	r3, r3, #1
 8005066:	b2d8      	uxtb	r0, r3
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	333c      	adds	r3, #60	; 0x3c
 8005076:	4602      	mov	r2, r0
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	f000 bc58 	b.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	333c      	adds	r3, #60	; 0x3c
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	f083 0301 	eor.w	r3, r3, #1
 8005096:	b2d8      	uxtb	r0, r3
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	333c      	adds	r3, #60	; 0x3c
 80050a6:	4602      	mov	r2, r0
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	f000 bc40 	b.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 fd3f 	bl	8009b3a <USB_ReadChInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d131      	bne.n	800512a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	461a      	mov	r2, r3
 80050d4:	2320      	movs	r3, #32
 80050d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	331a      	adds	r3, #26
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 841f 	bne.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	331b      	adds	r3, #27
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	334d      	adds	r3, #77	; 0x4d
 8005114:	2203      	movs	r2, #3
 8005116:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f005 faae 	bl	800a682 <USB_HC_Halt>
 8005126:	f000 bc02 	b.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f004 fd01 	bl	8009b3a <USB_ReadChInterrupts>
 8005138:	4603      	mov	r3, r0
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	f040 8305 	bne.w	800574e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	461a      	mov	r2, r3
 8005152:	2302      	movs	r3, #2
 8005154:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334d      	adds	r3, #77	; 0x4d
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d114      	bne.n	8005196 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800516c:	78fa      	ldrb	r2, [r7, #3]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	334d      	adds	r3, #77	; 0x4d
 800517c:	2202      	movs	r2, #2
 800517e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	334c      	adds	r3, #76	; 0x4c
 8005190:	2201      	movs	r2, #1
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e2cc      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	334d      	adds	r3, #77	; 0x4d
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d114      	bne.n	80051d6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	334d      	adds	r3, #77	; 0x4d
 80051bc:	2202      	movs	r2, #2
 80051be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	334c      	adds	r3, #76	; 0x4c
 80051d0:	2205      	movs	r2, #5
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e2ac      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	334d      	adds	r3, #77	; 0x4d
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b07      	cmp	r3, #7
 80051ea:	d00b      	beq.n	8005204 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	334d      	adds	r3, #77	; 0x4d
 80051fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051fe:	2b09      	cmp	r3, #9
 8005200:	f040 80a6 	bne.w	8005350 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	334d      	adds	r3, #77	; 0x4d
 8005214:	2202      	movs	r2, #2
 8005216:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	3344      	adds	r3, #68	; 0x44
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4403      	add	r3, r0
 8005238:	3344      	adds	r3, #68	; 0x44
 800523a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3344      	adds	r3, #68	; 0x44
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d943      	bls.n	80052da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3344      	adds	r3, #68	; 0x44
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	331a      	adds	r3, #26
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d123      	bne.n	80052c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	331b      	adds	r3, #27
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	331c      	adds	r3, #28
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	334c      	adds	r3, #76	; 0x4c
 80052d4:	2204      	movs	r2, #4
 80052d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052d8:	e229      	b.n	800572e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	334c      	adds	r3, #76	; 0x4c
 80052ea:	2202      	movs	r2, #2
 80052ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	3326      	adds	r3, #38	; 0x26
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3326      	adds	r3, #38	; 0x26
 8005314:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005316:	2b02      	cmp	r3, #2
 8005318:	f040 8209 	bne.w	800572e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005332:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800533a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	461a      	mov	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800534e:	e1ee      	b.n	800572e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	334d      	adds	r3, #77	; 0x4d
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b05      	cmp	r3, #5
 8005364:	f040 80c8 	bne.w	80054f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	334d      	adds	r3, #77	; 0x4d
 8005378:	2202      	movs	r2, #2
 800537a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	331b      	adds	r3, #27
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	f040 81ce 	bne.w	8005730 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3326      	adds	r3, #38	; 0x26
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d16b      	bne.n	8005482 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3348      	adds	r3, #72	; 0x48
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1c59      	adds	r1, r3, #1
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4403      	add	r3, r0
 80053ca:	3348      	adds	r3, #72	; 0x48
 80053cc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3348      	adds	r3, #72	; 0x48
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d943      	bls.n	800546c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80053e4:	78fa      	ldrb	r2, [r7, #3]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	3348      	adds	r3, #72	; 0x48
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	331b      	adds	r3, #27
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3344      	adds	r3, #68	; 0x44
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d809      	bhi.n	8005436 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	331c      	adds	r3, #28
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	440a      	add	r2, r1
 800544c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005454:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	334c      	adds	r3, #76	; 0x4c
 8005466:	2204      	movs	r2, #4
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e014      	b.n	8005496 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	334c      	adds	r3, #76	; 0x4c
 800547c:	2202      	movs	r2, #2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	e009      	b.n	8005496 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	334c      	adds	r3, #76	; 0x4c
 8005492:	2202      	movs	r2, #2
 8005494:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3326      	adds	r3, #38	; 0x26
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3326      	adds	r3, #38	; 0x26
 80054bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054be:	2b02      	cmp	r3, #2
 80054c0:	f040 8136 	bne.w	8005730 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	461a      	mov	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e11b      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	334d      	adds	r3, #77	; 0x4d
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b03      	cmp	r3, #3
 800550c:	f040 8081 	bne.w	8005612 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334d      	adds	r3, #77	; 0x4d
 8005520:	2202      	movs	r2, #2
 8005522:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	331b      	adds	r3, #27
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	f040 80fa 	bne.w	8005730 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	334c      	adds	r3, #76	; 0x4c
 800554c:	2202      	movs	r2, #2
 800554e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	440a      	add	r2, r1
 8005566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	440a      	add	r2, r1
 8005586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055aa:	f023 0320 	bic.w	r3, r3, #32
 80055ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3326      	adds	r3, #38	; 0x26
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	3326      	adds	r3, #38	; 0x26
 80055d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055d8:	2b02      	cmp	r3, #2
 80055da:	f040 80a9 	bne.w	8005730 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	e08e      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	334d      	adds	r3, #77	; 0x4d
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b04      	cmp	r3, #4
 8005626:	d143      	bne.n	80056b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005628:	78fa      	ldrb	r2, [r7, #3]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	334d      	adds	r3, #77	; 0x4d
 8005638:	2202      	movs	r2, #2
 800563a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	334c      	adds	r3, #76	; 0x4c
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3326      	adds	r3, #38	; 0x26
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3326      	adds	r3, #38	; 0x26
 8005676:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005678:	2b02      	cmp	r3, #2
 800567a:	d159      	bne.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005692:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800569a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a8:	461a      	mov	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e03f      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334d      	adds	r3, #77	; 0x4d
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d126      	bne.n	8005714 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	334d      	adds	r3, #77	; 0x4d
 80056d6:	2202      	movs	r2, #2
 80056d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	3344      	adds	r3, #68	; 0x44
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4403      	add	r3, r0
 80056fa:	3344      	adds	r3, #68	; 0x44
 80056fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	334c      	adds	r3, #76	; 0x4c
 800570e:	2204      	movs	r2, #4
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e00d      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	334d      	adds	r3, #77	; 0x4d
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b02      	cmp	r3, #2
 8005728:	f000 8100 	beq.w	800592c <HCD_HC_IN_IRQHandler+0xcca>
 800572c:	e000      	b.n	8005730 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800572e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	334c      	adds	r3, #76	; 0x4c
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f00a f8b8 	bl	800f8bc <HAL_HCD_HC_NotifyURBChange_Callback>
 800574c:	e0ef      	b.n	800592e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f004 f9ef 	bl	8009b3a <USB_ReadChInterrupts>
 800575c:	4603      	mov	r3, r0
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d12f      	bne.n	80057c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	461a      	mov	r2, r3
 8005774:	2340      	movs	r3, #64	; 0x40
 8005776:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	334d      	adds	r3, #77	; 0x4d
 8005788:	2205      	movs	r2, #5
 800578a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	331a      	adds	r3, #26
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3344      	adds	r3, #68	; 0x44
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f004 ff5f 	bl	800a682 <USB_HC_Halt>
 80057c4:	e0b3      	b.n	800592e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f004 f9b3 	bl	8009b3a <USB_ReadChInterrupts>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b10      	cmp	r3, #16
 80057dc:	f040 80a7 	bne.w	800592e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3326      	adds	r3, #38	; 0x26
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d11b      	bne.n	800582e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3344      	adds	r3, #68	; 0x44
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	334d      	adds	r3, #77	; 0x4d
 800581a:	2204      	movs	r2, #4
 800581c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f004 ff2b 	bl	800a682 <USB_HC_Halt>
 800582c:	e03f      	b.n	80058ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3326      	adds	r3, #38	; 0x26
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4613      	mov	r3, r2
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3326      	adds	r3, #38	; 0x26
 8005854:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005856:	2b02      	cmp	r3, #2
 8005858:	d129      	bne.n	80058ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	3344      	adds	r3, #68	; 0x44
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	799b      	ldrb	r3, [r3, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HCD_HC_IN_IRQHandler+0xc2a>
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	331b      	adds	r3, #27
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d110      	bne.n	80058ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	334d      	adds	r3, #77	; 0x4d
 800589c:	2204      	movs	r2, #4
 800589e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f004 feea 	bl	800a682 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	331b      	adds	r3, #27
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d129      	bne.n	8005918 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	331b      	adds	r3, #27
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	78fa      	ldrb	r2, [r7, #3]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	440a      	add	r2, r1
 800590e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005912:	f043 0320 	orr.w	r3, r3, #32
 8005916:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	461a      	mov	r2, r3
 8005926:	2310      	movs	r3, #16
 8005928:	6093      	str	r3, [r2, #8]
 800592a:	e000      	b.n	800592e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800592c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f004 f8f1 	bl	8009b3a <USB_ReadChInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d11b      	bne.n	800599a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	461a      	mov	r2, r3
 8005970:	2304      	movs	r3, #4
 8005972:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	334d      	adds	r3, #77	; 0x4d
 8005984:	2207      	movs	r2, #7
 8005986:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f004 fe76 	bl	800a682 <USB_HC_Halt>
 8005996:	f000 bc6f 	b.w	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 f8c9 	bl	8009b3a <USB_ReadChInterrupts>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	f040 8082 	bne.w	8005ab8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c0:	461a      	mov	r2, r3
 80059c2:	2320      	movs	r3, #32
 80059c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3319      	adds	r3, #25
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d124      	bne.n	8005a26 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	3319      	adds	r3, #25
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	334c      	adds	r3, #76	; 0x4c
 8005a00:	2202      	movs	r2, #2
 8005a02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	334d      	adds	r3, #77	; 0x4d
 8005a14:	2203      	movs	r2, #3
 8005a16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f004 fe2e 	bl	800a682 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	331a      	adds	r3, #26
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f040 841d 	bne.w	8006278 <HCD_HC_OUT_IRQHandler+0x944>
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	331b      	adds	r3, #27
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 8411 	bne.w	8006278 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005a56:	78fa      	ldrb	r2, [r7, #3]
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	3326      	adds	r3, #38	; 0x26
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d009      	beq.n	8005a80 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	331b      	adds	r3, #27
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a80:	78fa      	ldrb	r2, [r7, #3]
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	334d      	adds	r3, #77	; 0x4d
 8005a90:	2203      	movs	r2, #3
 8005a92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f004 fdf0 	bl	800a682 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	3344      	adds	r3, #68	; 0x44
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e3df      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f004 f83a 	bl	8009b3a <USB_ReadChInterrupts>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad0:	d111      	bne.n	8005af6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ae4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f004 fdc7 	bl	800a682 <USB_HC_Halt>
 8005af4:	e3c0      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f004 f81b 	bl	8009b3a <USB_ReadChInterrupts>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d168      	bne.n	8005be0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3344      	adds	r3, #68	; 0x44
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f004 f805 	bl	8009b3a <USB_ReadChInterrupts>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d112      	bne.n	8005b60 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	3319      	adds	r3, #25
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	331b      	adds	r3, #27
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d019      	beq.n	8005baa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	331b      	adds	r3, #27
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2301      	movs	r3, #1
 8005bba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	334d      	adds	r3, #77	; 0x4d
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 fd52 	bl	800a682 <USB_HC_Halt>
 8005bde:	e34b      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f003 ffa6 	bl	8009b3a <USB_ReadChInterrupts>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d139      	bne.n	8005c6c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005bf8:	78fa      	ldrb	r2, [r7, #3]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	334d      	adds	r3, #77	; 0x4d
 8005c08:	2205      	movs	r2, #5
 8005c0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	331a      	adds	r3, #26
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3319      	adds	r3, #25
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	3344      	adds	r3, #68	; 0x44
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f004 fd15 	bl	800a682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c64:	461a      	mov	r2, r3
 8005c66:	2340      	movs	r3, #64	; 0x40
 8005c68:	6093      	str	r3, [r2, #8]
 8005c6a:	e305      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	78fa      	ldrb	r2, [r7, #3]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f003 ff60 	bl	8009b3a <USB_ReadChInterrupts>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d11a      	bne.n	8005cba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c90:	461a      	mov	r2, r3
 8005c92:	2308      	movs	r3, #8
 8005c94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	334d      	adds	r3, #77	; 0x4d
 8005ca6:	2206      	movs	r2, #6
 8005ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f004 fce5 	bl	800a682 <USB_HC_Halt>
 8005cb8:	e2de      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	78fa      	ldrb	r2, [r7, #3]
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f003 ff39 	bl	8009b3a <USB_ReadChInterrupts>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d144      	bne.n	8005d5c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3344      	adds	r3, #68	; 0x44
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	334d      	adds	r3, #77	; 0x4d
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3319      	adds	r3, #25
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d114      	bne.n	8005d3a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3318      	adds	r3, #24
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3319      	adds	r3, #25
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f004 fc9d 	bl	800a682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	461a      	mov	r2, r3
 8005d56:	2310      	movs	r3, #16
 8005d58:	6093      	str	r3, [r2, #8]
 8005d5a:	e28d      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f003 fee8 	bl	8009b3a <USB_ReadChInterrupts>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b80      	cmp	r3, #128	; 0x80
 8005d72:	d169      	bne.n	8005e48 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	799b      	ldrb	r3, [r3, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d111      	bne.n	8005da0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	334d      	adds	r3, #77	; 0x4d
 8005d8c:	2207      	movs	r2, #7
 8005d8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	78fa      	ldrb	r2, [r7, #3]
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f004 fc72 	bl	800a682 <USB_HC_Halt>
 8005d9e:	e049      	b.n	8005e34 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3344      	adds	r3, #68	; 0x44
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4403      	add	r3, r0
 8005dc0:	3344      	adds	r3, #68	; 0x44
 8005dc2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	3344      	adds	r3, #68	; 0x44
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d922      	bls.n	8005e20 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	3344      	adds	r3, #68	; 0x44
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	334c      	adds	r3, #76	; 0x4c
 8005dfe:	2204      	movs	r2, #4
 8005e00:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005e02:	78fa      	ldrb	r2, [r7, #3]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	334c      	adds	r3, #76	; 0x4c
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f009 fd4f 	bl	800f8bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e1e:	e009      	b.n	8005e34 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e20:	78fa      	ldrb	r2, [r7, #3]
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	334c      	adds	r3, #76	; 0x4c
 8005e30:	2202      	movs	r2, #2
 8005e32:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e40:	461a      	mov	r2, r3
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	6093      	str	r3, [r2, #8]
 8005e46:	e217      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f003 fe72 	bl	8009b3a <USB_ReadChInterrupts>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e60:	d11b      	bne.n	8005e9a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	334d      	adds	r3, #77	; 0x4d
 8005e72:	2209      	movs	r2, #9
 8005e74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 fbff 	bl	800a682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e96:	6093      	str	r3, [r2, #8]
 8005e98:	e1ee      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f003 fe49 	bl	8009b3a <USB_ReadChInterrupts>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	f040 81df 	bne.w	8006272 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	334d      	adds	r3, #77	; 0x4d
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 8093 	bne.w	8006004 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ede:	78fa      	ldrb	r2, [r7, #3]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	334d      	adds	r3, #77	; 0x4d
 8005eee:	2202      	movs	r2, #2
 8005ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	334c      	adds	r3, #76	; 0x4c
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3326      	adds	r3, #38	; 0x26
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d00b      	beq.n	8005f34 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3326      	adds	r3, #38	; 0x26
 8005f2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	f040 8190 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	799b      	ldrb	r3, [r3, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d115      	bne.n	8005f68 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	333d      	adds	r3, #61	; 0x3d
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	78fa      	ldrb	r2, [r7, #3]
 8005f50:	f083 0301 	eor.w	r3, r3, #1
 8005f54:	b2d8      	uxtb	r0, r3
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	333d      	adds	r3, #61	; 0x3d
 8005f64:	4602      	mov	r2, r0
 8005f66:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	799b      	ldrb	r3, [r3, #6]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	f040 8171 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x920>
 8005f72:	78fa      	ldrb	r2, [r7, #3]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	3334      	adds	r3, #52	; 0x34
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8165 	beq.w	8006254 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3334      	adds	r3, #52	; 0x34
 8005f9a:	6819      	ldr	r1, [r3, #0]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4403      	add	r3, r0
 8005faa:	3328      	adds	r3, #40	; 0x28
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	440b      	add	r3, r1
 8005fb0:	1e59      	subs	r1, r3, #1
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4403      	add	r3, r0
 8005fc0:	3328      	adds	r3, #40	; 0x28
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fc8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 813f 	beq.w	8006254 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	333d      	adds	r3, #61	; 0x3d
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	f083 0301 	eor.w	r3, r3, #1
 8005fee:	b2d8      	uxtb	r0, r3
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	333d      	adds	r3, #61	; 0x3d
 8005ffe:	4602      	mov	r2, r0
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e127      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	334d      	adds	r3, #77	; 0x4d
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b03      	cmp	r3, #3
 8006018:	d120      	bne.n	800605c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	334d      	adds	r3, #77	; 0x4d
 800602a:	2202      	movs	r2, #2
 800602c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	331b      	adds	r3, #27
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 8107 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	334c      	adds	r3, #76	; 0x4c
 8006056:	2202      	movs	r2, #2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e0fb      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	334d      	adds	r3, #77	; 0x4d
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d13a      	bne.n	80060e8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006072:	78fa      	ldrb	r2, [r7, #3]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	334d      	adds	r3, #77	; 0x4d
 8006082:	2202      	movs	r2, #2
 8006084:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	334c      	adds	r3, #76	; 0x4c
 8006096:	2202      	movs	r2, #2
 8006098:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	331b      	adds	r3, #27
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	f040 80d1 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	331b      	adds	r3, #27
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	e0b5      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	334d      	adds	r3, #77	; 0x4d
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d114      	bne.n	8006128 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	334d      	adds	r3, #77	; 0x4d
 800610e:	2202      	movs	r2, #2
 8006110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006112:	78fa      	ldrb	r2, [r7, #3]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	334c      	adds	r3, #76	; 0x4c
 8006122:	2202      	movs	r2, #2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e095      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	334d      	adds	r3, #77	; 0x4d
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b06      	cmp	r3, #6
 800613c:	d114      	bne.n	8006168 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	334d      	adds	r3, #77	; 0x4d
 800614e:	2202      	movs	r2, #2
 8006150:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	334c      	adds	r3, #76	; 0x4c
 8006162:	2205      	movs	r2, #5
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e075      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	334d      	adds	r3, #77	; 0x4d
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b07      	cmp	r3, #7
 800617c:	d00a      	beq.n	8006194 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	334d      	adds	r3, #77	; 0x4d
 800618e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006190:	2b09      	cmp	r3, #9
 8006192:	d170      	bne.n	8006276 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006194:	78fa      	ldrb	r2, [r7, #3]
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	334d      	adds	r3, #77	; 0x4d
 80061a4:	2202      	movs	r2, #2
 80061a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80061a8:	78fa      	ldrb	r2, [r7, #3]
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	3344      	adds	r3, #68	; 0x44
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4403      	add	r3, r0
 80061c8:	3344      	adds	r3, #68	; 0x44
 80061ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	1a9b      	subs	r3, r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	3344      	adds	r3, #68	; 0x44
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d914      	bls.n	800620c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3344      	adds	r3, #68	; 0x44
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	334c      	adds	r3, #76	; 0x4c
 8006206:	2204      	movs	r2, #4
 8006208:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800620a:	e022      	b.n	8006252 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	334c      	adds	r3, #76	; 0x4c
 800621c:	2202      	movs	r2, #2
 800621e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006236:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	461a      	mov	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006252:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	334c      	adds	r3, #76	; 0x4c
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f009 fb26 	bl	800f8bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8006270:	e002      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006276:	bf00      	nop
  }
}
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b08a      	sub	sp, #40	; 0x28
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	0c5b      	lsrs	r3, r3, #17
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d004      	beq.n	80062c4 <HCD_RXQLVL_IRQHandler+0x46>
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b05      	cmp	r3, #5
 80062be:	f000 80b6 	beq.w	800642e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062c2:	e0b7      	b.n	8006434 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80b3 	beq.w	8006432 <HCD_RXQLVL_IRQHandler+0x1b4>
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4613      	mov	r3, r2
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	332c      	adds	r3, #44	; 0x2c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80a7 	beq.w	8006432 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4613      	mov	r3, r2
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	3338      	adds	r3, #56	; 0x38
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	18d1      	adds	r1, r2, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4613      	mov	r3, r2
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	1a9b      	subs	r3, r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4403      	add	r3, r0
 8006308:	3334      	adds	r3, #52	; 0x34
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4299      	cmp	r1, r3
 800630e:	f200 8083 	bhi.w	8006418 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4613      	mov	r3, r2
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	332c      	adds	r3, #44	; 0x2c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	b292      	uxth	r2, r2
 800632c:	4619      	mov	r1, r3
 800632e:	f003 fb99 	bl	8009a64 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4613      	mov	r3, r2
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	332c      	adds	r3, #44	; 0x2c
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	18d1      	adds	r1, r2, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	4613      	mov	r3, r2
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4403      	add	r3, r0
 8006356:	332c      	adds	r3, #44	; 0x2c
 8006358:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4613      	mov	r3, r2
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	3338      	adds	r3, #56	; 0x38
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	18d1      	adds	r1, r2, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4613      	mov	r3, r2
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4403      	add	r3, r0
 800637e:	3338      	adds	r3, #56	; 0x38
 8006380:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	0cdb      	lsrs	r3, r3, #19
 8006392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006396:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4613      	mov	r3, r2
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	3328      	adds	r3, #40	; 0x28
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d13f      	bne.n	8006432 <HCD_RXQLVL_IRQHandler+0x1b4>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d03c      	beq.n	8006432 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	461a      	mov	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4613      	mov	r3, r2
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	333c      	adds	r3, #60	; 0x3c
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f083 0301 	eor.w	r3, r3, #1
 8006400:	b2d8      	uxtb	r0, r3
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4613      	mov	r3, r2
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	333c      	adds	r3, #60	; 0x3c
 8006412:	4602      	mov	r2, r0
 8006414:	701a      	strb	r2, [r3, #0]
      break;
 8006416:	e00c      	b.n	8006432 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4613      	mov	r3, r2
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	334c      	adds	r3, #76	; 0x4c
 8006428:	2204      	movs	r2, #4
 800642a:	701a      	strb	r2, [r3, #0]
      break;
 800642c:	e001      	b.n	8006432 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800642e:	bf00      	nop
 8006430:	e000      	b.n	8006434 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006432:	bf00      	nop
  }
}
 8006434:	bf00      	nop
 8006436:	3728      	adds	r7, #40	; 0x28
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006468:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10b      	bne.n	800648c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b01      	cmp	r3, #1
 800647c:	d102      	bne.n	8006484 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f009 fa00 	bl	800f884 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f043 0302 	orr.w	r3, r3, #2
 800648a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b08      	cmp	r3, #8
 8006494:	d132      	bne.n	80064fc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f043 0308 	orr.w	r3, r3, #8
 800649c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d126      	bne.n	80064f6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7a5b      	ldrb	r3, [r3, #9]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d113      	bne.n	80064d8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80064b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ba:	d106      	bne.n	80064ca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2102      	movs	r1, #2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f003 fc5e 	bl	8009d84 <USB_InitFSLSPClkSel>
 80064c8:	e011      	b.n	80064ee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2101      	movs	r1, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f003 fc57 	bl	8009d84 <USB_InitFSLSPClkSel>
 80064d6:	e00a      	b.n	80064ee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	79db      	ldrb	r3, [r3, #7]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d106      	bne.n	80064ee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	461a      	mov	r2, r3
 80064e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80064ec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f009 f9f6 	bl	800f8e0 <HAL_HCD_PortEnabled_Callback>
 80064f4:	e002      	b.n	80064fc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f009 fa00 	bl	800f8fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b20      	cmp	r3, #32
 8006504:	d103      	bne.n	800650e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f043 0320 	orr.w	r3, r3, #32
 800650c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006514:	461a      	mov	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6013      	str	r3, [r2, #0]
}
 800651a:	bf00      	nop
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e12b      	b.n	800678e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fa fd26 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2224      	movs	r2, #36	; 0x24
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006588:	f001 fe2e 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 800658c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4a81      	ldr	r2, [pc, #516]	; (8006798 <HAL_I2C_Init+0x274>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d807      	bhi.n	80065a8 <HAL_I2C_Init+0x84>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a80      	ldr	r2, [pc, #512]	; (800679c <HAL_I2C_Init+0x278>)
 800659c:	4293      	cmp	r3, r2
 800659e:	bf94      	ite	ls
 80065a0:	2301      	movls	r3, #1
 80065a2:	2300      	movhi	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e006      	b.n	80065b6 <HAL_I2C_Init+0x92>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4a7d      	ldr	r2, [pc, #500]	; (80067a0 <HAL_I2C_Init+0x27c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bf94      	ite	ls
 80065b0:	2301      	movls	r3, #1
 80065b2:	2300      	movhi	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e0e7      	b.n	800678e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a78      	ldr	r2, [pc, #480]	; (80067a4 <HAL_I2C_Init+0x280>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	0c9b      	lsrs	r3, r3, #18
 80065c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	4a6a      	ldr	r2, [pc, #424]	; (8006798 <HAL_I2C_Init+0x274>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d802      	bhi.n	80065f8 <HAL_I2C_Init+0xd4>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3301      	adds	r3, #1
 80065f6:	e009      	b.n	800660c <HAL_I2C_Init+0xe8>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	4a69      	ldr	r2, [pc, #420]	; (80067a8 <HAL_I2C_Init+0x284>)
 8006604:	fba2 2303 	umull	r2, r3, r2, r3
 8006608:	099b      	lsrs	r3, r3, #6
 800660a:	3301      	adds	r3, #1
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	430b      	orrs	r3, r1
 8006612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800661e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	495c      	ldr	r1, [pc, #368]	; (8006798 <HAL_I2C_Init+0x274>)
 8006628:	428b      	cmp	r3, r1
 800662a:	d819      	bhi.n	8006660 <HAL_I2C_Init+0x13c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1e59      	subs	r1, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	fbb1 f3f3 	udiv	r3, r1, r3
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006640:	400b      	ands	r3, r1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_I2C_Init+0x138>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1e59      	subs	r1, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fbb1 f3f3 	udiv	r3, r1, r3
 8006654:	3301      	adds	r3, #1
 8006656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665a:	e051      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 800665c:	2304      	movs	r3, #4
 800665e:	e04f      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d111      	bne.n	800668c <HAL_I2C_Init+0x168>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1e58      	subs	r0, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	440b      	add	r3, r1
 8006676:	fbb0 f3f3 	udiv	r3, r0, r3
 800667a:	3301      	adds	r3, #1
 800667c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e012      	b.n	80066b2 <HAL_I2C_Init+0x18e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1e58      	subs	r0, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	0099      	lsls	r1, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a2:	3301      	adds	r3, #1
 80066a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_I2C_Init+0x196>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e022      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10e      	bne.n	80066e0 <HAL_I2C_Init+0x1bc>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1e58      	subs	r0, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6859      	ldr	r1, [r3, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	440b      	add	r3, r1
 80066d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	e00f      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1e58      	subs	r0, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	0099      	lsls	r1, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066f6:	3301      	adds	r3, #1
 80066f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	6809      	ldr	r1, [r1, #0]
 8006704:	4313      	orrs	r3, r2
 8006706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800672e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6911      	ldr	r1, [r2, #16]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68d2      	ldr	r2, [r2, #12]
 800673a:	4311      	orrs	r1, r2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	430b      	orrs	r3, r1
 8006742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	000186a0 	.word	0x000186a0
 800679c:	001e847f 	.word	0x001e847f
 80067a0:	003d08ff 	.word	0x003d08ff
 80067a4:	431bde83 	.word	0x431bde83
 80067a8:	10624dd3 	.word	0x10624dd3

080067ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	461a      	mov	r2, r3
 80067b8:	460b      	mov	r3, r1
 80067ba:	817b      	strh	r3, [r7, #10]
 80067bc:	4613      	mov	r3, r2
 80067be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067c0:	f7fb fa6c 	bl	8001c9c <HAL_GetTick>
 80067c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	f040 80e0 	bne.w	8006994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	2319      	movs	r3, #25
 80067da:	2201      	movs	r2, #1
 80067dc:	4970      	ldr	r1, [pc, #448]	; (80069a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 fdf4 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80067ea:	2302      	movs	r3, #2
 80067ec:	e0d3      	b.n	8006996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_I2C_Master_Transmit+0x50>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e0cc      	b.n	8006996 <HAL_I2C_Master_Transmit+0x1ea>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b01      	cmp	r3, #1
 8006810:	d007      	beq.n	8006822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2221      	movs	r2, #33	; 0x21
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2210      	movs	r2, #16
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	893a      	ldrh	r2, [r7, #8]
 8006852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4a50      	ldr	r2, [pc, #320]	; (80069a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006864:	8979      	ldrh	r1, [r7, #10]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	6a3a      	ldr	r2, [r7, #32]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fbc8 	bl	8007000 <I2C_MasterRequestWrite>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e08d      	b.n	8006996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006890:	e066      	b.n	8006960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	6a39      	ldr	r1, [r7, #32]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 feb2 	bl	8007600 <I2C_WaitOnTXEFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d107      	bne.n	80068ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e06b      	b.n	8006996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d11b      	bne.n	8006934 <HAL_I2C_Master_Transmit+0x188>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	6a39      	ldr	r1, [r7, #32]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fea9 	bl	8007690 <I2C_WaitOnBTFFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00d      	beq.n	8006960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b04      	cmp	r3, #4
 800694a:	d107      	bne.n	800695c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e01a      	b.n	8006996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d194      	bne.n	8006892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e000      	b.n	8006996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006994:	2302      	movs	r3, #2
  }
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	00100002 	.word	0x00100002
 80069a4:	ffff0000 	.word	0xffff0000

080069a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08c      	sub	sp, #48	; 0x30
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	461a      	mov	r2, r3
 80069b4:	460b      	mov	r3, r1
 80069b6:	817b      	strh	r3, [r7, #10]
 80069b8:	4613      	mov	r3, r2
 80069ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069bc:	f7fb f96e 	bl	8001c9c <HAL_GetTick>
 80069c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	f040 8217 	bne.w	8006dfe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	2319      	movs	r3, #25
 80069d6:	2201      	movs	r2, #1
 80069d8:	497c      	ldr	r1, [pc, #496]	; (8006bcc <HAL_I2C_Master_Receive+0x224>)
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fcf6 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
 80069e8:	e20a      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_I2C_Master_Receive+0x50>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e203      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d007      	beq.n	8006a1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2222      	movs	r2, #34	; 0x22
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2210      	movs	r2, #16
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	893a      	ldrh	r2, [r7, #8]
 8006a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a5c      	ldr	r2, [pc, #368]	; (8006bd0 <HAL_I2C_Master_Receive+0x228>)
 8006a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a60:	8979      	ldrh	r1, [r7, #10]
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fb4c 	bl	8007104 <I2C_MasterRequestRead>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e1c4      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d113      	bne.n	8006aa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	623b      	str	r3, [r7, #32]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	623b      	str	r3, [r7, #32]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e198      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d11b      	bne.n	8006ae6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e178      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d11b      	bne.n	8006b26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	e158      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b4c:	e144      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	f200 80f1 	bhi.w	8006d3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d123      	bne.n	8006ba8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fddb 	bl	8007720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e145      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ba6:	e117      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d14e      	bne.n	8006c4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	4906      	ldr	r1, [pc, #24]	; (8006bd4 <HAL_I2C_Master_Receive+0x22c>)
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fc06 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d008      	beq.n	8006bd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e11a      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
 8006bca:	bf00      	nop
 8006bcc:	00100002 	.word	0x00100002
 8006bd0:	ffff0000 	.word	0xffff0000
 8006bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c4c:	e0c4      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2200      	movs	r2, #0
 8006c56:	496c      	ldr	r1, [pc, #432]	; (8006e08 <HAL_I2C_Master_Receive+0x460>)
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fbb7 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0cb      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4955      	ldr	r1, [pc, #340]	; (8006e08 <HAL_I2C_Master_Receive+0x460>)
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fb89 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e09d      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d38:	e04e      	b.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fcee 	bl	8007720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e058      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d124      	bne.n	8006dd8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d107      	bne.n	8006da6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f47f aeb6 	bne.w	8006b4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e000      	b.n	8006e00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006dfe:	2302      	movs	r3, #2
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3728      	adds	r7, #40	; 0x28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	00010004 	.word	0x00010004

08006e0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	817b      	strh	r3, [r7, #10]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	813b      	strh	r3, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e26:	f7fa ff39 	bl	8001c9c <HAL_GetTick>
 8006e2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	f040 80d9 	bne.w	8006fec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	2319      	movs	r3, #25
 8006e40:	2201      	movs	r2, #1
 8006e42:	496d      	ldr	r1, [pc, #436]	; (8006ff8 <HAL_I2C_Mem_Write+0x1ec>)
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fac1 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	e0cc      	b.n	8006fee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_I2C_Mem_Write+0x56>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e0c5      	b.n	8006fee <HAL_I2C_Mem_Write+0x1e2>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d007      	beq.n	8006e88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2221      	movs	r2, #33	; 0x21
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2240      	movs	r2, #64	; 0x40
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4a4d      	ldr	r2, [pc, #308]	; (8006ffc <HAL_I2C_Mem_Write+0x1f0>)
 8006ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006eca:	88f8      	ldrh	r0, [r7, #6]
 8006ecc:	893a      	ldrh	r2, [r7, #8]
 8006ece:	8979      	ldrh	r1, [r7, #10]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	4603      	mov	r3, r0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f9e0 	bl	80072a0 <I2C_RequestMemoryWrite>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d052      	beq.n	8006f8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e081      	b.n	8006fee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fb86 	bl	8007600 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00d      	beq.n	8006f16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d107      	bne.n	8006f12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e06b      	b.n	8006fee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	781a      	ldrb	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d11b      	bne.n	8006f8c <HAL_I2C_Mem_Write+0x180>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1aa      	bne.n	8006eea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fb79 	bl	8007690 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d107      	bne.n	8006fbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e016      	b.n	8006fee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e000      	b.n	8006fee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006fec:	2302      	movs	r3, #2
  }
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	00100002 	.word	0x00100002
 8006ffc:	ffff0000 	.word	0xffff0000

08007000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	460b      	mov	r3, r1
 800700e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d006      	beq.n	800702a <I2C_MasterRequestWrite+0x2a>
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d003      	beq.n	800702a <I2C_MasterRequestWrite+0x2a>
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007028:	d108      	bne.n	800703c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e00b      	b.n	8007054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	2b12      	cmp	r3, #18
 8007042:	d107      	bne.n	8007054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f9b3 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d103      	bne.n	8007084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e035      	b.n	80070f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007090:	d108      	bne.n	80070a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007092:	897b      	ldrh	r3, [r7, #10]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070a0:	611a      	str	r2, [r3, #16]
 80070a2:	e01b      	b.n	80070dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070a4:	897b      	ldrh	r3, [r7, #10]
 80070a6:	11db      	asrs	r3, r3, #7
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0306 	and.w	r3, r3, #6
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f063 030f 	orn	r3, r3, #15
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	490e      	ldr	r1, [pc, #56]	; (80070fc <I2C_MasterRequestWrite+0xfc>)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f9fc 	bl	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e010      	b.n	80070f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4907      	ldr	r1, [pc, #28]	; (8007100 <I2C_MasterRequestWrite+0x100>)
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f9ec 	bl	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	00010008 	.word	0x00010008
 8007100:	00010002 	.word	0x00010002

08007104 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	460b      	mov	r3, r1
 8007112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007128:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b08      	cmp	r3, #8
 800712e:	d006      	beq.n	800713e <I2C_MasterRequestRead+0x3a>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d003      	beq.n	800713e <I2C_MasterRequestRead+0x3a>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800713c:	d108      	bne.n	8007150 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e00b      	b.n	8007168 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	2b11      	cmp	r3, #17
 8007156:	d107      	bne.n	8007168 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f929 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718e:	d103      	bne.n	8007198 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e079      	b.n	8007290 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a4:	d108      	bne.n	80071b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071a6:	897b      	ldrh	r3, [r7, #10]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	611a      	str	r2, [r3, #16]
 80071b6:	e05f      	b.n	8007278 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071b8:	897b      	ldrh	r3, [r7, #10]
 80071ba:	11db      	asrs	r3, r3, #7
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0306 	and.w	r3, r3, #6
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f063 030f 	orn	r3, r3, #15
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4930      	ldr	r1, [pc, #192]	; (8007298 <I2C_MasterRequestRead+0x194>)
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 f972 	bl	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e054      	b.n	8007290 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071e6:	897b      	ldrh	r3, [r7, #10]
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4929      	ldr	r1, [pc, #164]	; (800729c <I2C_MasterRequestRead+0x198>)
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f962 	bl	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e044      	b.n	8007290 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800722a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f8c7 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00d      	beq.n	8007260 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d103      	bne.n	800725c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e017      	b.n	8007290 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007260:	897b      	ldrh	r3, [r7, #10]
 8007262:	11db      	asrs	r3, r3, #7
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0306 	and.w	r3, r3, #6
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f063 030e 	orn	r3, r3, #14
 8007270:	b2da      	uxtb	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4907      	ldr	r1, [pc, #28]	; (800729c <I2C_MasterRequestRead+0x198>)
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f91e 	bl	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	00010008 	.word	0x00010008
 800729c:	00010002 	.word	0x00010002

080072a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	817b      	strh	r3, [r7, #10]
 80072b2:	460b      	mov	r3, r1
 80072b4:	813b      	strh	r3, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f878 	bl	80073cc <I2C_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00d      	beq.n	80072fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f0:	d103      	bne.n	80072fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e05f      	b.n	80073be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072fe:	897b      	ldrh	r3, [r7, #10]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800730c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	6a3a      	ldr	r2, [r7, #32]
 8007312:	492d      	ldr	r1, [pc, #180]	; (80073c8 <I2C_RequestMemoryWrite+0x128>)
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f8d3 	bl	80074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e04c      	b.n	80073be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800733a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733c:	6a39      	ldr	r1, [r7, #32]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f95e 	bl	8007600 <I2C_WaitOnTXEFlagUntilTimeout>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00d      	beq.n	8007366 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2b04      	cmp	r3, #4
 8007350:	d107      	bne.n	8007362 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e02b      	b.n	80073be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d105      	bne.n	8007378 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800736c:	893b      	ldrh	r3, [r7, #8]
 800736e:	b2da      	uxtb	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	611a      	str	r2, [r3, #16]
 8007376:	e021      	b.n	80073bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007378:	893b      	ldrh	r3, [r7, #8]
 800737a:	0a1b      	lsrs	r3, r3, #8
 800737c:	b29b      	uxth	r3, r3
 800737e:	b2da      	uxtb	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007388:	6a39      	ldr	r1, [r7, #32]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f938 	bl	8007600 <I2C_WaitOnTXEFlagUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	2b04      	cmp	r3, #4
 800739c:	d107      	bne.n	80073ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e005      	b.n	80073be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073b2:	893b      	ldrh	r3, [r7, #8]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	00010002 	.word	0x00010002

080073cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073dc:	e048      	b.n	8007470 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d044      	beq.n	8007470 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e6:	f7fa fc59 	bl	8001c9c <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d302      	bcc.n	80073fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d139      	bne.n	8007470 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d10d      	bne.n	8007422 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	43da      	mvns	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	e00c      	b.n	800743c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	43da      	mvns	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4013      	ands	r3, r2
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf0c      	ite	eq
 8007434:	2301      	moveq	r3, #1
 8007436:	2300      	movne	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	429a      	cmp	r2, r3
 8007440:	d116      	bne.n	8007470 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	f043 0220 	orr.w	r2, r3, #32
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e023      	b.n	80074b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b01      	cmp	r3, #1
 8007478:	d10d      	bne.n	8007496 <I2C_WaitOnFlagUntilTimeout+0xca>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	43da      	mvns	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4013      	ands	r3, r2
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	bf0c      	ite	eq
 800748c:	2301      	moveq	r3, #1
 800748e:	2300      	movne	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	e00c      	b.n	80074b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	43da      	mvns	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf0c      	ite	eq
 80074a8:	2301      	moveq	r3, #1
 80074aa:	2300      	movne	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d093      	beq.n	80073de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074ce:	e071      	b.n	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074de:	d123      	bne.n	8007528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	f043 0204 	orr.w	r2, r3, #4
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e067      	b.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d041      	beq.n	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007530:	f7fa fbb4 	bl	8001c9c <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d302      	bcc.n	8007546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d136      	bne.n	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10c      	bne.n	800756a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	43da      	mvns	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	e00b      	b.n	8007582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	43da      	mvns	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	4013      	ands	r3, r2
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d016      	beq.n	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	f043 0220 	orr.w	r2, r3, #32
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e021      	b.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	0c1b      	lsrs	r3, r3, #16
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10c      	bne.n	80075d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	43da      	mvns	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4013      	ands	r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf14      	ite	ne
 80075d0:	2301      	movne	r3, #1
 80075d2:	2300      	moveq	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	e00b      	b.n	80075f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	43da      	mvns	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f47f af6d 	bne.w	80074d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800760c:	e034      	b.n	8007678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f8e3 	bl	80077da <I2C_IsAcknowledgeFailed>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e034      	b.n	8007688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d028      	beq.n	8007678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007626:	f7fa fb39 	bl	8001c9c <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d11d      	bne.n	8007678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	d016      	beq.n	8007678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	f043 0220 	orr.w	r2, r3, #32
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e007      	b.n	8007688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d1c3      	bne.n	800760e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800769c:	e034      	b.n	8007708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f89b 	bl	80077da <I2C_IsAcknowledgeFailed>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e034      	b.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b4:	d028      	beq.n	8007708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b6:	f7fa faf1 	bl	8001c9c <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d302      	bcc.n	80076cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d11d      	bne.n	8007708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d016      	beq.n	8007708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f043 0220 	orr.w	r2, r3, #32
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e007      	b.n	8007718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b04      	cmp	r3, #4
 8007714:	d1c3      	bne.n	800769e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800772c:	e049      	b.n	80077c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b10      	cmp	r3, #16
 800773a:	d119      	bne.n	8007770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0210 	mvn.w	r2, #16
 8007744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e030      	b.n	80077d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007770:	f7fa fa94 	bl	8001c9c <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	429a      	cmp	r2, r3
 800777e:	d302      	bcc.n	8007786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11d      	bne.n	80077c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d016      	beq.n	80077c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f043 0220 	orr.w	r2, r3, #32
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e007      	b.n	80077d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d1ae      	bne.n	800772e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f0:	d11b      	bne.n	800782a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f043 0204 	orr.w	r2, r3, #4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e267      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d075      	beq.n	8007942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007856:	4b88      	ldr	r3, [pc, #544]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 030c 	and.w	r3, r3, #12
 800785e:	2b04      	cmp	r3, #4
 8007860:	d00c      	beq.n	800787c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007862:	4b85      	ldr	r3, [pc, #532]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800786a:	2b08      	cmp	r3, #8
 800786c:	d112      	bne.n	8007894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800786e:	4b82      	ldr	r3, [pc, #520]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800787a:	d10b      	bne.n	8007894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800787c:	4b7e      	ldr	r3, [pc, #504]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d05b      	beq.n	8007940 <HAL_RCC_OscConfig+0x108>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d157      	bne.n	8007940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e242      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789c:	d106      	bne.n	80078ac <HAL_RCC_OscConfig+0x74>
 800789e:	4b76      	ldr	r3, [pc, #472]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a75      	ldr	r2, [pc, #468]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e01d      	b.n	80078e8 <HAL_RCC_OscConfig+0xb0>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078b4:	d10c      	bne.n	80078d0 <HAL_RCC_OscConfig+0x98>
 80078b6:	4b70      	ldr	r3, [pc, #448]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a6f      	ldr	r2, [pc, #444]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	4b6d      	ldr	r3, [pc, #436]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6c      	ldr	r2, [pc, #432]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e00b      	b.n	80078e8 <HAL_RCC_OscConfig+0xb0>
 80078d0:	4b69      	ldr	r3, [pc, #420]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a68      	ldr	r2, [pc, #416]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	4b66      	ldr	r3, [pc, #408]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a65      	ldr	r2, [pc, #404]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80078e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d013      	beq.n	8007918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f0:	f7fa f9d4 	bl	8001c9c <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f8:	f7fa f9d0 	bl	8001c9c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b64      	cmp	r3, #100	; 0x64
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e207      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800790a:	4b5b      	ldr	r3, [pc, #364]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0xc0>
 8007916:	e014      	b.n	8007942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007918:	f7fa f9c0 	bl	8001c9c <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007920:	f7fa f9bc 	bl	8001c9c <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b64      	cmp	r3, #100	; 0x64
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e1f3      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007932:	4b51      	ldr	r3, [pc, #324]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f0      	bne.n	8007920 <HAL_RCC_OscConfig+0xe8>
 800793e:	e000      	b.n	8007942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d063      	beq.n	8007a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800794e:	4b4a      	ldr	r3, [pc, #296]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 030c 	and.w	r3, r3, #12
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800795a:	4b47      	ldr	r3, [pc, #284]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007962:	2b08      	cmp	r3, #8
 8007964:	d11c      	bne.n	80079a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007966:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d116      	bne.n	80079a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007972:	4b41      	ldr	r3, [pc, #260]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_RCC_OscConfig+0x152>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d001      	beq.n	800798a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e1c7      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798a:	4b3b      	ldr	r3, [pc, #236]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4937      	ldr	r1, [pc, #220]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800799e:	e03a      	b.n	8007a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d020      	beq.n	80079ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079a8:	4b34      	ldr	r3, [pc, #208]	; (8007a7c <HAL_RCC_OscConfig+0x244>)
 80079aa:	2201      	movs	r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ae:	f7fa f975 	bl	8001c9c <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079b6:	f7fa f971 	bl	8001c9c <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e1a8      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079c8:	4b2b      	ldr	r3, [pc, #172]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d4:	4b28      	ldr	r3, [pc, #160]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4925      	ldr	r1, [pc, #148]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	600b      	str	r3, [r1, #0]
 80079e8:	e015      	b.n	8007a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ea:	4b24      	ldr	r3, [pc, #144]	; (8007a7c <HAL_RCC_OscConfig+0x244>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7fa f954 	bl	8001c9c <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079f8:	f7fa f950 	bl	8001c9c <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e187      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a0a:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1f0      	bne.n	80079f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d036      	beq.n	8007a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d016      	beq.n	8007a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <HAL_RCC_OscConfig+0x248>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a30:	f7fa f934 	bl	8001c9c <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a38:	f7fa f930 	bl	8001c9c <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e167      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_RCC_OscConfig+0x240>)
 8007a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f0      	beq.n	8007a38 <HAL_RCC_OscConfig+0x200>
 8007a56:	e01b      	b.n	8007a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_RCC_OscConfig+0x248>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a5e:	f7fa f91d 	bl	8001c9c <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a64:	e00e      	b.n	8007a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a66:	f7fa f919 	bl	8001c9c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d907      	bls.n	8007a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e150      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	42470000 	.word	0x42470000
 8007a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a84:	4b88      	ldr	r3, [pc, #544]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ea      	bne.n	8007a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8097 	beq.w	8007bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aa2:	4b81      	ldr	r3, [pc, #516]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10f      	bne.n	8007ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	4b7d      	ldr	r3, [pc, #500]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	4a7c      	ldr	r2, [pc, #496]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6413      	str	r3, [r2, #64]	; 0x40
 8007abe:	4b7a      	ldr	r3, [pc, #488]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	60bb      	str	r3, [r7, #8]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aca:	2301      	movs	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ace:	4b77      	ldr	r3, [pc, #476]	; (8007cac <HAL_RCC_OscConfig+0x474>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d118      	bne.n	8007b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ada:	4b74      	ldr	r3, [pc, #464]	; (8007cac <HAL_RCC_OscConfig+0x474>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a73      	ldr	r2, [pc, #460]	; (8007cac <HAL_RCC_OscConfig+0x474>)
 8007ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ae6:	f7fa f8d9 	bl	8001c9c <HAL_GetTick>
 8007aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aec:	e008      	b.n	8007b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aee:	f7fa f8d5 	bl	8001c9c <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e10c      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b00:	4b6a      	ldr	r3, [pc, #424]	; (8007cac <HAL_RCC_OscConfig+0x474>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0f0      	beq.n	8007aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d106      	bne.n	8007b22 <HAL_RCC_OscConfig+0x2ea>
 8007b14:	4b64      	ldr	r3, [pc, #400]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b18:	4a63      	ldr	r2, [pc, #396]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b20:	e01c      	b.n	8007b5c <HAL_RCC_OscConfig+0x324>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	d10c      	bne.n	8007b44 <HAL_RCC_OscConfig+0x30c>
 8007b2a:	4b5f      	ldr	r3, [pc, #380]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	4a5e      	ldr	r2, [pc, #376]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b30:	f043 0304 	orr.w	r3, r3, #4
 8007b34:	6713      	str	r3, [r2, #112]	; 0x70
 8007b36:	4b5c      	ldr	r3, [pc, #368]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	4a5b      	ldr	r2, [pc, #364]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6713      	str	r3, [r2, #112]	; 0x70
 8007b42:	e00b      	b.n	8007b5c <HAL_RCC_OscConfig+0x324>
 8007b44:	4b58      	ldr	r3, [pc, #352]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a57      	ldr	r2, [pc, #348]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b4a:	f023 0301 	bic.w	r3, r3, #1
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b50:	4b55      	ldr	r3, [pc, #340]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	4a54      	ldr	r2, [pc, #336]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b56:	f023 0304 	bic.w	r3, r3, #4
 8007b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d015      	beq.n	8007b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b64:	f7fa f89a 	bl	8001c9c <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b6a:	e00a      	b.n	8007b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b6c:	f7fa f896 	bl	8001c9c <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e0cb      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b82:	4b49      	ldr	r3, [pc, #292]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ee      	beq.n	8007b6c <HAL_RCC_OscConfig+0x334>
 8007b8e:	e014      	b.n	8007bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b90:	f7fa f884 	bl	8001c9c <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b96:	e00a      	b.n	8007bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b98:	f7fa f880 	bl	8001c9c <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e0b5      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bae:	4b3e      	ldr	r3, [pc, #248]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1ee      	bne.n	8007b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d105      	bne.n	8007bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bc0:	4b39      	ldr	r3, [pc, #228]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	4a38      	ldr	r2, [pc, #224]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80a1 	beq.w	8007d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bd6:	4b34      	ldr	r3, [pc, #208]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 030c 	and.w	r3, r3, #12
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d05c      	beq.n	8007c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d141      	bne.n	8007c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bea:	4b31      	ldr	r3, [pc, #196]	; (8007cb0 <HAL_RCC_OscConfig+0x478>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf0:	f7fa f854 	bl	8001c9c <HAL_GetTick>
 8007bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7fa f850 	bl	8001c9c <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e087      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c0a:	4b27      	ldr	r3, [pc, #156]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1f0      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69da      	ldr	r2, [r3, #28]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	019b      	lsls	r3, r3, #6
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	061b      	lsls	r3, r3, #24
 8007c3a:	491b      	ldr	r1, [pc, #108]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c40:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <HAL_RCC_OscConfig+0x478>)
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c46:	f7fa f829 	bl	8001c9c <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c4e:	f7fa f825 	bl	8001c9c <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e05c      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCC_OscConfig+0x416>
 8007c6c:	e054      	b.n	8007d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <HAL_RCC_OscConfig+0x478>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c74:	f7fa f812 	bl	8001c9c <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c7c:	f7fa f80e 	bl	8001c9c <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e045      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c8e:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <HAL_RCC_OscConfig+0x470>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f0      	bne.n	8007c7c <HAL_RCC_OscConfig+0x444>
 8007c9a:	e03d      	b.n	8007d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d107      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e038      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
 8007ca8:	40023800 	.word	0x40023800
 8007cac:	40007000 	.word	0x40007000
 8007cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <HAL_RCC_OscConfig+0x4ec>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d028      	beq.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d121      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d11a      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d111      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d107      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d001      	beq.n	8007d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40023800 	.word	0x40023800

08007d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e0cc      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d3c:	4b68      	ldr	r3, [pc, #416]	; (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d90c      	bls.n	8007d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4a:	4b65      	ldr	r3, [pc, #404]	; (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d52:	4b63      	ldr	r3, [pc, #396]	; (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0b8      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d020      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d7c:	4b59      	ldr	r3, [pc, #356]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4a58      	ldr	r2, [pc, #352]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d94:	4b53      	ldr	r3, [pc, #332]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4a52      	ldr	r2, [pc, #328]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007da0:	4b50      	ldr	r3, [pc, #320]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	494d      	ldr	r1, [pc, #308]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d044      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc6:	4b47      	ldr	r3, [pc, #284]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d119      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e07f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d003      	beq.n	8007de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d107      	bne.n	8007df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de6:	4b3f      	ldr	r3, [pc, #252]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e06f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007df6:	4b3b      	ldr	r3, [pc, #236]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e067      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e06:	4b37      	ldr	r3, [pc, #220]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f023 0203 	bic.w	r2, r3, #3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4934      	ldr	r1, [pc, #208]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e18:	f7f9 ff40 	bl	8001c9c <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e1e:	e00a      	b.n	8007e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e20:	f7f9 ff3c 	bl	8001c9c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e04f      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e36:	4b2b      	ldr	r3, [pc, #172]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 020c 	and.w	r2, r3, #12
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d1eb      	bne.n	8007e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e48:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d20c      	bcs.n	8007e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e56:	4b22      	ldr	r3, [pc, #136]	; (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e5e:	4b20      	ldr	r3, [pc, #128]	; (8007ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d001      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e032      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e7c:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4916      	ldr	r1, [pc, #88]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e9a:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	490e      	ldr	r1, [pc, #56]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007eae:	f000 f889 	bl	8007fc4 <HAL_RCC_GetSysClockFreq>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	091b      	lsrs	r3, r3, #4
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	490a      	ldr	r1, [pc, #40]	; (8007ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8007ec0:	5ccb      	ldrb	r3, [r1, r3]
 8007ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec6:	4a09      	ldr	r2, [pc, #36]	; (8007eec <HAL_RCC_ClockConfig+0x1c4>)
 8007ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007eca:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7f9 fea0 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40023c00 	.word	0x40023c00
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	08010f24 	.word	0x08010f24
 8007eec:	20000000 	.word	0x20000000
 8007ef0:	20000004 	.word	0x20000004

08007ef4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08c      	sub	sp, #48	; 0x30
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d129      	bne.n	8007f5a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	4b2b      	ldr	r3, [pc, #172]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	4a2a      	ldr	r2, [pc, #168]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6313      	str	r3, [r2, #48]	; 0x30
 8007f16:	4b28      	ldr	r3, [pc, #160]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007f38:	f107 031c 	add.w	r3, r7, #28
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	481f      	ldr	r0, [pc, #124]	; (8007fbc <HAL_RCC_MCOConfig+0xc8>)
 8007f40:	f7fc f820 	bl	8003f84 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007f44:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	430b      	orrs	r3, r1
 8007f52:	4919      	ldr	r1, [pc, #100]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007f58:	e029      	b.n	8007fae <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f64:	f043 0304 	orr.w	r3, r3, #4
 8007f68:	6313      	str	r3, [r2, #48]	; 0x30
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f80:	2303      	movs	r3, #3
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f84:	2300      	movs	r3, #0
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007f8c:	f107 031c 	add.w	r3, r7, #28
 8007f90:	4619      	mov	r1, r3
 8007f92:	480b      	ldr	r0, [pc, #44]	; (8007fc0 <HAL_RCC_MCOConfig+0xcc>)
 8007f94:	f7fb fff6 	bl	8003f84 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	00d9      	lsls	r1, r3, #3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	4903      	ldr	r1, [pc, #12]	; (8007fb8 <HAL_RCC_MCOConfig+0xc4>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	608b      	str	r3, [r1, #8]
}
 8007fae:	bf00      	nop
 8007fb0:	3730      	adds	r7, #48	; 0x30
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40023800 	.word	0x40023800
 8007fbc:	40020000 	.word	0x40020000
 8007fc0:	40020800 	.word	0x40020800

08007fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc8:	b094      	sub	sp, #80	; 0x50
 8007fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fdc:	4b79      	ldr	r3, [pc, #484]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 030c 	and.w	r3, r3, #12
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d00d      	beq.n	8008004 <HAL_RCC_GetSysClockFreq+0x40>
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	f200 80e1 	bhi.w	80081b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d003      	beq.n	8007ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8007ff6:	e0db      	b.n	80081b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff8:	4b73      	ldr	r3, [pc, #460]	; (80081c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ffc:	e0db      	b.n	80081b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ffe:	4b73      	ldr	r3, [pc, #460]	; (80081cc <HAL_RCC_GetSysClockFreq+0x208>)
 8008000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008002:	e0d8      	b.n	80081b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008004:	4b6f      	ldr	r3, [pc, #444]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800800c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800800e:	4b6d      	ldr	r3, [pc, #436]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d063      	beq.n	80080e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800801a:	4b6a      	ldr	r3, [pc, #424]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	099b      	lsrs	r3, r3, #6
 8008020:	2200      	movs	r2, #0
 8008022:	63bb      	str	r3, [r7, #56]	; 0x38
 8008024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802c:	633b      	str	r3, [r7, #48]	; 0x30
 800802e:	2300      	movs	r3, #0
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008036:	4622      	mov	r2, r4
 8008038:	462b      	mov	r3, r5
 800803a:	f04f 0000 	mov.w	r0, #0
 800803e:	f04f 0100 	mov.w	r1, #0
 8008042:	0159      	lsls	r1, r3, #5
 8008044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008048:	0150      	lsls	r0, r2, #5
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4621      	mov	r1, r4
 8008050:	1a51      	subs	r1, r2, r1
 8008052:	6139      	str	r1, [r7, #16]
 8008054:	4629      	mov	r1, r5
 8008056:	eb63 0301 	sbc.w	r3, r3, r1
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008068:	4659      	mov	r1, fp
 800806a:	018b      	lsls	r3, r1, #6
 800806c:	4651      	mov	r1, sl
 800806e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008072:	4651      	mov	r1, sl
 8008074:	018a      	lsls	r2, r1, #6
 8008076:	4651      	mov	r1, sl
 8008078:	ebb2 0801 	subs.w	r8, r2, r1
 800807c:	4659      	mov	r1, fp
 800807e:	eb63 0901 	sbc.w	r9, r3, r1
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800808e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008096:	4690      	mov	r8, r2
 8008098:	4699      	mov	r9, r3
 800809a:	4623      	mov	r3, r4
 800809c:	eb18 0303 	adds.w	r3, r8, r3
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	462b      	mov	r3, r5
 80080a4:	eb49 0303 	adc.w	r3, r9, r3
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080b6:	4629      	mov	r1, r5
 80080b8:	024b      	lsls	r3, r1, #9
 80080ba:	4621      	mov	r1, r4
 80080bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080c0:	4621      	mov	r1, r4
 80080c2:	024a      	lsls	r2, r1, #9
 80080c4:	4610      	mov	r0, r2
 80080c6:	4619      	mov	r1, r3
 80080c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ca:	2200      	movs	r2, #0
 80080cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080d4:	f7f8 f8cc 	bl	8000270 <__aeabi_uldivmod>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4613      	mov	r3, r2
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e0:	e058      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e2:	4b38      	ldr	r3, [pc, #224]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	2200      	movs	r2, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	4611      	mov	r1, r2
 80080ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080f2:	623b      	str	r3, [r7, #32]
 80080f4:	2300      	movs	r3, #0
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
 80080f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080fc:	4642      	mov	r2, r8
 80080fe:	464b      	mov	r3, r9
 8008100:	f04f 0000 	mov.w	r0, #0
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	0159      	lsls	r1, r3, #5
 800810a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800810e:	0150      	lsls	r0, r2, #5
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4641      	mov	r1, r8
 8008116:	ebb2 0a01 	subs.w	sl, r2, r1
 800811a:	4649      	mov	r1, r9
 800811c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800812c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008134:	ebb2 040a 	subs.w	r4, r2, sl
 8008138:	eb63 050b 	sbc.w	r5, r3, fp
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	00eb      	lsls	r3, r5, #3
 8008146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800814a:	00e2      	lsls	r2, r4, #3
 800814c:	4614      	mov	r4, r2
 800814e:	461d      	mov	r5, r3
 8008150:	4643      	mov	r3, r8
 8008152:	18e3      	adds	r3, r4, r3
 8008154:	603b      	str	r3, [r7, #0]
 8008156:	464b      	mov	r3, r9
 8008158:	eb45 0303 	adc.w	r3, r5, r3
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800816a:	4629      	mov	r1, r5
 800816c:	028b      	lsls	r3, r1, #10
 800816e:	4621      	mov	r1, r4
 8008170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008174:	4621      	mov	r1, r4
 8008176:	028a      	lsls	r2, r1, #10
 8008178:	4610      	mov	r0, r2
 800817a:	4619      	mov	r1, r3
 800817c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817e:	2200      	movs	r2, #0
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	61fa      	str	r2, [r7, #28]
 8008184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008188:	f7f8 f872 	bl	8000270 <__aeabi_uldivmod>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4613      	mov	r3, r2
 8008192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008194:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	0c1b      	lsrs	r3, r3, #16
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	3301      	adds	r3, #1
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80081a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081ae:	e002      	b.n	80081b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80081b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3750      	adds	r7, #80	; 0x50
 80081bc:	46bd      	mov	sp, r7
 80081be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c2:	bf00      	nop
 80081c4:	40023800 	.word	0x40023800
 80081c8:	00f42400 	.word	0x00f42400
 80081cc:	007a1200 	.word	0x007a1200

080081d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081d4:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80081d6:	681b      	ldr	r3, [r3, #0]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000000 	.word	0x20000000

080081e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081ec:	f7ff fff0 	bl	80081d0 <HAL_RCC_GetHCLKFreq>
 80081f0:	4602      	mov	r2, r0
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	0a9b      	lsrs	r3, r3, #10
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	4903      	ldr	r1, [pc, #12]	; (800820c <HAL_RCC_GetPCLK1Freq+0x24>)
 80081fe:	5ccb      	ldrb	r3, [r1, r3]
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40023800 	.word	0x40023800
 800820c:	08010f34 	.word	0x08010f34

08008210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008214:	f7ff ffdc 	bl	80081d0 <HAL_RCC_GetHCLKFreq>
 8008218:	4602      	mov	r2, r0
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	0b5b      	lsrs	r3, r3, #13
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	4903      	ldr	r1, [pc, #12]	; (8008234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008226:	5ccb      	ldrb	r3, [r1, r3]
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800822c:	4618      	mov	r0, r3
 800822e:	bd80      	pop	{r7, pc}
 8008230:	40023800 	.word	0x40023800
 8008234:	08010f34 	.word	0x08010f34

08008238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e07b      	b.n	8008342 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d108      	bne.n	8008264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800825a:	d009      	beq.n	8008270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	61da      	str	r2, [r3, #28]
 8008262:	e005      	b.n	8008270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7f8 fece 	bl	800102c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f4:	ea42 0103 	orr.w	r1, r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	0c1b      	lsrs	r3, r3, #16
 800830e:	f003 0104 	and.w	r1, r3, #4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	f003 0210 	and.w	r2, r3, #16
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008330:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10e      	bne.n	800838c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008374:	2b00      	cmp	r3, #0
 8008376:	d009      	beq.n	800838c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d004      	beq.n	800838c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
    return;
 800838a:	e0ce      	b.n	800852a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <HAL_SPI_IRQHandler+0x5e>
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4798      	blx	r3
    return;
 80083a8:	e0bf      	b.n	800852a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <HAL_SPI_IRQHandler+0x7e>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80b0 	beq.w	800852a <HAL_SPI_IRQHandler+0x1de>
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80aa 	beq.w	800852a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d023      	beq.n	8008428 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d011      	beq.n	8008410 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f0:	f043 0204 	orr.w	r2, r3, #4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	e00b      	b.n	8008428 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	613b      	str	r3, [r7, #16]
 8008424:	693b      	ldr	r3, [r7, #16]
        return;
 8008426:	e080      	b.n	800852a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d014      	beq.n	800845c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008436:	f043 0201 	orr.w	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846a:	f043 0208 	orr.w	r2, r3, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008472:	2300      	movs	r3, #0
 8008474:	60bb      	str	r3, [r7, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008484:	2b00      	cmp	r3, #0
 8008486:	d04f      	beq.n	8008528 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008496:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d104      	bne.n	80084b4 <HAL_SPI_IRQHandler+0x168>
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d034      	beq.n	800851e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0203 	bic.w	r2, r2, #3
 80084c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d011      	beq.n	80084f0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d0:	4a17      	ldr	r2, [pc, #92]	; (8008530 <HAL_SPI_IRQHandler+0x1e4>)
 80084d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fa f93f 	bl	800275c <HAL_DMA_Abort_IT>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d016      	beq.n	8008526 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fc:	4a0c      	ldr	r2, [pc, #48]	; (8008530 <HAL_SPI_IRQHandler+0x1e4>)
 80084fe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008504:	4618      	mov	r0, r3
 8008506:	f7fa f929 	bl	800275c <HAL_DMA_Abort_IT>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800851c:	e003      	b.n	8008526 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f808 	bl	8008534 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008524:	e000      	b.n	8008528 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008526:	bf00      	nop
    return;
 8008528:	bf00      	nop
  }
}
 800852a:	3720      	adds	r7, #32
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	08008549 	.word	0x08008549

08008534 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff ffe6 	bl	8008534 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e038      	b.n	80085f8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7f8 fec4 	bl	8001328 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3308      	adds	r3, #8
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f001 f812 	bl	80095d4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	461a      	mov	r2, r3
 80085ba:	68b9      	ldr	r1, [r7, #8]
 80085bc:	f001 f874 	bl	80096a8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6858      	ldr	r0, [r3, #4]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	f001 f8a1 	bl	8009714 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	6892      	ldr	r2, [r2, #8]
 80085da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	6892      	ldr	r2, [r2, #8]
 80085e6:	f041 0101 	orr.w	r1, r1, #1
 80085ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e097      	b.n	8008744 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7f8 fd6f 	bl	800110c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008644:	f023 0307 	bic.w	r3, r3, #7
 8008648:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f000 f879 	bl	800874c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4313      	orrs	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008682:	f023 0303 	bic.w	r3, r3, #3
 8008686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	4313      	orrs	r3, r2
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80086a0:	f023 030c 	bic.w	r3, r3, #12
 80086a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	021b      	lsls	r3, r3, #8
 80086bc:	4313      	orrs	r3, r2
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	011a      	lsls	r2, r3, #4
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	031b      	lsls	r3, r3, #12
 80086d0:	4313      	orrs	r3, r2
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	4313      	orrs	r3, r2
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a46      	ldr	r2, [pc, #280]	; (8008878 <TIM_Base_SetConfig+0x12c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d013      	beq.n	800878c <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876a:	d00f      	beq.n	800878c <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a43      	ldr	r2, [pc, #268]	; (800887c <TIM_Base_SetConfig+0x130>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00b      	beq.n	800878c <TIM_Base_SetConfig+0x40>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a42      	ldr	r2, [pc, #264]	; (8008880 <TIM_Base_SetConfig+0x134>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d007      	beq.n	800878c <TIM_Base_SetConfig+0x40>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a41      	ldr	r2, [pc, #260]	; (8008884 <TIM_Base_SetConfig+0x138>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d003      	beq.n	800878c <TIM_Base_SetConfig+0x40>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a40      	ldr	r2, [pc, #256]	; (8008888 <TIM_Base_SetConfig+0x13c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d108      	bne.n	800879e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a35      	ldr	r2, [pc, #212]	; (8008878 <TIM_Base_SetConfig+0x12c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d02b      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d027      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a32      	ldr	r2, [pc, #200]	; (800887c <TIM_Base_SetConfig+0x130>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d023      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a31      	ldr	r2, [pc, #196]	; (8008880 <TIM_Base_SetConfig+0x134>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01f      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a30      	ldr	r2, [pc, #192]	; (8008884 <TIM_Base_SetConfig+0x138>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d01b      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a2f      	ldr	r2, [pc, #188]	; (8008888 <TIM_Base_SetConfig+0x13c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d017      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a2e      	ldr	r2, [pc, #184]	; (800888c <TIM_Base_SetConfig+0x140>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d013      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a2d      	ldr	r2, [pc, #180]	; (8008890 <TIM_Base_SetConfig+0x144>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00f      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a2c      	ldr	r2, [pc, #176]	; (8008894 <TIM_Base_SetConfig+0x148>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00b      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a2b      	ldr	r2, [pc, #172]	; (8008898 <TIM_Base_SetConfig+0x14c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2a      	ldr	r2, [pc, #168]	; (800889c <TIM_Base_SetConfig+0x150>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d003      	beq.n	80087fe <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <TIM_Base_SetConfig+0x154>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d108      	bne.n	8008810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a10      	ldr	r2, [pc, #64]	; (8008878 <TIM_Base_SetConfig+0x12c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_Base_SetConfig+0xf8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a12      	ldr	r2, [pc, #72]	; (8008888 <TIM_Base_SetConfig+0x13c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d103      	bne.n	800884c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b01      	cmp	r3, #1
 800885c:	d105      	bne.n	800886a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	611a      	str	r2, [r3, #16]
  }
}
 800886a:	bf00      	nop
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40010000 	.word	0x40010000
 800887c:	40000400 	.word	0x40000400
 8008880:	40000800 	.word	0x40000800
 8008884:	40000c00 	.word	0x40000c00
 8008888:	40010400 	.word	0x40010400
 800888c:	40014000 	.word	0x40014000
 8008890:	40014400 	.word	0x40014400
 8008894:	40014800 	.word	0x40014800
 8008898:	40001800 	.word	0x40001800
 800889c:	40001c00 	.word	0x40001c00
 80088a0:	40002000 	.word	0x40002000

080088a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e05a      	b.n	8008972 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a21      	ldr	r2, [pc, #132]	; (8008980 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d022      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008908:	d01d      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1d      	ldr	r2, [pc, #116]	; (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d018      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a1b      	ldr	r2, [pc, #108]	; (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d013      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1a      	ldr	r2, [pc, #104]	; (800898c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00e      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a18      	ldr	r2, [pc, #96]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d009      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a17      	ldr	r2, [pc, #92]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d004      	beq.n	8008946 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a15      	ldr	r2, [pc, #84]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d10c      	bne.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800894c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	4313      	orrs	r3, r2
 8008956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40010000 	.word	0x40010000
 8008984:	40000400 	.word	0x40000400
 8008988:	40000800 	.word	0x40000800
 800898c:	40000c00 	.word	0x40000c00
 8008990:	40010400 	.word	0x40010400
 8008994:	40014000 	.word	0x40014000
 8008998:	40001800 	.word	0x40001800

0800899c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e042      	b.n	8008a34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7f8 fbea 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2224      	movs	r2, #36	; 0x24
 80089cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fb83 	bl	80090ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695a      	ldr	r2, [r3, #20]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d175      	bne.n	8008b48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <HAL_UART_Transmit+0x2c>
 8008a62:	88fb      	ldrh	r3, [r7, #6]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e06e      	b.n	8008b4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2221      	movs	r2, #33	; 0x21
 8008a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a7a:	f7f9 f90f 	bl	8001c9c <HAL_GetTick>
 8008a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	88fa      	ldrh	r2, [r7, #6]
 8008a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a94:	d108      	bne.n	8008aa8 <HAL_UART_Transmit+0x6c>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	e003      	b.n	8008ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ab0:	e02e      	b.n	8008b10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2180      	movs	r1, #128	; 0x80
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f995 	bl	8008dec <UART_WaitOnFlagUntilTimeout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d005      	beq.n	8008ad4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e03a      	b.n	8008b4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	3302      	adds	r3, #2
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e007      	b.n	8008b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	3301      	adds	r3, #1
 8008b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1cb      	bne.n	8008ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2200      	movs	r2, #0
 8008b22:	2140      	movs	r1, #64	; 0x40
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f961 	bl	8008dec <UART_WaitOnFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e006      	b.n	8008b4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e000      	b.n	8008b4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b48:	2302      	movs	r3, #2
  }
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d112      	bne.n	8008b92 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_UART_Receive_DMA+0x26>
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e00b      	b.n	8008b94 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	461a      	mov	r2, r3
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f989 	bl	8008ea0 <UART_Start_Receive_DMA>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	e000      	b.n	8008b94 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b92:	2302      	movs	r3, #2
  }
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b09c      	sub	sp, #112	; 0x70
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d172      	bne.n	8008cf2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	2200      	movs	r2, #0
 8008c10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	330c      	adds	r3, #12
 8008c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	330c      	adds	r3, #12
 8008c30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c32:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e5      	bne.n	8008c12 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3314      	adds	r3, #20
 8008c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8008c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3314      	adds	r3, #20
 8008c64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c66:	647a      	str	r2, [r7, #68]	; 0x44
 8008c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e5      	bne.n	8008c46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3314      	adds	r3, #20
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c90:	663b      	str	r3, [r7, #96]	; 0x60
 8008c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3314      	adds	r3, #20
 8008c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d119      	bne.n	8008cf2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	330c      	adds	r3, #12
 8008cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 0310 	bic.w	r3, r3, #16
 8008cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cde:	61fa      	str	r2, [r7, #28]
 8008ce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	69b9      	ldr	r1, [r7, #24]
 8008ce4:	69fa      	ldr	r2, [r7, #28]
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	617b      	str	r3, [r7, #20]
   return(result);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e5      	bne.n	8008cbe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d106      	bne.n	8008d0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d04:	4619      	mov	r1, r3
 8008d06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d08:	f7ff ff66 	bl	8008bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d0c:	e002      	b.n	8008d14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008d0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d10:	f7ff ff44 	bl	8008b9c <HAL_UART_RxCpltCallback>
}
 8008d14:	bf00      	nop
 8008d16:	3770      	adds	r7, #112	; 0x70
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d108      	bne.n	8008d4a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff ff48 	bl	8008bd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d48:	e002      	b.n	8008d50 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff ff30 	bl	8008bb0 <HAL_UART_RxHalfCpltCallback>
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d74:	2b80      	cmp	r3, #128	; 0x80
 8008d76:	bf0c      	ite	eq
 8008d78:	2301      	moveq	r3, #1
 8008d7a:	2300      	movne	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b21      	cmp	r3, #33	; 0x21
 8008d8a:	d108      	bne.n	8008d9e <UART_DMAError+0x46>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d005      	beq.n	8008d9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2200      	movs	r2, #0
 8008d96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f000 f91b 	bl	8008fd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b40      	cmp	r3, #64	; 0x40
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b22      	cmp	r3, #34	; 0x22
 8008dbe:	d108      	bne.n	8008dd2 <UART_DMAError+0x7a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008dcc:	68b8      	ldr	r0, [r7, #8]
 8008dce:	f000 f929 	bl	8009024 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	f043 0210 	orr.w	r2, r3, #16
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dde:	68b8      	ldr	r0, [r7, #8]
 8008de0:	f7ff fef0 	bl	8008bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfc:	e03b      	b.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d037      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e06:	f7f8 ff49 	bl	8001c9c <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	6a3a      	ldr	r2, [r7, #32]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d302      	bcc.n	8008e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e03a      	b.n	8008e96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d023      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b80      	cmp	r3, #128	; 0x80
 8008e32:	d020      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d01d      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0308 	and.w	r3, r3, #8
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d116      	bne.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f8e0 	bl	8009024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2208      	movs	r2, #8
 8008e68:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e00f      	b.n	8008e96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	bf0c      	ite	eq
 8008e86:	2301      	moveq	r3, #1
 8008e88:	2300      	movne	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d0b4      	beq.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b098      	sub	sp, #96	; 0x60
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	88fa      	ldrh	r2, [r7, #6]
 8008eb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2222      	movs	r2, #34	; 0x22
 8008ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ecc:	4a3e      	ldr	r2, [pc, #248]	; (8008fc8 <UART_Start_Receive_DMA+0x128>)
 8008ece:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed4:	4a3d      	ldr	r2, [pc, #244]	; (8008fcc <UART_Start_Receive_DMA+0x12c>)
 8008ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	4a3c      	ldr	r2, [pc, #240]	; (8008fd0 <UART_Start_Receive_DMA+0x130>)
 8008ede:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008ee8:	f107 0308 	add.w	r3, r7, #8
 8008eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	88fb      	ldrh	r3, [r7, #6]
 8008f00:	f7f9 fb64 	bl	80025cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f04:	2300      	movs	r3, #0
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d019      	beq.n	8008f56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008f48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e5      	bne.n	8008f22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	f043 0301 	orr.w	r3, r3, #1
 8008f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f76:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3314      	adds	r3, #20
 8008f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa0:	653b      	str	r3, [r7, #80]	; 0x50
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008faa:	627a      	str	r2, [r7, #36]	; 0x24
 8008fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6a39      	ldr	r1, [r7, #32]
 8008fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e5      	bne.n	8008f8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3760      	adds	r7, #96	; 0x60
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	08008bf1 	.word	0x08008bf1
 8008fcc:	08008d1d 	.word	0x08008d1d
 8008fd0:	08008d59 	.word	0x08008d59

08008fd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b089      	sub	sp, #36	; 0x24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	61ba      	str	r2, [r7, #24]
 8008ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6979      	ldr	r1, [r7, #20]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	613b      	str	r3, [r7, #16]
   return(result);
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e5      	bne.n	8008fdc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009018:	bf00      	nop
 800901a:	3724      	adds	r7, #36	; 0x24
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b095      	sub	sp, #84	; 0x54
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	330c      	adds	r3, #12
 8009032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800904c:	643a      	str	r2, [r7, #64]	; 0x40
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e5      	bne.n	800902c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3314      	adds	r3, #20
 8009066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3314      	adds	r3, #20
 800907e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e5      	bne.n	8009060 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	2b01      	cmp	r3, #1
 800909a:	d119      	bne.n	80090d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	330c      	adds	r3, #12
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	647b      	str	r3, [r7, #68]	; 0x44
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090bc:	61ba      	str	r2, [r7, #24]
 80090be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80090de:	bf00      	nop
 80090e0:	3754      	adds	r7, #84	; 0x54
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090f0:	b0c0      	sub	sp, #256	; 0x100
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009108:	68d9      	ldr	r1, [r3, #12]
 800910a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	ea40 0301 	orr.w	r3, r0, r1
 8009114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	431a      	orrs	r2, r3
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	431a      	orrs	r2, r3
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	4313      	orrs	r3, r2
 8009134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009144:	f021 010c 	bic.w	r1, r1, #12
 8009148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009152:	430b      	orrs	r3, r1
 8009154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009166:	6999      	ldr	r1, [r3, #24]
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	ea40 0301 	orr.w	r3, r0, r1
 8009172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4b8f      	ldr	r3, [pc, #572]	; (80093b8 <UART_SetConfig+0x2cc>)
 800917c:	429a      	cmp	r2, r3
 800917e:	d005      	beq.n	800918c <UART_SetConfig+0xa0>
 8009180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	4b8d      	ldr	r3, [pc, #564]	; (80093bc <UART_SetConfig+0x2d0>)
 8009188:	429a      	cmp	r2, r3
 800918a:	d104      	bne.n	8009196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800918c:	f7ff f840 	bl	8008210 <HAL_RCC_GetPCLK2Freq>
 8009190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009194:	e003      	b.n	800919e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009196:	f7ff f827 	bl	80081e8 <HAL_RCC_GetPCLK1Freq>
 800919a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800919e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a8:	f040 810c 	bne.w	80093c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091be:	4622      	mov	r2, r4
 80091c0:	462b      	mov	r3, r5
 80091c2:	1891      	adds	r1, r2, r2
 80091c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80091c6:	415b      	adcs	r3, r3
 80091c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091ce:	4621      	mov	r1, r4
 80091d0:	eb12 0801 	adds.w	r8, r2, r1
 80091d4:	4629      	mov	r1, r5
 80091d6:	eb43 0901 	adc.w	r9, r3, r1
 80091da:	f04f 0200 	mov.w	r2, #0
 80091de:	f04f 0300 	mov.w	r3, #0
 80091e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091ee:	4690      	mov	r8, r2
 80091f0:	4699      	mov	r9, r3
 80091f2:	4623      	mov	r3, r4
 80091f4:	eb18 0303 	adds.w	r3, r8, r3
 80091f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091fc:	462b      	mov	r3, r5
 80091fe:	eb49 0303 	adc.w	r3, r9, r3
 8009202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800921a:	460b      	mov	r3, r1
 800921c:	18db      	adds	r3, r3, r3
 800921e:	653b      	str	r3, [r7, #80]	; 0x50
 8009220:	4613      	mov	r3, r2
 8009222:	eb42 0303 	adc.w	r3, r2, r3
 8009226:	657b      	str	r3, [r7, #84]	; 0x54
 8009228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800922c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009230:	f7f7 f81e 	bl	8000270 <__aeabi_uldivmod>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4b61      	ldr	r3, [pc, #388]	; (80093c0 <UART_SetConfig+0x2d4>)
 800923a:	fba3 2302 	umull	r2, r3, r3, r2
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	011c      	lsls	r4, r3, #4
 8009242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009246:	2200      	movs	r2, #0
 8009248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800924c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009254:	4642      	mov	r2, r8
 8009256:	464b      	mov	r3, r9
 8009258:	1891      	adds	r1, r2, r2
 800925a:	64b9      	str	r1, [r7, #72]	; 0x48
 800925c:	415b      	adcs	r3, r3
 800925e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009264:	4641      	mov	r1, r8
 8009266:	eb12 0a01 	adds.w	sl, r2, r1
 800926a:	4649      	mov	r1, r9
 800926c:	eb43 0b01 	adc.w	fp, r3, r1
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800927c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009284:	4692      	mov	sl, r2
 8009286:	469b      	mov	fp, r3
 8009288:	4643      	mov	r3, r8
 800928a:	eb1a 0303 	adds.w	r3, sl, r3
 800928e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009292:	464b      	mov	r3, r9
 8009294:	eb4b 0303 	adc.w	r3, fp, r3
 8009298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092b0:	460b      	mov	r3, r1
 80092b2:	18db      	adds	r3, r3, r3
 80092b4:	643b      	str	r3, [r7, #64]	; 0x40
 80092b6:	4613      	mov	r3, r2
 80092b8:	eb42 0303 	adc.w	r3, r2, r3
 80092bc:	647b      	str	r3, [r7, #68]	; 0x44
 80092be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092c6:	f7f6 ffd3 	bl	8000270 <__aeabi_uldivmod>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	4b3b      	ldr	r3, [pc, #236]	; (80093c0 <UART_SetConfig+0x2d4>)
 80092d2:	fba3 2301 	umull	r2, r3, r3, r1
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	2264      	movs	r2, #100	; 0x64
 80092da:	fb02 f303 	mul.w	r3, r2, r3
 80092de:	1acb      	subs	r3, r1, r3
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092e6:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <UART_SetConfig+0x2d4>)
 80092e8:	fba3 2302 	umull	r2, r3, r3, r2
 80092ec:	095b      	lsrs	r3, r3, #5
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092f4:	441c      	add	r4, r3
 80092f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009308:	4642      	mov	r2, r8
 800930a:	464b      	mov	r3, r9
 800930c:	1891      	adds	r1, r2, r2
 800930e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009310:	415b      	adcs	r3, r3
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009318:	4641      	mov	r1, r8
 800931a:	1851      	adds	r1, r2, r1
 800931c:	6339      	str	r1, [r7, #48]	; 0x30
 800931e:	4649      	mov	r1, r9
 8009320:	414b      	adcs	r3, r1
 8009322:	637b      	str	r3, [r7, #52]	; 0x34
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	f04f 0300 	mov.w	r3, #0
 800932c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009330:	4659      	mov	r1, fp
 8009332:	00cb      	lsls	r3, r1, #3
 8009334:	4651      	mov	r1, sl
 8009336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800933a:	4651      	mov	r1, sl
 800933c:	00ca      	lsls	r2, r1, #3
 800933e:	4610      	mov	r0, r2
 8009340:	4619      	mov	r1, r3
 8009342:	4603      	mov	r3, r0
 8009344:	4642      	mov	r2, r8
 8009346:	189b      	adds	r3, r3, r2
 8009348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800934c:	464b      	mov	r3, r9
 800934e:	460a      	mov	r2, r1
 8009350:	eb42 0303 	adc.w	r3, r2, r3
 8009354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800936c:	460b      	mov	r3, r1
 800936e:	18db      	adds	r3, r3, r3
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
 8009372:	4613      	mov	r3, r2
 8009374:	eb42 0303 	adc.w	r3, r2, r3
 8009378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800937a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800937e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009382:	f7f6 ff75 	bl	8000270 <__aeabi_uldivmod>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <UART_SetConfig+0x2d4>)
 800938c:	fba3 1302 	umull	r1, r3, r3, r2
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	2164      	movs	r1, #100	; 0x64
 8009394:	fb01 f303 	mul.w	r3, r1, r3
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	3332      	adds	r3, #50	; 0x32
 800939e:	4a08      	ldr	r2, [pc, #32]	; (80093c0 <UART_SetConfig+0x2d4>)
 80093a0:	fba2 2303 	umull	r2, r3, r2, r3
 80093a4:	095b      	lsrs	r3, r3, #5
 80093a6:	f003 0207 	and.w	r2, r3, #7
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4422      	add	r2, r4
 80093b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093b4:	e106      	b.n	80095c4 <UART_SetConfig+0x4d8>
 80093b6:	bf00      	nop
 80093b8:	40011000 	.word	0x40011000
 80093bc:	40011400 	.word	0x40011400
 80093c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093d6:	4642      	mov	r2, r8
 80093d8:	464b      	mov	r3, r9
 80093da:	1891      	adds	r1, r2, r2
 80093dc:	6239      	str	r1, [r7, #32]
 80093de:	415b      	adcs	r3, r3
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
 80093e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093e6:	4641      	mov	r1, r8
 80093e8:	1854      	adds	r4, r2, r1
 80093ea:	4649      	mov	r1, r9
 80093ec:	eb43 0501 	adc.w	r5, r3, r1
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	00eb      	lsls	r3, r5, #3
 80093fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093fe:	00e2      	lsls	r2, r4, #3
 8009400:	4614      	mov	r4, r2
 8009402:	461d      	mov	r5, r3
 8009404:	4643      	mov	r3, r8
 8009406:	18e3      	adds	r3, r4, r3
 8009408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800940c:	464b      	mov	r3, r9
 800940e:	eb45 0303 	adc.w	r3, r5, r3
 8009412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009426:	f04f 0200 	mov.w	r2, #0
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009432:	4629      	mov	r1, r5
 8009434:	008b      	lsls	r3, r1, #2
 8009436:	4621      	mov	r1, r4
 8009438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800943c:	4621      	mov	r1, r4
 800943e:	008a      	lsls	r2, r1, #2
 8009440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009444:	f7f6 ff14 	bl	8000270 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4b60      	ldr	r3, [pc, #384]	; (80095d0 <UART_SetConfig+0x4e4>)
 800944e:	fba3 2302 	umull	r2, r3, r3, r2
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	011c      	lsls	r4, r3, #4
 8009456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800945a:	2200      	movs	r2, #0
 800945c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009468:	4642      	mov	r2, r8
 800946a:	464b      	mov	r3, r9
 800946c:	1891      	adds	r1, r2, r2
 800946e:	61b9      	str	r1, [r7, #24]
 8009470:	415b      	adcs	r3, r3
 8009472:	61fb      	str	r3, [r7, #28]
 8009474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009478:	4641      	mov	r1, r8
 800947a:	1851      	adds	r1, r2, r1
 800947c:	6139      	str	r1, [r7, #16]
 800947e:	4649      	mov	r1, r9
 8009480:	414b      	adcs	r3, r1
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009490:	4659      	mov	r1, fp
 8009492:	00cb      	lsls	r3, r1, #3
 8009494:	4651      	mov	r1, sl
 8009496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800949a:	4651      	mov	r1, sl
 800949c:	00ca      	lsls	r2, r1, #3
 800949e:	4610      	mov	r0, r2
 80094a0:	4619      	mov	r1, r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	4642      	mov	r2, r8
 80094a6:	189b      	adds	r3, r3, r2
 80094a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094ac:	464b      	mov	r3, r9
 80094ae:	460a      	mov	r2, r1
 80094b0:	eb42 0303 	adc.w	r3, r2, r3
 80094b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80094c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094d0:	4649      	mov	r1, r9
 80094d2:	008b      	lsls	r3, r1, #2
 80094d4:	4641      	mov	r1, r8
 80094d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094da:	4641      	mov	r1, r8
 80094dc:	008a      	lsls	r2, r1, #2
 80094de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094e2:	f7f6 fec5 	bl	8000270 <__aeabi_uldivmod>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	4b38      	ldr	r3, [pc, #224]	; (80095d0 <UART_SetConfig+0x4e4>)
 80094ee:	fba3 2301 	umull	r2, r3, r3, r1
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	2264      	movs	r2, #100	; 0x64
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
 80094fa:	1acb      	subs	r3, r1, r3
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	3332      	adds	r3, #50	; 0x32
 8009500:	4a33      	ldr	r2, [pc, #204]	; (80095d0 <UART_SetConfig+0x4e4>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	095b      	lsrs	r3, r3, #5
 8009508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800950c:	441c      	add	r4, r3
 800950e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009512:	2200      	movs	r2, #0
 8009514:	673b      	str	r3, [r7, #112]	; 0x70
 8009516:	677a      	str	r2, [r7, #116]	; 0x74
 8009518:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	1891      	adds	r1, r2, r2
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	415b      	adcs	r3, r3
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800952c:	4641      	mov	r1, r8
 800952e:	1851      	adds	r1, r2, r1
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	4649      	mov	r1, r9
 8009534:	414b      	adcs	r3, r1
 8009536:	607b      	str	r3, [r7, #4]
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009544:	4659      	mov	r1, fp
 8009546:	00cb      	lsls	r3, r1, #3
 8009548:	4651      	mov	r1, sl
 800954a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800954e:	4651      	mov	r1, sl
 8009550:	00ca      	lsls	r2, r1, #3
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	4603      	mov	r3, r0
 8009558:	4642      	mov	r2, r8
 800955a:	189b      	adds	r3, r3, r2
 800955c:	66bb      	str	r3, [r7, #104]	; 0x68
 800955e:	464b      	mov	r3, r9
 8009560:	460a      	mov	r2, r1
 8009562:	eb42 0303 	adc.w	r3, r2, r3
 8009566:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	663b      	str	r3, [r7, #96]	; 0x60
 8009572:	667a      	str	r2, [r7, #100]	; 0x64
 8009574:	f04f 0200 	mov.w	r2, #0
 8009578:	f04f 0300 	mov.w	r3, #0
 800957c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009580:	4649      	mov	r1, r9
 8009582:	008b      	lsls	r3, r1, #2
 8009584:	4641      	mov	r1, r8
 8009586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800958a:	4641      	mov	r1, r8
 800958c:	008a      	lsls	r2, r1, #2
 800958e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009592:	f7f6 fe6d 	bl	8000270 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <UART_SetConfig+0x4e4>)
 800959c:	fba3 1302 	umull	r1, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	2164      	movs	r1, #100	; 0x64
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	3332      	adds	r3, #50	; 0x32
 80095ae:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <UART_SetConfig+0x4e4>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4422      	add	r2, r4
 80095c2:	609a      	str	r2, [r3, #8]
}
 80095c4:	bf00      	nop
 80095c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095ca:	46bd      	mov	sp, r7
 80095cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095d0:	51eb851f 	.word	0x51eb851f

080095d4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	6812      	ldr	r2, [r2, #0]
 80095ec:	f023 0101 	bic.w	r1, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d102      	bne.n	8009604 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80095fe:	2340      	movs	r3, #64	; 0x40
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	e001      	b.n	8009608 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009614:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800961a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009620:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009626:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800962c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009632:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009638:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800963e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009644:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800964a:	4313      	orrs	r3, r2
 800964c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009662:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <FSMC_NORSRAM_Init+0xd0>)
 8009664:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800966c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009674:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	43db      	mvns	r3, r3
 8009684:	ea02 0103 	and.w	r1, r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4319      	orrs	r1, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	371c      	adds	r7, #28
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	0008fb7f 	.word	0x0008fb7f

080096a8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096be:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	431a      	orrs	r2, r3
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	431a      	orrs	r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	051b      	lsls	r3, r3, #20
 80096e6:	431a      	orrs	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	3b02      	subs	r3, #2
 80096ee:	061b      	lsls	r3, r3, #24
 80096f0:	431a      	orrs	r2, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	3201      	adds	r2, #1
 80096fc:	4319      	orrs	r1, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009728:	d11d      	bne.n	8009766 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009732:	4b13      	ldr	r3, [pc, #76]	; (8009780 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009734:	4013      	ands	r3, r2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	6811      	ldr	r1, [r2, #0]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	6852      	ldr	r2, [r2, #4]
 800973e:	0112      	lsls	r2, r2, #4
 8009740:	4311      	orrs	r1, r2
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	6892      	ldr	r2, [r2, #8]
 8009746:	0212      	lsls	r2, r2, #8
 8009748:	4311      	orrs	r1, r2
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	6992      	ldr	r2, [r2, #24]
 800974e:	4311      	orrs	r1, r2
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	68d2      	ldr	r2, [r2, #12]
 8009754:	0412      	lsls	r2, r2, #16
 8009756:	430a      	orrs	r2, r1
 8009758:	ea43 0102 	orr.w	r1, r3, r2
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009764:	e005      	b.n	8009772 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800976e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3714      	adds	r7, #20
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	cff00000 	.word	0xcff00000

08009784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009784:	b084      	sub	sp, #16
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	f107 001c 	add.w	r0, r7, #28
 8009792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009796:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800979a:	2b01      	cmp	r3, #1
 800979c:	d123      	bne.n	80097e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80097b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d105      	bne.n	80097da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9dc 	bl	8009b98 <USB_CoreReset>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
 80097e4:	e01b      	b.n	800981e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f9d0 	bl	8009b98 <USB_CoreReset>
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80097fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009800:	2b00      	cmp	r3, #0
 8009802:	d106      	bne.n	8009812 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009808:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	639a      	str	r2, [r3, #56]	; 0x38
 8009810:	e005      	b.n	800981e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800981e:	7fbb      	ldrb	r3, [r7, #30]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d10b      	bne.n	800983c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f043 0206 	orr.w	r2, r3, #6
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f043 0220 	orr.w	r2, r3, #32
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009848:	b004      	add	sp, #16
 800984a:	4770      	bx	lr

0800984c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f043 0201 	orr.w	r2, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f023 0201 	bic.w	r2, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d115      	bne.n	80098de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80098be:	200a      	movs	r0, #10
 80098c0:	f7f8 f9f8 	bl	8001cb4 <HAL_Delay>
      ms += 10U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	330a      	adds	r3, #10
 80098c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f956 	bl	8009b7c <USB_GetMode>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d01e      	beq.n	8009914 <USB_SetCurrentMode+0x84>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2bc7      	cmp	r3, #199	; 0xc7
 80098da:	d9f0      	bls.n	80098be <USB_SetCurrentMode+0x2e>
 80098dc:	e01a      	b.n	8009914 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d115      	bne.n	8009910 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80098f0:	200a      	movs	r0, #10
 80098f2:	f7f8 f9df 	bl	8001cb4 <HAL_Delay>
      ms += 10U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	330a      	adds	r3, #10
 80098fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f93d 	bl	8009b7c <USB_GetMode>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <USB_SetCurrentMode+0x84>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2bc7      	cmp	r3, #199	; 0xc7
 800990c:	d9f0      	bls.n	80098f0 <USB_SetCurrentMode+0x60>
 800990e:	e001      	b.n	8009914 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e005      	b.n	8009920 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2bc8      	cmp	r3, #200	; 0xc8
 8009918:	d101      	bne.n	800991e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009942:	d901      	bls.n	8009948 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e01b      	b.n	8009980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	daf2      	bge.n	8009936 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	019b      	lsls	r3, r3, #6
 8009958:	f043 0220 	orr.w	r2, r3, #32
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3301      	adds	r3, #1
 8009964:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800996c:	d901      	bls.n	8009972 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e006      	b.n	8009980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b20      	cmp	r3, #32
 800997c:	d0f0      	beq.n	8009960 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80099a4:	d901      	bls.n	80099aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e018      	b.n	80099dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	daf2      	bge.n	8009998 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2210      	movs	r2, #16
 80099ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80099c8:	d901      	bls.n	80099ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e006      	b.n	80099dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0310 	and.w	r3, r3, #16
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d0f0      	beq.n	80099bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b089      	sub	sp, #36	; 0x24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4611      	mov	r1, r2
 80099f4:	461a      	mov	r2, r3
 80099f6:	460b      	mov	r3, r1
 80099f8:	71fb      	strb	r3, [r7, #7]
 80099fa:	4613      	mov	r3, r2
 80099fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d123      	bne.n	8009a56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a0e:	88bb      	ldrh	r3, [r7, #4]
 8009a10:	3303      	adds	r3, #3
 8009a12:	089b      	lsrs	r3, r3, #2
 8009a14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a16:	2300      	movs	r3, #0
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	e018      	b.n	8009a4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	031a      	lsls	r2, r3, #12
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a28:	461a      	mov	r2, r3
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	3301      	adds	r3, #1
 8009a34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	3301      	adds	r3, #1
 8009a46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	61bb      	str	r3, [r7, #24]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d3e2      	bcc.n	8009a1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3724      	adds	r7, #36	; 0x24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b08b      	sub	sp, #44	; 0x2c
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	089b      	lsrs	r3, r3, #2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a82:	88fb      	ldrh	r3, [r7, #6]
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	623b      	str	r3, [r7, #32]
 8009a8e:	e014      	b.n	8009aba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	3301      	adds	r3, #1
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	6a3a      	ldr	r2, [r7, #32]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d3e6      	bcc.n	8009a90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009ac2:	8bfb      	ldrh	r3, [r7, #30]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01e      	beq.n	8009b06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f107 0310 	add.w	r3, r7, #16
 8009ad8:	6812      	ldr	r2, [r2, #0]
 8009ada:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	701a      	strb	r2, [r3, #0]
      i++;
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	3301      	adds	r3, #1
 8009af2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	3301      	adds	r3, #1
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009afa:	8bfb      	ldrh	r3, [r7, #30]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b00:	8bfb      	ldrh	r3, [r7, #30]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1ea      	bne.n	8009adc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	372c      	adds	r7, #44	; 0x2c
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4013      	ands	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	460b      	mov	r3, r1
 8009b44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009b5a:	78fb      	ldrb	r3, [r7, #3]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	f003 0301 	and.w	r3, r3, #1
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009bb0:	d901      	bls.n	8009bb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e01b      	b.n	8009bee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	daf2      	bge.n	8009ba4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f043 0201 	orr.w	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009bda:	d901      	bls.n	8009be0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e006      	b.n	8009bee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d0f0      	beq.n	8009bce <USB_CoreReset+0x36>

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b086      	sub	sp, #24
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d119      	bne.n	8009c86 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d10a      	bne.n	8009c70 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c68:	f043 0304 	orr.w	r3, r3, #4
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	e014      	b.n	8009c9a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c7e:	f023 0304 	bic.w	r3, r3, #4
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	e009      	b.n	8009c9a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c94:	f023 0304 	bic.w	r3, r3, #4
 8009c98:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c9a:	2110      	movs	r1, #16
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff fe43 	bl	8009928 <USB_FlushTxFifo>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff fe6d 	bl	800998c <USB_FlushRxFifo>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	e015      	b.n	8009cee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	3301      	adds	r3, #1
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d3e3      	bcc.n	8009cc2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295
 8009d06:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a18      	ldr	r2, [pc, #96]	; (8009d6c <USB_HostInit+0x170>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d10b      	bne.n	8009d28 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <USB_HostInit+0x174>)
 8009d1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a14      	ldr	r2, [pc, #80]	; (8009d74 <USB_HostInit+0x178>)
 8009d22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009d26:	e009      	b.n	8009d3c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2280      	movs	r2, #128	; 0x80
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a11      	ldr	r2, [pc, #68]	; (8009d78 <USB_HostInit+0x17c>)
 8009d32:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a11      	ldr	r2, [pc, #68]	; (8009d7c <USB_HostInit+0x180>)
 8009d38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f043 0210 	orr.w	r2, r3, #16
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699a      	ldr	r2, [r3, #24]
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <USB_HostInit+0x184>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d68:	b004      	add	sp, #16
 8009d6a:	4770      	bx	lr
 8009d6c:	40040000 	.word	0x40040000
 8009d70:	01000200 	.word	0x01000200
 8009d74:	00e00300 	.word	0x00e00300
 8009d78:	00600080 	.word	0x00600080
 8009d7c:	004000e0 	.word	0x004000e0
 8009d80:	a3200008 	.word	0xa3200008

08009d84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d107      	bne.n	8009dd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009dd2:	6053      	str	r3, [r2, #4]
 8009dd4:	e00c      	b.n	8009df0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d107      	bne.n	8009dec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de2:	461a      	mov	r2, r3
 8009de4:	f241 7370 	movw	r3, #6000	; 0x1770
 8009de8:	6053      	str	r3, [r2, #4]
 8009dea:	e001      	b.n	8009df0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e1e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009e2e:	2064      	movs	r0, #100	; 0x64
 8009e30:	f7f7 ff40 	bl	8001cb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e40:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009e42:	200a      	movs	r0, #10
 8009e44:	f7f7 ff36 	bl	8001cb4 <HAL_Delay>

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d109      	bne.n	8009e96 <USB_DriveVbus+0x44>
 8009e82:	78fb      	ldrb	r3, [r7, #3]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d106      	bne.n	8009e96 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e94:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea0:	d109      	bne.n	8009eb6 <USB_DriveVbus+0x64>
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d106      	bne.n	8009eb6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eb4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	0c5b      	lsrs	r3, r3, #17
 8009ee2:	f003 0303 	and.w	r3, r3, #3
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	b29b      	uxth	r3, r3
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	461a      	mov	r2, r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	70fb      	strb	r3, [r7, #3]
 8009f26:	460b      	mov	r3, r1
 8009f28:	70bb      	strb	r3, [r7, #2]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f42:	461a      	mov	r2, r3
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
 8009f48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d87c      	bhi.n	800a04c <USB_HC_Init+0x138>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <USB_HC_Init+0x44>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	0800a00f 	.word	0x0800a00f
 8009f60:	08009f69 	.word	0x08009f69
 8009f64:	08009fd1 	.word	0x08009fd1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f74:	461a      	mov	r2, r3
 8009f76:	f240 439d 	movw	r3, #1181	; 0x49d
 8009f7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009f7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da10      	bge.n	8009fa6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	78fa      	ldrb	r2, [r7, #3]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fa2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009fa4:	e055      	b.n	800a052 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a6f      	ldr	r2, [pc, #444]	; (800a168 <USB_HC_Init+0x254>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d151      	bne.n	800a052 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	78fa      	ldrb	r2, [r7, #3]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009fcc:	60d3      	str	r3, [r2, #12]
      break;
 8009fce:	e040      	b.n	800a052 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f240 639d 	movw	r3, #1693	; 0x69d
 8009fe2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009fe4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	da34      	bge.n	800a056 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	440a      	add	r2, r1
 800a002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a00a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a00c:	e023      	b.n	800a056 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	4413      	add	r3, r2
 800a016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01a:	461a      	mov	r2, r3
 800a01c:	f240 2325 	movw	r3, #549	; 0x225
 800a020:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a022:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a026:	2b00      	cmp	r3, #0
 800a028:	da17      	bge.n	800a05a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	4413      	add	r3, r2
 800a032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	0151      	lsls	r1, r2, #5
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	440a      	add	r2, r1
 800a040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a044:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a048:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a04a:	e006      	b.n	800a05a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	77fb      	strb	r3, [r7, #31]
      break;
 800a050:	e004      	b.n	800a05c <USB_HC_Init+0x148>
      break;
 800a052:	bf00      	nop
 800a054:	e002      	b.n	800a05c <USB_HC_Init+0x148>
      break;
 800a056:	bf00      	nop
 800a058:	e000      	b.n	800a05c <USB_HC_Init+0x148>
      break;
 800a05a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a05c:	78fb      	ldrb	r3, [r7, #3]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	4413      	add	r3, r2
 800a064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a068:	461a      	mov	r2, r3
 800a06a:	2300      	movs	r3, #0
 800a06c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	4413      	add	r3, r2
 800a076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	78fa      	ldrb	r2, [r7, #3]
 800a07e:	0151      	lsls	r1, r2, #5
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	440a      	add	r2, r1
 800a084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a088:	f043 0302 	orr.w	r3, r3, #2
 800a08c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	2101      	movs	r1, #1
 800a09e:	fa01 f303 	lsl.w	r3, r1, r3
 800a0a2:	6939      	ldr	r1, [r7, #16]
 800a0a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a0b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	da03      	bge.n	800a0c8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a0c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	e001      	b.n	800a0cc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff fef9 	bl	8009ec4 <USB_GetHostSpeed>
 800a0d2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a0d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d106      	bne.n	800a0ea <USB_HC_Init+0x1d6>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d003      	beq.n	800a0ea <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a0e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	e001      	b.n	800a0ee <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0ee:	787b      	ldrb	r3, [r7, #1]
 800a0f0:	059b      	lsls	r3, r3, #22
 800a0f2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a0f6:	78bb      	ldrb	r3, [r7, #2]
 800a0f8:	02db      	lsls	r3, r3, #11
 800a0fa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0fe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a100:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a104:	049b      	lsls	r3, r3, #18
 800a106:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a10a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a10c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a10e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a112:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	431a      	orrs	r2, r3
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	440a      	add	r2, r1
 800a124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a12c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a12e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a132:	2b03      	cmp	r3, #3
 800a134:	d003      	beq.n	800a13e <USB_HC_Init+0x22a>
 800a136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d10f      	bne.n	800a15e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	4413      	add	r3, r2
 800a146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	440a      	add	r2, r1
 800a154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a15c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a15e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	40040000 	.word	0x40040000

0800a16c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08c      	sub	sp, #48	; 0x30
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a184:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a188:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4a5d      	ldr	r2, [pc, #372]	; (800a304 <USB_HC_StartXfer+0x198>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d12f      	bne.n	800a1f2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d11c      	bne.n	800a1d2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	7c9b      	ldrb	r3, [r3, #18]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <USB_HC_StartXfer+0x3c>
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	7c9b      	ldrb	r3, [r3, #18]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d124      	bne.n	800a1f2 <USB_HC_StartXfer+0x86>
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	799b      	ldrb	r3, [r3, #6]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d120      	bne.n	800a1f2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ce:	60d3      	str	r3, [r2, #12]
 800a1d0:	e00f      	b.n	800a1f2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	791b      	ldrb	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10b      	bne.n	800a1f2 <USB_HC_StartXfer+0x86>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	795b      	ldrb	r3, [r3, #5]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d107      	bne.n	800a1f2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 fb6b 	bl	800a8c4 <USB_DoPing>
        return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e232      	b.n	800a658 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	799b      	ldrb	r3, [r3, #6]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d158      	bne.n	800a2ac <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	8a92      	ldrh	r2, [r2, #20]
 800a20c:	fb03 f202 	mul.w	r2, r3, r2
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	61da      	str	r2, [r3, #28]
 800a214:	e07c      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	7c9b      	ldrb	r3, [r3, #18]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d130      	bne.n	800a280 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	2bbc      	cmp	r3, #188	; 0xbc
 800a224:	d918      	bls.n	800a258 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	8a9b      	ldrh	r3, [r3, #20]
 800a22a:	461a      	mov	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	69da      	ldr	r2, [r3, #28]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d003      	beq.n	800a248 <USB_HC_StartXfer+0xdc>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b02      	cmp	r3, #2
 800a246:	d103      	bne.n	800a250 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2202      	movs	r2, #2
 800a24c:	60da      	str	r2, [r3, #12]
 800a24e:	e05f      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2201      	movs	r2, #1
 800a254:	60da      	str	r2, [r3, #12]
 800a256:	e05b      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d007      	beq.n	800a278 <USB_HC_StartXfer+0x10c>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d003      	beq.n	800a278 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2204      	movs	r2, #4
 800a274:	60da      	str	r2, [r3, #12]
 800a276:	e04b      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2203      	movs	r2, #3
 800a27c:	60da      	str	r2, [r3, #12]
 800a27e:	e047      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d10d      	bne.n	800a2a2 <USB_HC_StartXfer+0x136>
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	8a92      	ldrh	r2, [r2, #20]
 800a28e:	4293      	cmp	r3, r2
 800a290:	d907      	bls.n	800a2a2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	8a92      	ldrh	r2, [r2, #20]
 800a298:	fb03 f202 	mul.w	r2, r3, r2
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	61da      	str	r2, [r3, #28]
 800a2a0:	e036      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6a1a      	ldr	r2, [r3, #32]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	61da      	str	r2, [r3, #28]
 800a2aa:	e031      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d018      	beq.n	800a2e6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	8a92      	ldrh	r2, [r2, #20]
 800a2bc:	4413      	add	r3, r2
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	8a92      	ldrh	r2, [r2, #20]
 800a2c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800a2ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a2cc:	8b7b      	ldrh	r3, [r7, #26]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d90b      	bls.n	800a2ea <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a2d2:	8b7b      	ldrh	r3, [r7, #26]
 800a2d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a2d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	8a92      	ldrh	r2, [r2, #20]
 800a2dc:	fb03 f202 	mul.w	r2, r3, r2
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	61da      	str	r2, [r3, #28]
 800a2e4:	e001      	b.n	800a2ea <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	78db      	ldrb	r3, [r3, #3]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00a      	beq.n	800a308 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a2f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	8a92      	ldrh	r2, [r2, #20]
 800a2f8:	fb03 f202 	mul.w	r2, r3, r2
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	61da      	str	r2, [r3, #28]
 800a300:	e006      	b.n	800a310 <USB_HC_StartXfer+0x1a4>
 800a302:	bf00      	nop
 800a304:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6a1a      	ldr	r2, [r3, #32]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	69db      	ldr	r3, [r3, #28]
 800a314:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a31a:	04d9      	lsls	r1, r3, #19
 800a31c:	4ba3      	ldr	r3, [pc, #652]	; (800a5ac <USB_HC_StartXfer+0x440>)
 800a31e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a320:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	7d9b      	ldrb	r3, [r3, #22]
 800a326:	075b      	lsls	r3, r3, #29
 800a328:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a32c:	69f9      	ldr	r1, [r7, #28]
 800a32e:	0148      	lsls	r0, r1, #5
 800a330:	6a39      	ldr	r1, [r7, #32]
 800a332:	4401      	add	r1, r0
 800a334:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a338:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a33a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d009      	beq.n	800a356 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6999      	ldr	r1, [r3, #24]
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a352:	460a      	mov	r2, r1
 800a354:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	bf0c      	ite	eq
 800a366:	2301      	moveq	r3, #1
 800a368:	2300      	movne	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	4413      	add	r3, r2
 800a376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	0151      	lsls	r1, r2, #5
 800a380:	6a3a      	ldr	r2, [r7, #32]
 800a382:	440a      	add	r2, r1
 800a384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a388:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a38c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	4413      	add	r3, r2
 800a396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	7e7b      	ldrb	r3, [r7, #25]
 800a39e:	075b      	lsls	r3, r3, #29
 800a3a0:	69f9      	ldr	r1, [r7, #28]
 800a3a2:	0148      	lsls	r0, r1, #5
 800a3a4:	6a39      	ldr	r1, [r7, #32]
 800a3a6:	4401      	add	r1, r0
 800a3a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	799b      	ldrb	r3, [r3, #6]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	f040 80c3 	bne.w	800a540 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	7c5b      	ldrb	r3, [r3, #17]
 800a3be:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	0151      	lsls	r1, r2, #5
 800a3ca:	6a3a      	ldr	r2, [r7, #32]
 800a3cc:	440a      	add	r2, r1
 800a3ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a3d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a3d6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	0151      	lsls	r1, r2, #5
 800a3ea:	6a3a      	ldr	r2, [r7, #32]
 800a3ec:	440a      	add	r2, r1
 800a3ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a3f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	79db      	ldrb	r3, [r3, #7]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d123      	bne.n	800a448 <USB_HC_StartXfer+0x2dc>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	78db      	ldrb	r3, [r3, #3]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11f      	bne.n	800a448 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	69fa      	ldr	r2, [r7, #28]
 800a418:	0151      	lsls	r1, r2, #5
 800a41a:	6a3a      	ldr	r2, [r7, #32]
 800a41c:	440a      	add	r2, r1
 800a41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a426:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	0151      	lsls	r1, r2, #5
 800a43a:	6a3a      	ldr	r2, [r7, #32]
 800a43c:	440a      	add	r2, r1
 800a43e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a446:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	7c9b      	ldrb	r3, [r3, #18]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d003      	beq.n	800a458 <USB_HC_StartXfer+0x2ec>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	7c9b      	ldrb	r3, [r3, #18]
 800a454:	2b03      	cmp	r3, #3
 800a456:	d117      	bne.n	800a488 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d113      	bne.n	800a488 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	78db      	ldrb	r3, [r3, #3]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d10f      	bne.n	800a488 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	0151      	lsls	r1, r2, #5
 800a47a:	6a3a      	ldr	r2, [r7, #32]
 800a47c:	440a      	add	r2, r1
 800a47e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a486:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	7c9b      	ldrb	r3, [r3, #18]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d162      	bne.n	800a556 <USB_HC_StartXfer+0x3ea>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	78db      	ldrb	r3, [r3, #3]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d15e      	bne.n	800a556 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d858      	bhi.n	800a554 <USB_HC_StartXfer+0x3e8>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <USB_HC_StartXfer+0x33c>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4b9 	.word	0x0800a4b9
 800a4ac:	0800a4db 	.word	0x0800a4db
 800a4b0:	0800a4fd 	.word	0x0800a4fd
 800a4b4:	0800a51f 	.word	0x0800a51f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	0151      	lsls	r1, r2, #5
 800a4ca:	6a3a      	ldr	r2, [r7, #32]
 800a4cc:	440a      	add	r2, r1
 800a4ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4d6:	6053      	str	r3, [r2, #4]
          break;
 800a4d8:	e03d      	b.n	800a556 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	69fa      	ldr	r2, [r7, #28]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	6a3a      	ldr	r2, [r7, #32]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4f4:	f043 030e 	orr.w	r3, r3, #14
 800a4f8:	6053      	str	r3, [r2, #4]
          break;
 800a4fa:	e02c      	b.n	800a556 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	4413      	add	r3, r2
 800a504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	0151      	lsls	r1, r2, #5
 800a50e:	6a3a      	ldr	r2, [r7, #32]
 800a510:	440a      	add	r2, r1
 800a512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a51a:	6053      	str	r3, [r2, #4]
          break;
 800a51c:	e01b      	b.n	800a556 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	4413      	add	r3, r2
 800a526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	69fa      	ldr	r2, [r7, #28]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	6a3a      	ldr	r2, [r7, #32]
 800a532:	440a      	add	r2, r1
 800a534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a53c:	6053      	str	r3, [r2, #4]
          break;
 800a53e:	e00a      	b.n	800a556 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	4413      	add	r3, r2
 800a548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a54c:	461a      	mov	r2, r3
 800a54e:	2300      	movs	r3, #0
 800a550:	6053      	str	r3, [r2, #4]
 800a552:	e000      	b.n	800a556 <USB_HC_StartXfer+0x3ea>
          break;
 800a554:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a56c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	78db      	ldrb	r3, [r3, #3]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a57c:	613b      	str	r3, [r7, #16]
 800a57e:	e003      	b.n	800a588 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a586:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a58e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	4413      	add	r3, r2
 800a598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a59c:	461a      	mov	r2, r3
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e055      	b.n	800a658 <USB_HC_StartXfer+0x4ec>
 800a5ac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	78db      	ldrb	r3, [r3, #3]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d14e      	bne.n	800a656 <USB_HC_StartXfer+0x4ea>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d04a      	beq.n	800a656 <USB_HC_StartXfer+0x4ea>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	79db      	ldrb	r3, [r3, #7]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d146      	bne.n	800a656 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	7c9b      	ldrb	r3, [r3, #18]
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	d831      	bhi.n	800a634 <USB_HC_StartXfer+0x4c8>
 800a5d0:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <USB_HC_StartXfer+0x46c>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a60d 	.word	0x0800a60d
 800a5e0:	0800a5e9 	.word	0x0800a5e9
 800a5e4:	0800a60d 	.word	0x0800a60d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	3303      	adds	r3, #3
 800a5ee:	089b      	lsrs	r3, r3, #2
 800a5f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a5f2:	8afa      	ldrh	r2, [r7, #22]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d91c      	bls.n	800a638 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	f043 0220 	orr.w	r2, r3, #32
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	619a      	str	r2, [r3, #24]
        }
        break;
 800a60a:	e015      	b.n	800a638 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	3303      	adds	r3, #3
 800a612:	089b      	lsrs	r3, r3, #2
 800a614:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a616:	8afa      	ldrh	r2, [r7, #22]
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	b29b      	uxth	r3, r3
 800a622:	429a      	cmp	r2, r3
 800a624:	d90a      	bls.n	800a63c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	619a      	str	r2, [r3, #24]
        }
        break;
 800a632:	e003      	b.n	800a63c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a634:	bf00      	nop
 800a636:	e002      	b.n	800a63e <USB_HC_StartXfer+0x4d2>
        break;
 800a638:	bf00      	nop
 800a63a:	e000      	b.n	800a63e <USB_HC_StartXfer+0x4d2>
        break;
 800a63c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	6999      	ldr	r1, [r3, #24]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	785a      	ldrb	r2, [r3, #1]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2000      	movs	r0, #0
 800a64e:	9000      	str	r0, [sp, #0]
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7ff f9c9 	bl	80099e8 <USB_WritePacket>
  }

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3728      	adds	r7, #40	; 0x28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	b29b      	uxth	r3, r3
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a682:	b480      	push	{r7}
 800a684:	b089      	sub	sp, #36	; 0x24
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	0c9b      	lsrs	r3, r3, #18
 800a6aa:	f003 0303 	and.w	r3, r3, #3
 800a6ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	0fdb      	lsrs	r3, r3, #31
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	0fdb      	lsrs	r3, r3, #31
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b20      	cmp	r3, #32
 800a6e6:	d10d      	bne.n	800a704 <USB_HC_Halt+0x82>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10a      	bne.n	800a704 <USB_HC_Halt+0x82>
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d005      	beq.n	800a700 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d002      	beq.n	800a700 <USB_HC_Halt+0x7e>
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d101      	bne.n	800a704 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	e0d8      	b.n	800a8b6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <USB_HC_Halt+0x8e>
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d173      	bne.n	800a7f8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	4413      	add	r3, r2
 800a718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	0151      	lsls	r1, r2, #5
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	440a      	add	r2, r1
 800a726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a72a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a72e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f003 0320 	and.w	r3, r3, #32
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d14a      	bne.n	800a7d2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d133      	bne.n	800a7b0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a766:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	0151      	lsls	r1, r2, #5
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	440a      	add	r2, r1
 800a77e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a786:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a794:	d82e      	bhi.n	800a7f4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7ac:	d0ec      	beq.n	800a788 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a7ae:	e081      	b.n	800a8b4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a7d0:	e070      	b.n	800a8b4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a7f2:	e05f      	b.n	800a8b4 <USB_HC_Halt+0x232>
            break;
 800a7f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a7f6:	e05d      	b.n	800a8b4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	0151      	lsls	r1, r2, #5
 800a80a:	69fa      	ldr	r2, [r7, #28]
 800a80c:	440a      	add	r2, r1
 800a80e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a816:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d133      	bne.n	800a890 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	015a      	lsls	r2, r3, #5
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	0151      	lsls	r1, r2, #5
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	440a      	add	r2, r1
 800a83e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a842:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a846:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a866:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	3301      	adds	r3, #1
 800a86c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a874:	d81d      	bhi.n	800a8b2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a88c:	d0ec      	beq.n	800a868 <USB_HC_Halt+0x1e6>
 800a88e:	e011      	b.n	800a8b4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	015a      	lsls	r2, r3, #5
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	4413      	add	r3, r2
 800a898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	0151      	lsls	r1, r2, #5
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	440a      	add	r2, r1
 800a8a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	e000      	b.n	800a8b4 <USB_HC_Halt+0x232>
          break;
 800a8b2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3724      	adds	r7, #36	; 0x24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
	...

0800a8c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a8d4:	78fb      	ldrb	r3, [r7, #3]
 800a8d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	04da      	lsls	r2, r3, #19
 800a8e0:	4b15      	ldr	r3, [pc, #84]	; (800a938 <USB_DoPing+0x74>)
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	0151      	lsls	r1, r2, #5
 800a8e8:	697a      	ldr	r2, [r7, #20]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a90c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a914:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a922:	461a      	mov	r2, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	1ff80000 	.word	0x1ff80000

0800a93c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7fe ff8c 	bl	800986e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a956:	2110      	movs	r1, #16
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7fe ffe5 	bl	8009928 <USB_FlushTxFifo>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff f80f 	bl	800998c <USB_FlushRxFifo>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a978:	2300      	movs	r3, #0
 800a97a:	61bb      	str	r3, [r7, #24]
 800a97c:	e01f      	b.n	800a9be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	4413      	add	r3, r2
 800a986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a994:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	61bb      	str	r3, [r7, #24]
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b0f      	cmp	r3, #15
 800a9c2:	d9dc      	bls.n	800a97e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	61bb      	str	r3, [r7, #24]
 800a9c8:	e034      	b.n	800aa34 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fe:	461a      	mov	r2, r3
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3301      	adds	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa10:	d80c      	bhi.n	800aa2c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa28:	d0ec      	beq.n	800aa04 <USB_StopHost+0xc8>
 800aa2a:	e000      	b.n	800aa2e <USB_StopHost+0xf2>
        break;
 800aa2c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	3301      	adds	r3, #1
 800aa32:	61bb      	str	r3, [r7, #24]
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	2b0f      	cmp	r3, #15
 800aa38:	d9c7      	bls.n	800a9ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa40:	461a      	mov	r2, r3
 800aa42:	f04f 33ff 	mov.w	r3, #4294967295
 800aa46:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7fe fefb 	bl	800984c <USB_EnableGlobalInt>

  return ret;
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3720      	adds	r7, #32
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa64:	4904      	ldr	r1, [pc, #16]	; (800aa78 <MX_FATFS_Init+0x18>)
 800aa66:	4805      	ldr	r0, [pc, #20]	; (800aa7c <MX_FATFS_Init+0x1c>)
 800aa68:	f002 fba2 	bl	800d1b0 <FATFS_LinkDriver>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <MX_FATFS_Init+0x20>)
 800aa72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa74:	bf00      	nop
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000630 	.word	0x20000630
 800aa7c:	2000000c 	.word	0x2000000c
 800aa80:	2000062c 	.word	0x2000062c

0800aa84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800aa8e:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <USER_initialize+0x24>)
 800aa90:	2201      	movs	r2, #1
 800aa92:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <USER_initialize+0x24>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20000009 	.word	0x20000009

0800aaac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800aab6:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <USER_status+0x24>)
 800aab8:	2201      	movs	r2, #1
 800aaba:	701a      	strb	r2, [r3, #0]
    return Stat;
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <USER_status+0x24>)
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20000009 	.word	0x20000009

0800aad4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	607a      	str	r2, [r7, #4]
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800aae4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ab02:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	603a      	str	r2, [r7, #0]
 800ab1a:	71fb      	strb	r3, [r7, #7]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
    return res;
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800ab32:	b480      	push	{r7}
 800ab34:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800ab36:	bf00      	nop
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b089      	sub	sp, #36	; 0x24
 800ab44:	af04      	add	r7, sp, #16
 800ab46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ab48:	2301      	movs	r3, #1
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	2102      	movs	r1, #2
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fcd7 	bl	800b502 <USBH_FindInterface>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	2bff      	cmp	r3, #255	; 0xff
 800ab5c:	d002      	beq.n	800ab64 <USBH_CDC_InterfaceInit+0x24>
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d901      	bls.n	800ab68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ab64:	2302      	movs	r3, #2
 800ab66:	e13d      	b.n	800ade4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fcac 	bl	800b4ca <USBH_SelectInterface>
 800ab72:	4603      	mov	r3, r0
 800ab74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	e131      	b.n	800ade4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ab86:	2050      	movs	r0, #80	; 0x50
 800ab88:	f005 f8bc 	bl	800fd04 <malloc>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d101      	bne.n	800aba4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800aba0:	2302      	movs	r3, #2
 800aba2:	e11f      	b.n	800ade4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800aba4:	2250      	movs	r2, #80	; 0x50
 800aba6:	2100      	movs	r1, #0
 800aba8:	68b8      	ldr	r0, [r7, #8]
 800abaa:	f005 fc25 	bl	80103f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	211a      	movs	r1, #26
 800abb4:	fb01 f303 	mul.w	r3, r1, r3
 800abb8:	4413      	add	r3, r2
 800abba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	b25b      	sxtb	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da15      	bge.n	800abf2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	211a      	movs	r1, #26
 800abcc:	fb01 f303 	mul.w	r3, r1, r3
 800abd0:	4413      	add	r3, r2
 800abd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800abd6:	781a      	ldrb	r2, [r3, #0]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	211a      	movs	r1, #26
 800abe2:	fb01 f303 	mul.w	r3, r1, r3
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800abec:	881a      	ldrh	r2, [r3, #0]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	4619      	mov	r1, r3
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f002 fa2a 	bl	800d052 <USBH_AllocPipe>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	7858      	ldrb	r0, [r3, #1]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	8952      	ldrh	r2, [r2, #10]
 800ac1e:	9202      	str	r2, [sp, #8]
 800ac20:	2203      	movs	r2, #3
 800ac22:	9201      	str	r2, [sp, #4]
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	4623      	mov	r3, r4
 800ac28:	4602      	mov	r2, r0
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f002 f9e2 	bl	800cff4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	2200      	movs	r2, #0
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f004 ffdd 	bl	800fbf8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2200      	movs	r2, #0
 800ac42:	210a      	movs	r1, #10
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fc5c 	bl	800b502 <USBH_FindInterface>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	2bff      	cmp	r3, #255	; 0xff
 800ac52:	d002      	beq.n	800ac5a <USBH_CDC_InterfaceInit+0x11a>
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d901      	bls.n	800ac5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	e0c2      	b.n	800ade4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	211a      	movs	r1, #26
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	4413      	add	r3, r2
 800ac6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b25b      	sxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da16      	bge.n	800aca4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	211a      	movs	r1, #26
 800ac7c:	fb01 f303 	mul.w	r3, r1, r3
 800ac80:	4413      	add	r3, r2
 800ac82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	211a      	movs	r1, #26
 800ac92:	fb01 f303 	mul.w	r3, r1, r3
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ac9c:	881a      	ldrh	r2, [r3, #0]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	835a      	strh	r2, [r3, #26]
 800aca2:	e015      	b.n	800acd0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	211a      	movs	r1, #26
 800acaa:	fb01 f303 	mul.w	r3, r1, r3
 800acae:	4413      	add	r3, r2
 800acb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	211a      	movs	r1, #26
 800acc0:	fb01 f303 	mul.w	r3, r1, r3
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800acca:	881a      	ldrh	r2, [r3, #0]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	211a      	movs	r1, #26
 800acd6:	fb01 f303 	mul.w	r3, r1, r3
 800acda:	4413      	add	r3, r2
 800acdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	b25b      	sxtb	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	da16      	bge.n	800ad16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	211a      	movs	r1, #26
 800acee:	fb01 f303 	mul.w	r3, r1, r3
 800acf2:	4413      	add	r3, r2
 800acf4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800acf8:	781a      	ldrb	r2, [r3, #0]
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	211a      	movs	r1, #26
 800ad04:	fb01 f303 	mul.w	r3, r1, r3
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ad0e:	881a      	ldrh	r2, [r3, #0]
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	835a      	strh	r2, [r3, #26]
 800ad14:	e015      	b.n	800ad42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	211a      	movs	r1, #26
 800ad1c:	fb01 f303 	mul.w	r3, r1, r3
 800ad20:	4413      	add	r3, r2
 800ad22:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ad26:	781a      	ldrb	r2, [r3, #0]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	211a      	movs	r1, #26
 800ad32:	fb01 f303 	mul.w	r3, r1, r3
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ad3c:	881a      	ldrh	r2, [r3, #0]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	7b9b      	ldrb	r3, [r3, #14]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f002 f982 	bl	800d052 <USBH_AllocPipe>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	461a      	mov	r2, r3
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	7bdb      	ldrb	r3, [r3, #15]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f002 f978 	bl	800d052 <USBH_AllocPipe>
 800ad62:	4603      	mov	r3, r0
 800ad64:	461a      	mov	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	7b59      	ldrb	r1, [r3, #13]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	7b98      	ldrb	r0, [r3, #14]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	8b12      	ldrh	r2, [r2, #24]
 800ad82:	9202      	str	r2, [sp, #8]
 800ad84:	2202      	movs	r2, #2
 800ad86:	9201      	str	r2, [sp, #4]
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	4623      	mov	r3, r4
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f002 f930 	bl	800cff4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	7b19      	ldrb	r1, [r3, #12]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	7bd8      	ldrb	r0, [r3, #15]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	8b52      	ldrh	r2, [r2, #26]
 800adac:	9202      	str	r2, [sp, #8]
 800adae:	2202      	movs	r2, #2
 800adb0:	9201      	str	r2, [sp, #4]
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4623      	mov	r3, r4
 800adb6:	4602      	mov	r2, r0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f002 f91b 	bl	800cff4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	7b5b      	ldrb	r3, [r3, #13]
 800adca:	2200      	movs	r2, #0
 800adcc:	4619      	mov	r1, r3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f004 ff12 	bl	800fbf8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	7b1b      	ldrb	r3, [r3, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f004 ff0b 	bl	800fbf8 <USBH_LL_SetToggle>

  return USBH_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd90      	pop	{r4, r7, pc}

0800adec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00e      	beq.n	800ae24 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f002 f910 	bl	800d032 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f002 f93b 	bl	800d094 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	7b1b      	ldrb	r3, [r3, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00e      	beq.n	800ae4a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	7b1b      	ldrb	r3, [r3, #12]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f002 f8fd 	bl	800d032 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	7b1b      	ldrb	r3, [r3, #12]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f002 f928 	bl	800d094 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	7b5b      	ldrb	r3, [r3, #13]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00e      	beq.n	800ae70 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	7b5b      	ldrb	r3, [r3, #13]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f002 f8ea 	bl	800d032 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	7b5b      	ldrb	r3, [r3, #13]
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f002 f915 	bl	800d094 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f004 ff45 	bl	800fd14 <free>
    phost->pActiveClass->pData = 0U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae90:	2200      	movs	r2, #0
 800ae92:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3340      	adds	r3, #64	; 0x40
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f8b1 	bl	800b01e <GetLineCoding>
 800aebc:	4603      	mov	r3, r0
 800aebe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aecc:	2102      	movs	r1, #2
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aed2:	7afb      	ldrb	r3, [r7, #11]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aee4:	2301      	movs	r3, #1
 800aee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	d877      	bhi.n	800aff0 <USBH_CDC_Process+0x114>
 800af00:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <USBH_CDC_Process+0x2c>)
 800af02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af06:	bf00      	nop
 800af08:	0800af1d 	.word	0x0800af1d
 800af0c:	0800af23 	.word	0x0800af23
 800af10:	0800af53 	.word	0x0800af53
 800af14:	0800afc7 	.word	0x0800afc7
 800af18:	0800afd5 	.word	0x0800afd5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
      break;
 800af20:	e06d      	b.n	800affe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f897 	bl	800b05c <SetLineCoding>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d104      	bne.n	800af42 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2202      	movs	r2, #2
 800af3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800af40:	e058      	b.n	800aff4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d055      	beq.n	800aff4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2204      	movs	r2, #4
 800af4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800af50:	e050      	b.n	800aff4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	3340      	adds	r3, #64	; 0x40
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f860 	bl	800b01e <GetLineCoding>
 800af5e:	4603      	mov	r3, r0
 800af60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d126      	bne.n	800afb6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af7a:	791b      	ldrb	r3, [r3, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d13b      	bne.n	800aff8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af8a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d133      	bne.n	800aff8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af9a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d12b      	bne.n	800aff8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800afaa:	429a      	cmp	r2, r3
 800afac:	d124      	bne.n	800aff8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f982 	bl	800b2b8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800afb4:	e020      	b.n	800aff8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d01d      	beq.n	800aff8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2204      	movs	r2, #4
 800afc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800afc4:	e018      	b.n	800aff8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f867 	bl	800b09a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f8f6 	bl	800b1be <CDC_ProcessReception>
      break;
 800afd2:	e014      	b.n	800affe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800afd4:	2100      	movs	r1, #0
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 f98e 	bl	800c2f8 <USBH_ClrFeature>
 800afdc:	4603      	mov	r3, r0
 800afde:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10a      	bne.n	800affc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800afee:	e005      	b.n	800affc <USBH_CDC_Process+0x120>

    default:
      break;
 800aff0:	bf00      	nop
 800aff2:	e004      	b.n	800affe <USBH_CDC_Process+0x122>
      break;
 800aff4:	bf00      	nop
 800aff6:	e002      	b.n	800affe <USBH_CDC_Process+0x122>
      break;
 800aff8:	bf00      	nop
 800affa:	e000      	b.n	800affe <USBH_CDC_Process+0x122>
      break;
 800affc:	bf00      	nop

  }

  return status;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	22a1      	movs	r2, #161	; 0xa1
 800b02c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2221      	movs	r2, #33	; 0x21
 800b032:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2207      	movs	r2, #7
 800b044:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2207      	movs	r2, #7
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fc8f 	bl	800c970 <USBH_CtlReq>
 800b052:	4603      	mov	r3, r0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2221      	movs	r2, #33	; 0x21
 800b06a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2220      	movs	r2, #32
 800b070:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2207      	movs	r2, #7
 800b082:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	2207      	movs	r2, #7
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 fc70 	bl	800c970 <USBH_CtlReq>
 800b090:	4603      	mov	r3, r0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b086      	sub	sp, #24
 800b09e:	af02      	add	r7, sp, #8
 800b0a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d002      	beq.n	800b0c0 <CDC_ProcessTransmission+0x26>
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d023      	beq.n	800b106 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b0be:	e07a      	b.n	800b1b6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	8b12      	ldrh	r2, [r2, #24]
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d90b      	bls.n	800b0e4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	69d9      	ldr	r1, [r3, #28]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8b1a      	ldrh	r2, [r3, #24]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	7b5b      	ldrb	r3, [r3, #13]
 800b0d8:	2001      	movs	r0, #1
 800b0da:	9000      	str	r0, [sp, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 ff46 	bl	800cf6e <USBH_BulkSendData>
 800b0e2:	e00b      	b.n	800b0fc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	7b5b      	ldrb	r3, [r3, #13]
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	9000      	str	r0, [sp, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f001 ff39 	bl	800cf6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2202      	movs	r2, #2
 800b100:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b104:	e057      	b.n	800b1b6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	7b5b      	ldrb	r3, [r3, #13]
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f004 fd49 	bl	800fba4 <USBH_LL_GetURBState>
 800b112:	4603      	mov	r3, r0
 800b114:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b116:	7afb      	ldrb	r3, [r7, #11]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d136      	bne.n	800b18a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	8b12      	ldrh	r2, [r2, #24]
 800b124:	4293      	cmp	r3, r2
 800b126:	d90e      	bls.n	800b146 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	8b12      	ldrh	r2, [r2, #24]
 800b130:	1a9a      	subs	r2, r3, r2
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	8b12      	ldrh	r2, [r2, #24]
 800b13e:	441a      	add	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	61da      	str	r2, [r3, #28]
 800b144:	e002      	b.n	800b14c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	d004      	beq.n	800b15e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b15c:	e006      	b.n	800b16c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f892 	bl	800b290 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2204      	movs	r2, #4
 800b170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b180:	2200      	movs	r2, #0
 800b182:	4619      	mov	r1, r3
 800b184:	f002 f8dc 	bl	800d340 <osMessagePut>
      break;
 800b188:	e014      	b.n	800b1b4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d111      	bne.n	800b1b4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2204      	movs	r2, #4
 800b19c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	f002 f8c6 	bl	800d340 <osMessagePut>
      break;
 800b1b4:	bf00      	nop
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b086      	sub	sp, #24
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d002      	beq.n	800b1e4 <CDC_ProcessReception+0x26>
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d00e      	beq.n	800b200 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b1e2:	e051      	b.n	800b288 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	6a19      	ldr	r1, [r3, #32]
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	8b5a      	ldrh	r2, [r3, #26]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	7b1b      	ldrb	r3, [r3, #12]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f001 fee1 	bl	800cfb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2204      	movs	r2, #4
 800b1fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b1fe:	e043      	b.n	800b288 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	7b1b      	ldrb	r3, [r3, #12]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f004 fccc 	bl	800fba4 <USBH_LL_GetURBState>
 800b20c:	4603      	mov	r3, r0
 800b20e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b210:	7cfb      	ldrb	r3, [r7, #19]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d137      	bne.n	800b286 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	7b1b      	ldrb	r3, [r3, #12]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f004 fc2f 	bl	800fa80 <USBH_LL_GetLastXferSize>
 800b222:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d016      	beq.n	800b25c <CDC_ProcessReception+0x9e>
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	8b5b      	ldrh	r3, [r3, #26]
 800b232:	461a      	mov	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4293      	cmp	r3, r2
 800b238:	d910      	bls.n	800b25c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	6a1a      	ldr	r2, [r3, #32]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	441a      	add	r2, r3
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2203      	movs	r2, #3
 800b256:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b25a:	e006      	b.n	800b26a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f81d 	bl	800b2a4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2204      	movs	r2, #4
 800b26e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b27e:	2200      	movs	r2, #0
 800b280:	4619      	mov	r1, r3
 800b282:	f002 f85d 	bl	800d340 <osMessagePut>
      break;
 800b286:	bf00      	nop
  }
}
 800b288:	bf00      	nop
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b2cc:	b5b0      	push	{r4, r5, r7, lr}
 800b2ce:	b090      	sub	sp, #64	; 0x40
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e04d      	b.n	800b380 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	79fa      	ldrb	r2, [r7, #7]
 800b2e8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 f847 	bl	800b390 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b330:	4b15      	ldr	r3, [pc, #84]	; (800b388 <USBH_Init+0xbc>)
 800b332:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800b33c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f001 ffd4 	bl	800d2f0 <osMessageCreate>
 800b348:	4602      	mov	r2, r0
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b350:	4b0e      	ldr	r3, [pc, #56]	; (800b38c <USBH_Init+0xc0>)
 800b352:	f107 0414 	add.w	r4, r7, #20
 800b356:	461d      	mov	r5, r3
 800b358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b35c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800b364:	f107 0314 	add.w	r3, r7, #20
 800b368:	68f9      	ldr	r1, [r7, #12]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f001 ff60 	bl	800d230 <osThreadCreate>
 800b370:	4602      	mov	r2, r0
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f004 facd 	bl	800f918 <USBH_LL_Init>

  return USBH_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3740      	adds	r7, #64	; 0x40
 800b384:	46bd      	mov	sp, r7
 800b386:	bdb0      	pop	{r4, r5, r7, pc}
 800b388:	08010ee4 	.word	0x08010ee4
 800b38c:	08010f00 	.word	0x08010f00

0800b390 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e009      	b.n	800b3b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	33e0      	adds	r3, #224	; 0xe0
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b0f      	cmp	r3, #15
 800b3ba:	d9f2      	bls.n	800b3a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	e009      	b.n	800b3d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3dc:	d3f1      	bcc.n	800b3c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2240      	movs	r2, #64	; 0x40
 800b402:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	331c      	adds	r3, #28
 800b42e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b432:	2100      	movs	r1, #0
 800b434:	4618      	mov	r0, r3
 800b436:	f004 ffdf 	bl	80103f8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b440:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b444:	2100      	movs	r1, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f004 ffd6 	bl	80103f8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b452:	2212      	movs	r2, #18
 800b454:	2100      	movs	r1, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f004 ffce 	bl	80103f8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b462:	223e      	movs	r2, #62	; 0x3e
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f004 ffc6 	bl	80103f8 <memset>

  return USBH_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b476:	b480      	push	{r7}
 800b478:	b085      	sub	sp, #20
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d016      	beq.n	800b4b8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10e      	bne.n	800b4b2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b49a:	1c59      	adds	r1, r3, #1
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	33de      	adds	r3, #222	; 0xde
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
 800b4b0:	e004      	b.n	800b4bc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	73fb      	strb	r3, [r7, #15]
 800b4b6:	e001      	b.n	800b4bc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d204      	bcs.n	800b4f0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	78fa      	ldrb	r2, [r7, #3]
 800b4ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b4ee:	e001      	b.n	800b4f4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b502:	b480      	push	{r7}
 800b504:	b087      	sub	sp, #28
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	4608      	mov	r0, r1
 800b50c:	4611      	mov	r1, r2
 800b50e:	461a      	mov	r2, r3
 800b510:	4603      	mov	r3, r0
 800b512:	70fb      	strb	r3, [r7, #3]
 800b514:	460b      	mov	r3, r1
 800b516:	70bb      	strb	r3, [r7, #2]
 800b518:	4613      	mov	r3, r2
 800b51a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b52a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b52c:	e025      	b.n	800b57a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	221a      	movs	r2, #26
 800b532:	fb02 f303 	mul.w	r3, r2, r3
 800b536:	3308      	adds	r3, #8
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4413      	add	r3, r2
 800b53c:	3302      	adds	r3, #2
 800b53e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	795b      	ldrb	r3, [r3, #5]
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	429a      	cmp	r2, r3
 800b548:	d002      	beq.n	800b550 <USBH_FindInterface+0x4e>
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	2bff      	cmp	r3, #255	; 0xff
 800b54e:	d111      	bne.n	800b574 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b554:	78ba      	ldrb	r2, [r7, #2]
 800b556:	429a      	cmp	r2, r3
 800b558:	d002      	beq.n	800b560 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b55a:	78bb      	ldrb	r3, [r7, #2]
 800b55c:	2bff      	cmp	r3, #255	; 0xff
 800b55e:	d109      	bne.n	800b574 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b564:	787a      	ldrb	r2, [r7, #1]
 800b566:	429a      	cmp	r2, r3
 800b568:	d002      	beq.n	800b570 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b56a:	787b      	ldrb	r3, [r7, #1]
 800b56c:	2bff      	cmp	r3, #255	; 0xff
 800b56e:	d101      	bne.n	800b574 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	e006      	b.n	800b582 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	3301      	adds	r3, #1
 800b578:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d9d6      	bls.n	800b52e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b580:	23ff      	movs	r3, #255	; 0xff
}
 800b582:	4618      	mov	r0, r3
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f004 f9fa 	bl	800f990 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b59c:	2101      	movs	r1, #1
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f004 fb13 	bl	800fbca <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af04      	add	r7, sp, #16
 800b5b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d102      	bne.n	800b5d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b0b      	cmp	r3, #11
 800b5da:	f200 8247 	bhi.w	800ba6c <USBH_Process+0x4bc>
 800b5de:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <USBH_Process+0x34>)
 800b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e4:	0800b615 	.word	0x0800b615
 800b5e8:	0800b663 	.word	0x0800b663
 800b5ec:	0800b6e7 	.word	0x0800b6e7
 800b5f0:	0800b9eb 	.word	0x0800b9eb
 800b5f4:	0800ba6d 	.word	0x0800ba6d
 800b5f8:	0800b7a7 	.word	0x0800b7a7
 800b5fc:	0800b975 	.word	0x0800b975
 800b600:	0800b7f9 	.word	0x0800b7f9
 800b604:	0800b835 	.word	0x0800b835
 800b608:	0800b86f 	.word	0x0800b86f
 800b60c:	0800b8cd 	.word	0x0800b8cd
 800b610:	0800b9d3 	.word	0x0800b9d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 8227 	beq.w	800ba70 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b628:	20c8      	movs	r0, #200	; 0xc8
 800b62a:	f004 fb18 	bl	800fc5e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f004 fa0b 	bl	800fa4a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b658:	2200      	movs	r2, #0
 800b65a:	4619      	mov	r1, r3
 800b65c:	f001 fe70 	bl	800d340 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b660:	e206      	b.n	800ba70 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d107      	bne.n	800b67c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	e025      	b.n	800b6c8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b686:	d914      	bls.n	800b6b2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b68e:	3301      	adds	r3, #1
 800b690:	b2da      	uxtb	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d903      	bls.n	800b6aa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	220d      	movs	r2, #13
 800b6a6:	701a      	strb	r2, [r3, #0]
 800b6a8:	e00e      	b.n	800b6c8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	e00a      	b.n	800b6c8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b6b8:	f103 020a 	add.w	r2, r3, #10
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b6c2:	200a      	movs	r0, #10
 800b6c4:	f004 facb 	bl	800fc5e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f001 fe2e 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6e4:	e1cb      	b.n	800ba7e <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d005      	beq.n	800b6fc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6f6:	2104      	movs	r1, #4
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b6fc:	2064      	movs	r0, #100	; 0x64
 800b6fe:	f004 faae 	bl	800fc5e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f004 f97a 	bl	800f9fc <USBH_LL_GetSpeed>
 800b708:	4603      	mov	r3, r0
 800b70a:	461a      	mov	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2205      	movs	r2, #5
 800b716:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b718:	2100      	movs	r1, #0
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 fc99 	bl	800d052 <USBH_AllocPipe>
 800b720:	4603      	mov	r3, r0
 800b722:	461a      	mov	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b728:	2180      	movs	r1, #128	; 0x80
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 fc91 	bl	800d052 <USBH_AllocPipe>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7919      	ldrb	r1, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b74c:	b292      	uxth	r2, r2
 800b74e:	9202      	str	r2, [sp, #8]
 800b750:	2200      	movs	r2, #0
 800b752:	9201      	str	r2, [sp, #4]
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	4603      	mov	r3, r0
 800b758:	2280      	movs	r2, #128	; 0x80
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f001 fc4a 	bl	800cff4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	7959      	ldrb	r1, [r3, #5]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b774:	b292      	uxth	r2, r2
 800b776:	9202      	str	r2, [sp, #8]
 800b778:	2200      	movs	r2, #0
 800b77a:	9201      	str	r2, [sp, #4]
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	4603      	mov	r3, r0
 800b780:	2200      	movs	r2, #0
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f001 fc36 	bl	800cff4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b79c:	2200      	movs	r2, #0
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f001 fdce 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7a4:	e16b      	b.n	800ba7e <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f96e 	bl	800ba88 <USBH_HandleEnum>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f040 815d 	bne.w	800ba74 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d103      	bne.n	800b7d4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2208      	movs	r2, #8
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	e002      	b.n	800b7da <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2207      	movs	r2, #7
 800b7d8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2205      	movs	r2, #5
 800b7de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f001 fda5 	bl	800d340 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b7f6:	e13d      	b.n	800ba74 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f000 813a 	beq.w	800ba78 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b80a:	2101      	movs	r1, #1
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2208      	movs	r2, #8
 800b814:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2205      	movs	r2, #5
 800b81a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b82a:	2200      	movs	r2, #0
 800b82c:	4619      	mov	r1, r3
 800b82e:	f001 fd87 	bl	800d340 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b832:	e121      	b.n	800ba78 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fd13 	bl	800c26a <USBH_SetCfg>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2209      	movs	r2, #9
 800b84e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b864:	2200      	movs	r2, #0
 800b866:	4619      	mov	r1, r3
 800b868:	f001 fd6a 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b86c:	e107      	b.n	800ba7e <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b874:	f003 0320 	and.w	r3, r3, #32
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d015      	beq.n	800b8a8 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b87c:	2101      	movs	r1, #1
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fd16 	bl	800c2b0 <USBH_SetFeature>
 800b884:	4603      	mov	r3, r0
 800b886:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d103      	bne.n	800b898 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	220a      	movs	r2, #10
 800b894:	701a      	strb	r2, [r3, #0]
 800b896:	e00a      	b.n	800b8ae <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d106      	bne.n	800b8ae <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	220a      	movs	r2, #10
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	e002      	b.n	800b8ae <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	f001 fd3b 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8ca:	e0d8      	b.n	800ba7e <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d03f      	beq.n	800b956 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
 800b8e2:	e016      	b.n	800b912 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b8e4:	7bfa      	ldrb	r2, [r7, #15]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	32de      	adds	r2, #222	; 0xde
 800b8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ee:	791a      	ldrb	r2, [r3, #4]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d108      	bne.n	800b90c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b8fa:	7bfa      	ldrb	r2, [r7, #15]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	32de      	adds	r2, #222	; 0xde
 800b900:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b90a:	e005      	b.n	800b918 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	3301      	adds	r3, #1
 800b910:	73fb      	strb	r3, [r7, #15]
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0e5      	beq.n	800b8e4 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d016      	beq.n	800b950 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d109      	bne.n	800b948 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2206      	movs	r2, #6
 800b938:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b940:	2103      	movs	r1, #3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
 800b946:	e006      	b.n	800b956 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	220d      	movs	r2, #13
 800b94c:	701a      	strb	r2, [r3, #0]
 800b94e:	e002      	b.n	800b956 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	220d      	movs	r2, #13
 800b954:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2205      	movs	r2, #5
 800b95a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b96a:	2200      	movs	r2, #0
 800b96c:	4619      	mov	r1, r3
 800b96e:	f001 fce7 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b972:	e084      	b.n	800ba7e <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d017      	beq.n	800b9ae <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	4798      	blx	r3
 800b98a:	4603      	mov	r3, r0
 800b98c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d103      	bne.n	800b99e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	220b      	movs	r2, #11
 800b99a:	701a      	strb	r2, [r3, #0]
 800b99c:	e00a      	b.n	800b9b4 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d106      	bne.n	800b9b4 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	220d      	movs	r2, #13
 800b9aa:	701a      	strb	r2, [r3, #0]
 800b9ac:	e002      	b.n	800b9b4 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	220d      	movs	r2, #13
 800b9b2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2205      	movs	r2, #5
 800b9b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	f001 fcb8 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b9d0:	e055      	b.n	800ba7e <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d04f      	beq.n	800ba7c <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
      }
      break;
 800b9e8:	e048      	b.n	800ba7c <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff fccc 	bl	800b390 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d009      	beq.n	800ba16 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d005      	beq.n	800ba2c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba26:	2105      	movs	r1, #5
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d107      	bne.n	800ba48 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7ff fda4 	bl	800b58e <USBH_Start>
 800ba46:	e002      	b.n	800ba4e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f003 ffa1 	bl	800f990 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba62:	2200      	movs	r2, #0
 800ba64:	4619      	mov	r1, r3
 800ba66:	f001 fc6b 	bl	800d340 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba6a:	e008      	b.n	800ba7e <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800ba6c:	bf00      	nop
 800ba6e:	e006      	b.n	800ba7e <USBH_Process+0x4ce>
      break;
 800ba70:	bf00      	nop
 800ba72:	e004      	b.n	800ba7e <USBH_Process+0x4ce>
      break;
 800ba74:	bf00      	nop
 800ba76:	e002      	b.n	800ba7e <USBH_Process+0x4ce>
    break;
 800ba78:	bf00      	nop
 800ba7a:	e000      	b.n	800ba7e <USBH_Process+0x4ce>
      break;
 800ba7c:	bf00      	nop
  }
  return USBH_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ba94:	2301      	movs	r3, #1
 800ba96:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	785b      	ldrb	r3, [r3, #1]
 800ba9c:	2b07      	cmp	r3, #7
 800ba9e:	f200 8208 	bhi.w	800beb2 <USBH_HandleEnum+0x42a>
 800baa2:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <USBH_HandleEnum+0x20>)
 800baa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa8:	0800bac9 	.word	0x0800bac9
 800baac:	0800bb87 	.word	0x0800bb87
 800bab0:	0800bbf1 	.word	0x0800bbf1
 800bab4:	0800bc7f 	.word	0x0800bc7f
 800bab8:	0800bce9 	.word	0x0800bce9
 800babc:	0800bd59 	.word	0x0800bd59
 800bac0:	0800bdf5 	.word	0x0800bdf5
 800bac4:	0800be73 	.word	0x0800be73
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bac8:	2108      	movs	r1, #8
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 faea 	bl	800c0a4 <USBH_Get_DevDesc>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d130      	bne.n	800bb3c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	7919      	ldrb	r1, [r3, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bafe:	b292      	uxth	r2, r2
 800bb00:	9202      	str	r2, [sp, #8]
 800bb02:	2200      	movs	r2, #0
 800bb04:	9201      	str	r2, [sp, #4]
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2280      	movs	r2, #128	; 0x80
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 fa71 	bl	800cff4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7959      	ldrb	r1, [r3, #5]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb26:	b292      	uxth	r2, r2
 800bb28:	9202      	str	r2, [sp, #8]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	9201      	str	r2, [sp, #4]
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	4603      	mov	r3, r0
 800bb32:	2200      	movs	r2, #0
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 fa5d 	bl	800cff4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bb3a:	e1bc      	b.n	800beb6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	f040 81b9 	bne.w	800beb6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d903      	bls.n	800bb66 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	220d      	movs	r2, #13
 800bb62:	701a      	strb	r2, [r3, #0]
      break;
 800bb64:	e1a7      	b.n	800beb6 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	795b      	ldrb	r3, [r3, #5]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f001 fa91 	bl	800d094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	791b      	ldrb	r3, [r3, #4]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f001 fa8b 	bl	800d094 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	701a      	strb	r2, [r3, #0]
      break;
 800bb84:	e197      	b.n	800beb6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bb86:	2112      	movs	r1, #18
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fa8b 	bl	800c0a4 <USBH_Get_DevDesc>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d103      	bne.n	800bba0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bb9e:	e18c      	b.n	800beba <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	f040 8189 	bne.w	800beba <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbae:	3301      	adds	r3, #1
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	d903      	bls.n	800bbca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	220d      	movs	r2, #13
 800bbc6:	701a      	strb	r2, [r3, #0]
      break;
 800bbc8:	e177      	b.n	800beba <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	795b      	ldrb	r3, [r3, #5]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f001 fa5f 	bl	800d094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	791b      	ldrb	r3, [r3, #4]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f001 fa59 	bl	800d094 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	701a      	strb	r2, [r3, #0]
      break;
 800bbee:	e164      	b.n	800beba <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fb15 	bl	800c222 <USBH_SetAddress>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d132      	bne.n	800bc68 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bc02:	2002      	movs	r0, #2
 800bc04:	f004 f82b 	bl	800fc5e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2203      	movs	r2, #3
 800bc14:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	7919      	ldrb	r1, [r3, #4]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	9202      	str	r2, [sp, #8]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	4603      	mov	r3, r0
 800bc36:	2280      	movs	r2, #128	; 0x80
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f001 f9db 	bl	800cff4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7959      	ldrb	r1, [r3, #5]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc52:	b292      	uxth	r2, r2
 800bc54:	9202      	str	r2, [sp, #8]
 800bc56:	2200      	movs	r2, #0
 800bc58:	9201      	str	r2, [sp, #4]
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2200      	movs	r2, #0
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 f9c7 	bl	800cff4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bc66:	e12a      	b.n	800bebe <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	f040 8127 	bne.w	800bebe <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	220d      	movs	r2, #13
 800bc74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	705a      	strb	r2, [r3, #1]
      break;
 800bc7c:	e11f      	b.n	800bebe <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bc7e:	2109      	movs	r1, #9
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa3b 	bl	800c0fc <USBH_Get_CfgDesc>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d103      	bne.n	800bc98 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2204      	movs	r2, #4
 800bc94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc96:	e114      	b.n	800bec2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	f040 8111 	bne.w	800bec2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bca6:	3301      	adds	r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d903      	bls.n	800bcc2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	220d      	movs	r2, #13
 800bcbe:	701a      	strb	r2, [r3, #0]
      break;
 800bcc0:	e0ff      	b.n	800bec2 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	795b      	ldrb	r3, [r3, #5]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f001 f9e3 	bl	800d094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	791b      	ldrb	r3, [r3, #4]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 f9dd 	bl	800d094 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
      break;
 800bce6:	e0ec      	b.n	800bec2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fa03 	bl	800c0fc <USBH_Get_CfgDesc>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bcfa:	7bbb      	ldrb	r3, [r7, #14]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d103      	bne.n	800bd08 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2205      	movs	r2, #5
 800bd04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd06:	e0de      	b.n	800bec6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	f040 80db 	bne.w	800bec6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd16:	3301      	adds	r3, #1
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d903      	bls.n	800bd32 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	220d      	movs	r2, #13
 800bd2e:	701a      	strb	r2, [r3, #0]
      break;
 800bd30:	e0c9      	b.n	800bec6 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	795b      	ldrb	r3, [r3, #5]
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f001 f9ab 	bl	800d094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	791b      	ldrb	r3, [r3, #4]
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 f9a5 	bl	800d094 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
      break;
 800bd56:	e0b6      	b.n	800bec6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d036      	beq.n	800bdd0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bd6e:	23ff      	movs	r3, #255	; 0xff
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f9ed 	bl	800c150 <USBH_Get_StringDesc>
 800bd76:	4603      	mov	r3, r0
 800bd78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d111      	bne.n	800bda4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2206      	movs	r2, #6
 800bd84:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2205      	movs	r2, #5
 800bd8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	f001 facf 	bl	800d340 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bda2:	e092      	b.n	800beca <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	f040 808f 	bne.w	800beca <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2206      	movs	r2, #6
 800bdb0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4619      	mov	r1, r3
 800bdca:	f001 fab9 	bl	800d340 <osMessagePut>
      break;
 800bdce:	e07c      	b.n	800beca <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2206      	movs	r2, #6
 800bdd4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2205      	movs	r2, #5
 800bdda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bdea:	2200      	movs	r2, #0
 800bdec:	4619      	mov	r1, r3
 800bdee:	f001 faa7 	bl	800d340 <osMessagePut>
      break;
 800bdf2:	e06a      	b.n	800beca <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d027      	beq.n	800be4e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be0a:	23ff      	movs	r3, #255	; 0xff
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f99f 	bl	800c150 <USBH_Get_StringDesc>
 800be12:	4603      	mov	r3, r0
 800be14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d103      	bne.n	800be24 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2207      	movs	r2, #7
 800be20:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be22:	e054      	b.n	800bece <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	2b03      	cmp	r3, #3
 800be28:	d151      	bne.n	800bece <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2207      	movs	r2, #7
 800be2e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2205      	movs	r2, #5
 800be34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be44:	2200      	movs	r2, #0
 800be46:	4619      	mov	r1, r3
 800be48:	f001 fa7a 	bl	800d340 <osMessagePut>
      break;
 800be4c:	e03f      	b.n	800bece <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2207      	movs	r2, #7
 800be52:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2205      	movs	r2, #5
 800be58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be68:	2200      	movs	r2, #0
 800be6a:	4619      	mov	r1, r3
 800be6c:	f001 fa68 	bl	800d340 <osMessagePut>
      break;
 800be70:	e02d      	b.n	800bece <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d017      	beq.n	800beac <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be88:	23ff      	movs	r3, #255	; 0xff
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f960 	bl	800c150 <USBH_Get_StringDesc>
 800be90:	4603      	mov	r3, r0
 800be92:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be94:	7bbb      	ldrb	r3, [r7, #14]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800be9e:	e018      	b.n	800bed2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d115      	bne.n	800bed2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]
      break;
 800beaa:	e012      	b.n	800bed2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]
      break;
 800beb0:	e00f      	b.n	800bed2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800beb2:	bf00      	nop
 800beb4:	e00e      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800beb6:	bf00      	nop
 800beb8:	e00c      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800beba:	bf00      	nop
 800bebc:	e00a      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800bebe:	bf00      	nop
 800bec0:	e008      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800bec2:	bf00      	nop
 800bec4:	e006      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800bec6:	bf00      	nop
 800bec8:	e004      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800beca:	bf00      	nop
 800becc:	e002      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800bece:	bf00      	nop
 800bed0:	e000      	b.n	800bed4 <USBH_HandleEnum+0x44c>
      break;
 800bed2:	bf00      	nop
  }
  return Status;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop

0800bee0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bef2:	bf00      	nop
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f804 	bl	800bf22 <USBH_HandleSof>
}
 800bf1a:	bf00      	nop
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b0b      	cmp	r3, #11
 800bf32:	d10a      	bne.n	800bf4a <USBH_HandleSof+0x28>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d005      	beq.n	800bf4a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	4798      	blx	r3
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf76:	2200      	movs	r2, #0
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f001 f9e1 	bl	800d340 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bf7e:	bf00      	nop
}
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bf96:	bf00      	nop
}
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4619      	mov	r1, r3
 800bfda:	f001 f9b1 	bl	800d340 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f003 fcdc 	bl	800f9c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	791b      	ldrb	r3, [r3, #4]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f001 f83d 	bl	800d094 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	795b      	ldrb	r3, [r3, #5]
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f001 f837 	bl	800d094 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c03a:	2200      	movs	r2, #0
 800c03c:	4619      	mov	r1, r3
 800c03e:	f001 f97f 	bl	800d340 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800c05a:	f107 030c 	add.w	r3, r7, #12
 800c05e:	f04f 32ff 	mov.w	r2, #4294967295
 800c062:	4618      	mov	r0, r3
 800c064:	f001 f9ac 	bl	800d3c0 <osMessageGet>
    if (event.status == osEventMessage)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b10      	cmp	r3, #16
 800c06c:	d1f2      	bne.n	800c054 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff fa9e 	bl	800b5b0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c074:	e7ee      	b.n	800c054 <USBH_Process_OS+0x8>

0800c076 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c092:	2200      	movs	r2, #0
 800c094:	4619      	mov	r1, r3
 800c096:	f001 f953 	bl	800d340 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c0b0:	887b      	ldrh	r3, [r7, #2]
 800c0b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0b6:	d901      	bls.n	800c0bc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e01b      	b.n	800c0f4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0c2:	887b      	ldrh	r3, [r7, #2]
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f872 	bl	800c1b8 <USBH_GetDescriptor>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d109      	bne.n	800c0f2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0e4:	887a      	ldrh	r2, [r7, #2]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f929 	bl	800c340 <USBH_ParseDevDesc>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af02      	add	r7, sp, #8
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	331c      	adds	r3, #28
 800c10c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c10e:	887b      	ldrh	r3, [r7, #2]
 800c110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c114:	d901      	bls.n	800c11a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c116:	2303      	movs	r3, #3
 800c118:	e016      	b.n	800c148 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c11a:	887b      	ldrh	r3, [r7, #2]
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c124:	2100      	movs	r1, #0
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f846 	bl	800c1b8 <USBH_GetDescriptor>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d107      	bne.n	800c146 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c136:	887b      	ldrh	r3, [r7, #2]
 800c138:	461a      	mov	r2, r3
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f9b3 	bl	800c4a8 <USBH_ParseCfgDesc>
 800c142:	4603      	mov	r3, r0
 800c144:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	607a      	str	r2, [r7, #4]
 800c15a:	461a      	mov	r2, r3
 800c15c:	460b      	mov	r3, r1
 800c15e:	72fb      	strb	r3, [r7, #11]
 800c160:	4613      	mov	r3, r2
 800c162:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c164:	893b      	ldrh	r3, [r7, #8]
 800c166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c16a:	d802      	bhi.n	800c172 <USBH_Get_StringDesc+0x22>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c172:	2303      	movs	r3, #3
 800c174:	e01c      	b.n	800c1b0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c17e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c186:	893b      	ldrh	r3, [r7, #8]
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	460b      	mov	r3, r1
 800c18c:	2100      	movs	r1, #0
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 f812 	bl	800c1b8 <USBH_GetDescriptor>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d107      	bne.n	800c1ae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c1a4:	893a      	ldrh	r2, [r7, #8]
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 fb93 	bl	800c8d4 <USBH_ParseStringDesc>
  }

  return status;
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	607b      	str	r3, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	72fb      	strb	r3, [r7, #11]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	789b      	ldrb	r3, [r3, #2]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d11c      	bne.n	800c20c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
 800c1d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2206      	movs	r2, #6
 800c1e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	893a      	ldrh	r2, [r7, #8]
 800c1e8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c1ea:	893b      	ldrh	r3, [r7, #8]
 800c1ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c1f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1f4:	d104      	bne.n	800c200 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f240 4209 	movw	r2, #1033	; 0x409
 800c1fc:	829a      	strh	r2, [r3, #20]
 800c1fe:	e002      	b.n	800c206 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	8b3a      	ldrh	r2, [r7, #24]
 800c20a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c20c:	8b3b      	ldrh	r3, [r7, #24]
 800c20e:	461a      	mov	r2, r3
 800c210:	6879      	ldr	r1, [r7, #4]
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 fbac 	bl	800c970 <USBH_CtlReq>
 800c218:	4603      	mov	r3, r0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	789b      	ldrb	r3, [r3, #2]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d10f      	bne.n	800c256 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2205      	movs	r2, #5
 800c240:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c242:	78fb      	ldrb	r3, [r7, #3]
 800c244:	b29a      	uxth	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c256:	2200      	movs	r2, #0
 800c258:	2100      	movs	r1, #0
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fb88 	bl	800c970 <USBH_CtlReq>
 800c260:	4603      	mov	r3, r0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b082      	sub	sp, #8
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	789b      	ldrb	r3, [r3, #2]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d10e      	bne.n	800c29c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2209      	movs	r2, #9
 800c288:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	887a      	ldrh	r2, [r7, #2]
 800c28e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c29c:	2200      	movs	r2, #0
 800c29e:	2100      	movs	r1, #0
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fb65 	bl	800c970 <USBH_CtlReq>
 800c2a6:	4603      	mov	r3, r0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	789b      	ldrb	r3, [r3, #2]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d10f      	bne.n	800c2e4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2203      	movs	r2, #3
 800c2ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fb41 	bl	800c970 <USBH_CtlReq>
 800c2ee:	4603      	mov	r3, r0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	789b      	ldrb	r3, [r3, #2]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d10f      	bne.n	800c32c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c31e:	78fb      	ldrb	r3, [r7, #3]
 800c320:	b29a      	uxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c32c:	2200      	movs	r2, #0
 800c32e:	2100      	movs	r1, #0
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fb1d 	bl	800c970 <USBH_CtlReq>
 800c336:	4603      	mov	r3, r0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c340:	b480      	push	{r7}
 800c342:	b087      	sub	sp, #28
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	4613      	mov	r3, r2
 800c34c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c354:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c360:	2302      	movs	r3, #2
 800c362:	e098      	b.n	800c496 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	785a      	ldrb	r2, [r3, #1]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	3302      	adds	r3, #2
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	3303      	adds	r3, #3
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	b29b      	uxth	r3, r3
 800c388:	4313      	orrs	r3, r2
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	791a      	ldrb	r2, [r3, #4]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	795a      	ldrb	r2, [r3, #5]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	799a      	ldrb	r2, [r3, #6]
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	79da      	ldrb	r2, [r3, #7]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d11b      	bne.n	800c3fc <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	79db      	ldrb	r3, [r3, #7]
 800c3c8:	2b20      	cmp	r3, #32
 800c3ca:	dc0f      	bgt.n	800c3ec <USBH_ParseDevDesc+0xac>
 800c3cc:	2b08      	cmp	r3, #8
 800c3ce:	db0f      	blt.n	800c3f0 <USBH_ParseDevDesc+0xb0>
 800c3d0:	3b08      	subs	r3, #8
 800c3d2:	4a34      	ldr	r2, [pc, #208]	; (800c4a4 <USBH_ParseDevDesc+0x164>)
 800c3d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bf14      	ite	ne
 800c3e0:	2301      	movne	r3, #1
 800c3e2:	2300      	moveq	r3, #0
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <USBH_ParseDevDesc+0xb8>
 800c3ea:	e001      	b.n	800c3f0 <USBH_ParseDevDesc+0xb0>
 800c3ec:	2b40      	cmp	r3, #64	; 0x40
 800c3ee:	d003      	beq.n	800c3f8 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	2208      	movs	r2, #8
 800c3f4:	71da      	strb	r2, [r3, #7]
        break;
 800c3f6:	e000      	b.n	800c3fa <USBH_ParseDevDesc+0xba>
        break;
 800c3f8:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c3fa:	e00e      	b.n	800c41a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c402:	2b02      	cmp	r3, #2
 800c404:	d107      	bne.n	800c416 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	79db      	ldrb	r3, [r3, #7]
 800c40a:	2b08      	cmp	r3, #8
 800c40c:	d005      	beq.n	800c41a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	2208      	movs	r2, #8
 800c412:	71da      	strb	r2, [r3, #7]
 800c414:	e001      	b.n	800c41a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c416:	2303      	movs	r3, #3
 800c418:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c41a:	88fb      	ldrh	r3, [r7, #6]
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	d939      	bls.n	800c494 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	3308      	adds	r3, #8
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b29a      	uxth	r2, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	3309      	adds	r3, #9
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	b29b      	uxth	r3, r3
 800c430:	021b      	lsls	r3, r3, #8
 800c432:	b29b      	uxth	r3, r3
 800c434:	4313      	orrs	r3, r2
 800c436:	b29a      	uxth	r2, r3
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	330a      	adds	r3, #10
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	b29a      	uxth	r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	330b      	adds	r3, #11
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	021b      	lsls	r3, r3, #8
 800c44e:	b29b      	uxth	r3, r3
 800c450:	4313      	orrs	r3, r2
 800c452:	b29a      	uxth	r2, r3
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	330c      	adds	r3, #12
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	330d      	adds	r3, #13
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	b29b      	uxth	r3, r3
 800c468:	021b      	lsls	r3, r3, #8
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	4313      	orrs	r3, r2
 800c46e:	b29a      	uxth	r2, r3
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	7b9a      	ldrb	r2, [r3, #14]
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	7bda      	ldrb	r2, [r3, #15]
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	7c1a      	ldrb	r2, [r3, #16]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	7c5a      	ldrb	r2, [r3, #17]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
}
 800c496:	4618      	mov	r0, r3
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	01000101 	.word	0x01000101

0800c4a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08c      	sub	sp, #48	; 0x30
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c4bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	e0db      	b.n	800c692 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	6a3b      	ldr	r3, [r7, #32]
 800c4e4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	785a      	ldrb	r2, [r3, #1]
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	3302      	adds	r3, #2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	3303      	adds	r3, #3
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	021b      	lsls	r3, r3, #8
 800c500:	b29b      	uxth	r3, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	b29b      	uxth	r3, r3
 800c506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50a:	bf28      	it	cs
 800c50c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c510:	b29a      	uxth	r2, r3
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	791a      	ldrb	r2, [r3, #4]
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	795a      	ldrb	r2, [r3, #5]
 800c522:	6a3b      	ldr	r3, [r7, #32]
 800c524:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	799a      	ldrb	r2, [r3, #6]
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	79da      	ldrb	r2, [r3, #7]
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	7a1a      	ldrb	r2, [r3, #8]
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	2b09      	cmp	r3, #9
 800c544:	d002      	beq.n	800c54c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	2209      	movs	r2, #9
 800c54a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	2b09      	cmp	r3, #9
 800c550:	f240 809d 	bls.w	800c68e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c554:	2309      	movs	r3, #9
 800c556:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c55c:	e081      	b.n	800c662 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c55e:	f107 0316 	add.w	r3, r7, #22
 800c562:	4619      	mov	r1, r3
 800c564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c566:	f000 f9e8 	bl	800c93a <USBH_GetNextDesc>
 800c56a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	785b      	ldrb	r3, [r3, #1]
 800c570:	2b04      	cmp	r3, #4
 800c572:	d176      	bne.n	800c662 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b09      	cmp	r3, #9
 800c57a:	d002      	beq.n	800c582 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57e:	2209      	movs	r2, #9
 800c580:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c586:	221a      	movs	r2, #26
 800c588:	fb02 f303 	mul.w	r3, r2, r3
 800c58c:	3308      	adds	r3, #8
 800c58e:	6a3a      	ldr	r2, [r7, #32]
 800c590:	4413      	add	r3, r2
 800c592:	3302      	adds	r3, #2
 800c594:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c596:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c598:	69f8      	ldr	r0, [r7, #28]
 800c59a:	f000 f87e 	bl	800c69a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c5a8:	e043      	b.n	800c632 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c5aa:	f107 0316 	add.w	r3, r7, #22
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5b2:	f000 f9c2 	bl	800c93a <USBH_GetNextDesc>
 800c5b6:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	785b      	ldrb	r3, [r3, #1]
 800c5bc:	2b05      	cmp	r3, #5
 800c5be:	d138      	bne.n	800c632 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	795b      	ldrb	r3, [r3, #5]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d113      	bne.n	800c5f0 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d003      	beq.n	800c5d8 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	799b      	ldrb	r3, [r3, #6]
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	d10b      	bne.n	800c5f0 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	79db      	ldrb	r3, [r3, #7]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10b      	bne.n	800c5f8 <USBH_ParseCfgDesc+0x150>
 800c5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b09      	cmp	r3, #9
 800c5e6:	d007      	beq.n	800c5f8 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	2209      	movs	r2, #9
 800c5ec:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c5ee:	e003      	b.n	800c5f8 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	2207      	movs	r2, #7
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	e000      	b.n	800c5fa <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c5f8:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c602:	3201      	adds	r2, #1
 800c604:	00d2      	lsls	r2, r2, #3
 800c606:	211a      	movs	r1, #26
 800c608:	fb01 f303 	mul.w	r3, r1, r3
 800c60c:	4413      	add	r3, r2
 800c60e:	3308      	adds	r3, #8
 800c610:	6a3a      	ldr	r2, [r7, #32]
 800c612:	4413      	add	r3, r2
 800c614:	3304      	adds	r3, #4
 800c616:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c61a:	69b9      	ldr	r1, [r7, #24]
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 f870 	bl	800c702 <USBH_ParseEPDesc>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c628:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c62c:	3301      	adds	r3, #1
 800c62e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	791b      	ldrb	r3, [r3, #4]
 800c636:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d204      	bcs.n	800c648 <USBH_ParseCfgDesc+0x1a0>
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	885a      	ldrh	r2, [r3, #2]
 800c642:	8afb      	ldrh	r3, [r7, #22]
 800c644:	429a      	cmp	r2, r3
 800c646:	d8b0      	bhi.n	800c5aa <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	791b      	ldrb	r3, [r3, #4]
 800c64c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c650:	429a      	cmp	r2, r3
 800c652:	d201      	bcs.n	800c658 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c654:	2303      	movs	r3, #3
 800c656:	e01c      	b.n	800c692 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c65c:	3301      	adds	r3, #1
 800c65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c666:	2b01      	cmp	r3, #1
 800c668:	d805      	bhi.n	800c676 <USBH_ParseCfgDesc+0x1ce>
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	885a      	ldrh	r2, [r3, #2]
 800c66e:	8afb      	ldrh	r3, [r7, #22]
 800c670:	429a      	cmp	r2, r3
 800c672:	f63f af74 	bhi.w	800c55e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	791b      	ldrb	r3, [r3, #4]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	bf28      	it	cs
 800c67e:	2302      	movcs	r3, #2
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c686:	429a      	cmp	r2, r3
 800c688:	d201      	bcs.n	800c68e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e001      	b.n	800c692 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c68e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c692:	4618      	mov	r0, r3
 800c694:	3730      	adds	r7, #48	; 0x30
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781a      	ldrb	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	785a      	ldrb	r2, [r3, #1]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	789a      	ldrb	r2, [r3, #2]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	78da      	ldrb	r2, [r3, #3]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	bf28      	it	cs
 800c6ce:	2302      	movcs	r3, #2
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	795a      	ldrb	r2, [r3, #5]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	799a      	ldrb	r2, [r3, #6]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	79da      	ldrb	r2, [r3, #7]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	7a1a      	ldrb	r2, [r3, #8]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	721a      	strb	r2, [r3, #8]
}
 800c6f6:	bf00      	nop
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c702:	b480      	push	{r7}
 800c704:	b087      	sub	sp, #28
 800c706:	af00      	add	r7, sp, #0
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	781a      	ldrb	r2, [r3, #0]
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	785a      	ldrb	r2, [r3, #1]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	789a      	ldrb	r2, [r3, #2]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	78da      	ldrb	r2, [r3, #3]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3304      	adds	r3, #4
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	b29a      	uxth	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3305      	adds	r3, #5
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	b29b      	uxth	r3, r3
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	b29b      	uxth	r3, r3
 800c746:	4313      	orrs	r3, r2
 800c748:	b29a      	uxth	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	799a      	ldrb	r2, [r3, #6]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	889b      	ldrh	r3, [r3, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d009      	beq.n	800c772 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c766:	d804      	bhi.n	800c772 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c770:	d901      	bls.n	800c776 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c772:	2303      	movs	r3, #3
 800c774:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d136      	bne.n	800c7ee <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	78db      	ldrb	r3, [r3, #3]
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d108      	bne.n	800c79e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	889b      	ldrh	r3, [r3, #4]
 800c790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c794:	f240 8097 	bls.w	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c798:	2303      	movs	r3, #3
 800c79a:	75fb      	strb	r3, [r7, #23]
 800c79c:	e093      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	78db      	ldrb	r3, [r3, #3]
 800c7a2:	f003 0303 	and.w	r3, r3, #3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d107      	bne.n	800c7ba <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	889b      	ldrh	r3, [r3, #4]
 800c7ae:	2b40      	cmp	r3, #64	; 0x40
 800c7b0:	f240 8089 	bls.w	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	75fb      	strb	r3, [r7, #23]
 800c7b8:	e085      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	78db      	ldrb	r3, [r3, #3]
 800c7be:	f003 0303 	and.w	r3, r3, #3
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d005      	beq.n	800c7d2 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	78db      	ldrb	r3, [r3, #3]
 800c7ca:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d10a      	bne.n	800c7e8 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	799b      	ldrb	r3, [r3, #6]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <USBH_ParseEPDesc+0xe0>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	799b      	ldrb	r3, [r3, #6]
 800c7de:	2b10      	cmp	r3, #16
 800c7e0:	d970      	bls.n	800c8c4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c7e6:	e06d      	b.n	800c8c4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	75fb      	strb	r3, [r7, #23]
 800c7ec:	e06b      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d13c      	bne.n	800c872 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	78db      	ldrb	r3, [r3, #3]
 800c7fc:	f003 0303 	and.w	r3, r3, #3
 800c800:	2b02      	cmp	r3, #2
 800c802:	d005      	beq.n	800c810 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	78db      	ldrb	r3, [r3, #3]
 800c808:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d106      	bne.n	800c81e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	889b      	ldrh	r3, [r3, #4]
 800c814:	2b40      	cmp	r3, #64	; 0x40
 800c816:	d956      	bls.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c818:	2303      	movs	r3, #3
 800c81a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c81c:	e053      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	78db      	ldrb	r3, [r3, #3]
 800c822:	f003 0303 	and.w	r3, r3, #3
 800c826:	2b01      	cmp	r3, #1
 800c828:	d10e      	bne.n	800c848 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	799b      	ldrb	r3, [r3, #6]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d007      	beq.n	800c842 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c836:	2b10      	cmp	r3, #16
 800c838:	d803      	bhi.n	800c842 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c83e:	2b40      	cmp	r3, #64	; 0x40
 800c840:	d941      	bls.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c842:	2303      	movs	r3, #3
 800c844:	75fb      	strb	r3, [r7, #23]
 800c846:	e03e      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	78db      	ldrb	r3, [r3, #3]
 800c84c:	f003 0303 	and.w	r3, r3, #3
 800c850:	2b03      	cmp	r3, #3
 800c852:	d10b      	bne.n	800c86c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	799b      	ldrb	r3, [r3, #6]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d004      	beq.n	800c866 <USBH_ParseEPDesc+0x164>
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	889b      	ldrh	r3, [r3, #4]
 800c860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c864:	d32f      	bcc.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c866:	2303      	movs	r3, #3
 800c868:	75fb      	strb	r3, [r7, #23]
 800c86a:	e02c      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c86c:	2303      	movs	r3, #3
 800c86e:	75fb      	strb	r3, [r7, #23]
 800c870:	e029      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d120      	bne.n	800c8be <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	78db      	ldrb	r3, [r3, #3]
 800c880:	f003 0303 	and.w	r3, r3, #3
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	889b      	ldrh	r3, [r3, #4]
 800c88c:	2b08      	cmp	r3, #8
 800c88e:	d01a      	beq.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c890:	2303      	movs	r3, #3
 800c892:	75fb      	strb	r3, [r7, #23]
 800c894:	e017      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	78db      	ldrb	r3, [r3, #3]
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d10a      	bne.n	800c8b8 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	799b      	ldrb	r3, [r3, #6]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <USBH_ParseEPDesc+0x1b0>
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	889b      	ldrh	r3, [r3, #4]
 800c8ae:	2b08      	cmp	r3, #8
 800c8b0:	d909      	bls.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	75fb      	strb	r3, [r7, #23]
 800c8b6:	e006      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	75fb      	strb	r3, [r7, #23]
 800c8bc:	e003      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	75fb      	strb	r3, [r7, #23]
 800c8c2:	e000      	b.n	800c8c6 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c8c4:	bf00      	nop
  }

  return status;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	371c      	adds	r7, #28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d120      	bne.n	800c92e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	1e9a      	subs	r2, r3, #2
 800c8f2:	88fb      	ldrh	r3, [r7, #6]
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	bf28      	it	cs
 800c8f8:	4613      	movcs	r3, r2
 800c8fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3302      	adds	r3, #2
 800c900:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c902:	2300      	movs	r3, #0
 800c904:	82fb      	strh	r3, [r7, #22]
 800c906:	e00b      	b.n	800c920 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c908:	8afb      	ldrh	r3, [r7, #22]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4413      	add	r3, r2
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	3301      	adds	r3, #1
 800c918:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c91a:	8afb      	ldrh	r3, [r7, #22]
 800c91c:	3302      	adds	r3, #2
 800c91e:	82fb      	strh	r3, [r7, #22]
 800c920:	8afa      	ldrh	r2, [r7, #22]
 800c922:	8abb      	ldrh	r3, [r7, #20]
 800c924:	429a      	cmp	r2, r3
 800c926:	d3ef      	bcc.n	800c908 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
  }
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b085      	sub	sp, #20
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	881a      	ldrh	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	4413      	add	r3, r2
 800c950:	b29a      	uxth	r2, r3
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4413      	add	r3, r2
 800c960:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c962:	68fb      	ldr	r3, [r7, #12]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	4613      	mov	r3, r2
 800c97c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c97e:	2301      	movs	r3, #1
 800c980:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	789b      	ldrb	r3, [r3, #2]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d002      	beq.n	800c990 <USBH_CtlReq+0x20>
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d01d      	beq.n	800c9ca <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c98e:	e043      	b.n	800ca18 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	88fa      	ldrh	r2, [r7, #6]
 800c99a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2203      	movs	r2, #3
 800c9b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	f000 fcbc 	bl	800d340 <osMessagePut>
      break;
 800c9c8:	e026      	b.n	800ca18 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 f82a 	bl	800ca24 <USBH_HandleControl>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <USBH_CtlReq+0x70>
 800c9da:	7dfb      	ldrb	r3, [r7, #23]
 800c9dc:	2b03      	cmp	r3, #3
 800c9de:	d106      	bne.n	800c9ee <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	761a      	strb	r2, [r3, #24]
 800c9ec:	e005      	b.n	800c9fa <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d102      	bne.n	800c9fa <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2203      	movs	r2, #3
 800c9fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca0e:	2200      	movs	r2, #0
 800ca10:	4619      	mov	r1, r3
 800ca12:	f000 fc95 	bl	800d340 <osMessagePut>
      break;
 800ca16:	bf00      	nop
  }
  return status;
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
	...

0800ca24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af02      	add	r7, sp, #8
 800ca2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7e1b      	ldrb	r3, [r3, #24]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	2b0a      	cmp	r3, #10
 800ca3c:	f200 8229 	bhi.w	800ce92 <USBH_HandleControl+0x46e>
 800ca40:	a201      	add	r2, pc, #4	; (adr r2, 800ca48 <USBH_HandleControl+0x24>)
 800ca42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca46:	bf00      	nop
 800ca48:	0800ca75 	.word	0x0800ca75
 800ca4c:	0800ca8f 	.word	0x0800ca8f
 800ca50:	0800cb31 	.word	0x0800cb31
 800ca54:	0800cb57 	.word	0x0800cb57
 800ca58:	0800cbe3 	.word	0x0800cbe3
 800ca5c:	0800cc0d 	.word	0x0800cc0d
 800ca60:	0800cccf 	.word	0x0800cccf
 800ca64:	0800ccf1 	.word	0x0800ccf1
 800ca68:	0800cd83 	.word	0x0800cd83
 800ca6c:	0800cda9 	.word	0x0800cda9
 800ca70:	0800ce3b 	.word	0x0800ce3b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f103 0110 	add.w	r1, r3, #16
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	795b      	ldrb	r3, [r3, #5]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fa17 	bl	800ceb4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2202      	movs	r2, #2
 800ca8a:	761a      	strb	r2, [r3, #24]
      break;
 800ca8c:	e20c      	b.n	800cea8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	795b      	ldrb	r3, [r3, #5]
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f003 f885 	bl	800fba4 <USBH_LL_GetURBState>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ca9e:	7bbb      	ldrb	r3, [r7, #14]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d12c      	bne.n	800cafe <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7c1b      	ldrb	r3, [r3, #16]
 800caa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800caac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	8adb      	ldrh	r3, [r3, #22]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cab6:	7b7b      	ldrb	r3, [r7, #13]
 800cab8:	2b80      	cmp	r3, #128	; 0x80
 800caba:	d103      	bne.n	800cac4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2203      	movs	r2, #3
 800cac0:	761a      	strb	r2, [r3, #24]
 800cac2:	e00d      	b.n	800cae0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2205      	movs	r2, #5
 800cac8:	761a      	strb	r2, [r3, #24]
 800caca:	e009      	b.n	800cae0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cacc:	7b7b      	ldrb	r3, [r7, #13]
 800cace:	2b80      	cmp	r3, #128	; 0x80
 800cad0:	d103      	bne.n	800cada <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2209      	movs	r2, #9
 800cad6:	761a      	strb	r2, [r3, #24]
 800cad8:	e002      	b.n	800cae0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2207      	movs	r2, #7
 800cade:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2203      	movs	r2, #3
 800cae4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800caf4:	2200      	movs	r2, #0
 800caf6:	4619      	mov	r1, r3
 800caf8:	f000 fc22 	bl	800d340 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cafc:	e1cb      	b.n	800ce96 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d003      	beq.n	800cb0c <USBH_HandleControl+0xe8>
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	f040 81c5 	bne.w	800ce96 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	220b      	movs	r2, #11
 800cb10:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2203      	movs	r2, #3
 800cb16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb26:	2200      	movs	r2, #0
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f000 fc09 	bl	800d340 <osMessagePut>
      break;
 800cb2e:	e1b2      	b.n	800ce96 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6899      	ldr	r1, [r3, #8]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	899a      	ldrh	r2, [r3, #12]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	791b      	ldrb	r3, [r3, #4]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f9f2 	bl	800cf32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2204      	movs	r2, #4
 800cb52:	761a      	strb	r2, [r3, #24]
      break;
 800cb54:	e1a8      	b.n	800cea8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	791b      	ldrb	r3, [r3, #4]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f003 f821 	bl	800fba4 <USBH_LL_GetURBState>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d110      	bne.n	800cb8e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2209      	movs	r2, #9
 800cb70:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2203      	movs	r2, #3
 800cb76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb86:	2200      	movs	r2, #0
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f000 fbd9 	bl	800d340 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cb8e:	7bbb      	ldrb	r3, [r7, #14]
 800cb90:	2b05      	cmp	r3, #5
 800cb92:	d110      	bne.n	800cbb6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cb94:	2303      	movs	r3, #3
 800cb96:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2203      	movs	r2, #3
 800cb9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbac:	2200      	movs	r2, #0
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f000 fbc6 	bl	800d340 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cbb4:	e171      	b.n	800ce9a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800cbb6:	7bbb      	ldrb	r3, [r7, #14]
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	f040 816e 	bne.w	800ce9a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	220b      	movs	r2, #11
 800cbc2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2203      	movs	r2, #3
 800cbc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbd8:	2200      	movs	r2, #0
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f000 fbb0 	bl	800d340 <osMessagePut>
      break;
 800cbe0:	e15b      	b.n	800ce9a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6899      	ldr	r1, [r3, #8]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	899a      	ldrh	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	795b      	ldrb	r3, [r3, #5]
 800cbee:	2001      	movs	r0, #1
 800cbf0:	9000      	str	r0, [sp, #0]
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f978 	bl	800cee8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2206      	movs	r2, #6
 800cc08:	761a      	strb	r2, [r3, #24]
      break;
 800cc0a:	e14d      	b.n	800cea8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	795b      	ldrb	r3, [r3, #5]
 800cc10:	4619      	mov	r1, r3
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f002 ffc6 	bl	800fba4 <USBH_LL_GetURBState>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d111      	bne.n	800cc46 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2207      	movs	r2, #7
 800cc26:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2203      	movs	r2, #3
 800cc2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f000 fb7e 	bl	800d340 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc44:	e12b      	b.n	800ce9e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
 800cc48:	2b05      	cmp	r3, #5
 800cc4a:	d113      	bne.n	800cc74 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	220c      	movs	r2, #12
 800cc50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cc52:	2303      	movs	r3, #3
 800cc54:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2203      	movs	r2, #3
 800cc5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	f000 fb67 	bl	800d340 <osMessagePut>
      break;
 800cc72:	e114      	b.n	800ce9e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d111      	bne.n	800cc9e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2205      	movs	r2, #5
 800cc7e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2203      	movs	r2, #3
 800cc84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc94:	2200      	movs	r2, #0
 800cc96:	4619      	mov	r1, r3
 800cc98:	f000 fb52 	bl	800d340 <osMessagePut>
      break;
 800cc9c:	e0ff      	b.n	800ce9e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	2b04      	cmp	r3, #4
 800cca2:	f040 80fc 	bne.w	800ce9e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	220b      	movs	r2, #11
 800ccaa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ccac:	2302      	movs	r3, #2
 800ccae:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2203      	movs	r2, #3
 800ccb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	f000 fb3a 	bl	800d340 <osMessagePut>
      break;
 800cccc:	e0e7      	b.n	800ce9e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	791b      	ldrb	r3, [r3, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f92b 	bl	800cf32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2208      	movs	r2, #8
 800ccec:	761a      	strb	r2, [r3, #24]

      break;
 800ccee:	e0db      	b.n	800cea8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	791b      	ldrb	r3, [r3, #4]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f002 ff54 	bl	800fba4 <USBH_LL_GetURBState>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d113      	bne.n	800cd2e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	220d      	movs	r2, #13
 800cd0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2203      	movs	r2, #3
 800cd14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd24:	2200      	movs	r2, #0
 800cd26:	4619      	mov	r1, r3
 800cd28:	f000 fb0a 	bl	800d340 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd2c:	e0b9      	b.n	800cea2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800cd2e:	7bbb      	ldrb	r3, [r7, #14]
 800cd30:	2b04      	cmp	r3, #4
 800cd32:	d111      	bne.n	800cd58 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	220b      	movs	r2, #11
 800cd38:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2203      	movs	r2, #3
 800cd3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4619      	mov	r1, r3
 800cd52:	f000 faf5 	bl	800d340 <osMessagePut>
      break;
 800cd56:	e0a4      	b.n	800cea2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	2b05      	cmp	r3, #5
 800cd5c:	f040 80a1 	bne.w	800cea2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800cd60:	2303      	movs	r3, #3
 800cd62:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2203      	movs	r2, #3
 800cd68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	f000 fae0 	bl	800d340 <osMessagePut>
      break;
 800cd80:	e08f      	b.n	800cea2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	795b      	ldrb	r3, [r3, #5]
 800cd86:	2201      	movs	r2, #1
 800cd88:	9200      	str	r2, [sp, #0]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f8aa 	bl	800cee8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	220a      	movs	r2, #10
 800cda4:	761a      	strb	r2, [r3, #24]
      break;
 800cda6:	e07f      	b.n	800cea8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	795b      	ldrb	r3, [r3, #5]
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f002 fef8 	bl	800fba4 <USBH_LL_GetURBState>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d113      	bne.n	800cde6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	220d      	movs	r2, #13
 800cdc6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2203      	movs	r2, #3
 800cdcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cddc:	2200      	movs	r2, #0
 800cdde:	4619      	mov	r1, r3
 800cde0:	f000 faae 	bl	800d340 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cde4:	e05f      	b.n	800cea6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d111      	bne.n	800ce10 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2209      	movs	r2, #9
 800cdf0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce06:	2200      	movs	r2, #0
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f000 fa99 	bl	800d340 <osMessagePut>
      break;
 800ce0e:	e04a      	b.n	800cea6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ce10:	7bbb      	ldrb	r3, [r7, #14]
 800ce12:	2b04      	cmp	r3, #4
 800ce14:	d147      	bne.n	800cea6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220b      	movs	r2, #11
 800ce1a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2203      	movs	r2, #3
 800ce20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce30:	2200      	movs	r2, #0
 800ce32:	4619      	mov	r1, r3
 800ce34:	f000 fa84 	bl	800d340 <osMessagePut>
      break;
 800ce38:	e035      	b.n	800cea6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7e5b      	ldrb	r3, [r3, #25]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	765a      	strb	r2, [r3, #25]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7e5b      	ldrb	r3, [r3, #25]
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d806      	bhi.n	800ce5c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ce5a:	e025      	b.n	800cea8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce62:	2106      	movs	r1, #6
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	795b      	ldrb	r3, [r3, #5]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f90d 	bl	800d094 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	791b      	ldrb	r3, [r3, #4]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f907 	bl	800d094 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce90:	e00a      	b.n	800cea8 <USBH_HandleControl+0x484>

    default:
      break;
 800ce92:	bf00      	nop
 800ce94:	e008      	b.n	800cea8 <USBH_HandleControl+0x484>
      break;
 800ce96:	bf00      	nop
 800ce98:	e006      	b.n	800cea8 <USBH_HandleControl+0x484>
      break;
 800ce9a:	bf00      	nop
 800ce9c:	e004      	b.n	800cea8 <USBH_HandleControl+0x484>
      break;
 800ce9e:	bf00      	nop
 800cea0:	e002      	b.n	800cea8 <USBH_HandleControl+0x484>
      break;
 800cea2:	bf00      	nop
 800cea4:	e000      	b.n	800cea8 <USBH_HandleControl+0x484>
      break;
 800cea6:	bf00      	nop
  }

  return status;
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop

0800ceb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af04      	add	r7, sp, #16
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	4613      	mov	r3, r2
 800cec0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cec2:	79f9      	ldrb	r1, [r7, #7]
 800cec4:	2300      	movs	r3, #0
 800cec6:	9303      	str	r3, [sp, #12]
 800cec8:	2308      	movs	r3, #8
 800ceca:	9302      	str	r3, [sp, #8]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	2300      	movs	r3, #0
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	2300      	movs	r3, #0
 800ced6:	2200      	movs	r2, #0
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f002 fe32 	bl	800fb42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af04      	add	r7, sp, #16
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4611      	mov	r1, r2
 800cef4:	461a      	mov	r2, r3
 800cef6:	460b      	mov	r3, r1
 800cef8:	80fb      	strh	r3, [r7, #6]
 800cefa:	4613      	mov	r3, r2
 800cefc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf0c:	7979      	ldrb	r1, [r7, #5]
 800cf0e:	7e3b      	ldrb	r3, [r7, #24]
 800cf10:	9303      	str	r3, [sp, #12]
 800cf12:	88fb      	ldrh	r3, [r7, #6]
 800cf14:	9302      	str	r3, [sp, #8]
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2200      	movs	r2, #0
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f002 fe0d 	bl	800fb42 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b088      	sub	sp, #32
 800cf36:	af04      	add	r7, sp, #16
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	461a      	mov	r2, r3
 800cf40:	460b      	mov	r3, r1
 800cf42:	80fb      	strh	r3, [r7, #6]
 800cf44:	4613      	mov	r3, r2
 800cf46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf48:	7979      	ldrb	r1, [r7, #5]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	9303      	str	r3, [sp, #12]
 800cf4e:	88fb      	ldrh	r3, [r7, #6]
 800cf50:	9302      	str	r3, [sp, #8]
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	2301      	movs	r3, #1
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f002 fdef 	bl	800fb42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cf64:	2300      	movs	r3, #0

}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b088      	sub	sp, #32
 800cf72:	af04      	add	r7, sp, #16
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	4611      	mov	r1, r2
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	80fb      	strh	r3, [r7, #6]
 800cf80:	4613      	mov	r3, r2
 800cf82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf92:	7979      	ldrb	r1, [r7, #5]
 800cf94:	7e3b      	ldrb	r3, [r7, #24]
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f002 fdca 	bl	800fb42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	80fb      	strh	r3, [r7, #6]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cfce:	7979      	ldrb	r1, [r7, #5]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	9303      	str	r3, [sp, #12]
 800cfd4:	88fb      	ldrh	r3, [r7, #6]
 800cfd6:	9302      	str	r3, [sp, #8]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	2301      	movs	r3, #1
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f002 fdac 	bl	800fb42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af04      	add	r7, sp, #16
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	4608      	mov	r0, r1
 800cffe:	4611      	mov	r1, r2
 800d000:	461a      	mov	r2, r3
 800d002:	4603      	mov	r3, r0
 800d004:	70fb      	strb	r3, [r7, #3]
 800d006:	460b      	mov	r3, r1
 800d008:	70bb      	strb	r3, [r7, #2]
 800d00a:	4613      	mov	r3, r2
 800d00c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d00e:	7878      	ldrb	r0, [r7, #1]
 800d010:	78ba      	ldrb	r2, [r7, #2]
 800d012:	78f9      	ldrb	r1, [r7, #3]
 800d014:	8b3b      	ldrh	r3, [r7, #24]
 800d016:	9302      	str	r3, [sp, #8]
 800d018:	7d3b      	ldrb	r3, [r7, #20]
 800d01a:	9301      	str	r3, [sp, #4]
 800d01c:	7c3b      	ldrb	r3, [r7, #16]
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	4603      	mov	r3, r0
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f002 fd3f 	bl	800faa6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	460b      	mov	r3, r1
 800d03c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f002 fd5e 	bl	800fb04 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	460b      	mov	r3, r1
 800d05c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f836 	bl	800d0d0 <USBH_GetFreePipe>
 800d064:	4603      	mov	r3, r0
 800d066:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d068:	89fb      	ldrh	r3, [r7, #14]
 800d06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00a      	beq.n	800d088 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d072:	78fa      	ldrb	r2, [r7, #3]
 800d074:	89fb      	ldrh	r3, [r7, #14]
 800d076:	f003 030f 	and.w	r3, r3, #15
 800d07a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	33e0      	adds	r3, #224	; 0xe0
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	440b      	add	r3, r1
 800d086:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d088:	89fb      	ldrh	r3, [r7, #14]
 800d08a:	b2db      	uxtb	r3, r3
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	2b0f      	cmp	r3, #15
 800d0a4:	d80d      	bhi.n	800d0c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d0a6:	78fb      	ldrb	r3, [r7, #3]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	33e0      	adds	r3, #224	; 0xe0
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	78fb      	ldrb	r3, [r7, #3]
 800d0b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	33e0      	adds	r3, #224	; 0xe0
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	440b      	add	r3, r1
 800d0c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73fb      	strb	r3, [r7, #15]
 800d0e0:	e00f      	b.n	800d102 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d0e2:	7bfb      	ldrb	r3, [r7, #15]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	33e0      	adds	r3, #224	; 0xe0
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d102      	bne.n	800d0fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	e007      	b.n	800d10c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	3301      	adds	r3, #1
 800d100:	73fb      	strb	r3, [r7, #15]
 800d102:	7bfb      	ldrb	r3, [r7, #15]
 800d104:	2b0f      	cmp	r3, #15
 800d106:	d9ec      	bls.n	800d0e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d108:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d118:	b480      	push	{r7}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	4613      	mov	r3, r2
 800d124:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d126:	2301      	movs	r3, #1
 800d128:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d12e:	4b1f      	ldr	r3, [pc, #124]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d130:	7a5b      	ldrb	r3, [r3, #9]
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b00      	cmp	r3, #0
 800d136:	d131      	bne.n	800d19c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d138:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d13a:	7a5b      	ldrb	r3, [r3, #9]
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	461a      	mov	r2, r3
 800d140:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d142:	2100      	movs	r1, #0
 800d144:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d146:	4b19      	ldr	r3, [pc, #100]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d148:	7a5b      	ldrb	r3, [r3, #9]
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	4a17      	ldr	r2, [pc, #92]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d156:	4b15      	ldr	r3, [pc, #84]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d158:	7a5b      	ldrb	r3, [r3, #9]
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	461a      	mov	r2, r3
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d160:	4413      	add	r3, r2
 800d162:	79fa      	ldrb	r2, [r7, #7]
 800d164:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d166:	4b11      	ldr	r3, [pc, #68]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d168:	7a5b      	ldrb	r3, [r3, #9]
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	b2d1      	uxtb	r1, r2
 800d170:	4a0e      	ldr	r2, [pc, #56]	; (800d1ac <FATFS_LinkDriverEx+0x94>)
 800d172:	7251      	strb	r1, [r2, #9]
 800d174:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d176:	7dbb      	ldrb	r3, [r7, #22]
 800d178:	3330      	adds	r3, #48	; 0x30
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	3301      	adds	r3, #1
 800d184:	223a      	movs	r2, #58	; 0x3a
 800d186:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	3302      	adds	r3, #2
 800d18c:	222f      	movs	r2, #47	; 0x2f
 800d18e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	3303      	adds	r3, #3
 800d194:	2200      	movs	r2, #0
 800d196:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	371c      	adds	r7, #28
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	20000634 	.word	0x20000634

0800d1b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff ffaa 	bl	800d118 <FATFS_LinkDriverEx>
 800d1c4:	4603      	mov	r3, r0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b085      	sub	sp, #20
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d1dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1e0:	2b84      	cmp	r3, #132	; 0x84
 800d1e2:	d005      	beq.n	800d1f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d1e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	3303      	adds	r3, #3
 800d1ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b083      	sub	sp, #12
 800d202:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d204:	f3ef 8305 	mrs	r3, IPSR
 800d208:	607b      	str	r3, [r7, #4]
  return(result);
 800d20a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	bf14      	ite	ne
 800d210:	2301      	movne	r3, #1
 800d212:	2300      	moveq	r3, #0
 800d214:	b2db      	uxtb	r3, r3
}
 800d216:	4618      	mov	r0, r3
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d226:	f001 f915 	bl	800e454 <vTaskStartScheduler>
  
  return osOK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d232:	b089      	sub	sp, #36	; 0x24
 800d234:	af04      	add	r7, sp, #16
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d020      	beq.n	800d284 <osThreadCreate+0x54>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01c      	beq.n	800d284 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685c      	ldr	r4, [r3, #4]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	691e      	ldr	r6, [r3, #16]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff ffb6 	bl	800d1ce <makeFreeRtosPriority>
 800d262:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d26c:	9202      	str	r2, [sp, #8]
 800d26e:	9301      	str	r3, [sp, #4]
 800d270:	9100      	str	r1, [sp, #0]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	4632      	mov	r2, r6
 800d276:	4629      	mov	r1, r5
 800d278:	4620      	mov	r0, r4
 800d27a:	f000 ff0d 	bl	800e098 <xTaskCreateStatic>
 800d27e:	4603      	mov	r3, r0
 800d280:	60fb      	str	r3, [r7, #12]
 800d282:	e01c      	b.n	800d2be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685c      	ldr	r4, [r3, #4]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d290:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff ff98 	bl	800d1ce <makeFreeRtosPriority>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	f107 030c 	add.w	r3, r7, #12
 800d2a4:	9301      	str	r3, [sp, #4]
 800d2a6:	9200      	str	r2, [sp, #0]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 ff4f 	bl	800e152 <xTaskCreate>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d001      	beq.n	800d2be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e000      	b.n	800d2c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d2be:	68fb      	ldr	r3, [r7, #12]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3714      	adds	r7, #20
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <osDelay+0x16>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	e000      	b.n	800d2e0 <osDelay+0x18>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f001 f883 	bl	800e3ec <vTaskDelay>
  
  return osOK;
 800d2e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d2f0:	b590      	push	{r4, r7, lr}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af02      	add	r7, sp, #8
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d011      	beq.n	800d326 <osMessageCreate+0x36>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00d      	beq.n	800d326 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6859      	ldr	r1, [r3, #4]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	689a      	ldr	r2, [r3, #8]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	2400      	movs	r4, #0
 800d31c:	9400      	str	r4, [sp, #0]
 800d31e:	f000 f9df 	bl	800d6e0 <xQueueGenericCreateStatic>
 800d322:	4603      	mov	r3, r0
 800d324:	e008      	b.n	800d338 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	4619      	mov	r1, r3
 800d332:	f000 fa4d 	bl	800d7d0 <xQueueGenericCreate>
 800d336:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd90      	pop	{r4, r7, pc}

0800d340 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <osMessagePut+0x1e>
    ticks = 1;
 800d35a:	2301      	movs	r3, #1
 800d35c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d35e:	f7ff ff4e 	bl	800d1fe <inHandlerMode>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d018      	beq.n	800d39a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d368:	f107 0210 	add.w	r2, r7, #16
 800d36c:	f107 0108 	add.w	r1, r7, #8
 800d370:	2300      	movs	r3, #0
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f000 fb84 	bl	800da80 <xQueueGenericSendFromISR>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d001      	beq.n	800d382 <osMessagePut+0x42>
      return osErrorOS;
 800d37e:	23ff      	movs	r3, #255	; 0xff
 800d380:	e018      	b.n	800d3b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d014      	beq.n	800d3b2 <osMessagePut+0x72>
 800d388:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <osMessagePut+0x7c>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	e00b      	b.n	800d3b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d39a:	f107 0108 	add.w	r1, r7, #8
 800d39e:	2300      	movs	r3, #0
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 fa6e 	bl	800d884 <xQueueGenericSend>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d001      	beq.n	800d3b2 <osMessagePut+0x72>
      return osErrorOS;
 800d3ae:	23ff      	movs	r3, #255	; 0xff
 800d3b0:	e000      	b.n	800d3b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	e000ed04 	.word	0xe000ed04

0800d3c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d3c0:	b590      	push	{r4, r7, lr}
 800d3c2:	b08b      	sub	sp, #44	; 0x2c
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10a      	bne.n	800d3f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d3da:	2380      	movs	r3, #128	; 0x80
 800d3dc:	617b      	str	r3, [r7, #20]
    return event;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	461c      	mov	r4, r3
 800d3e2:	f107 0314 	add.w	r3, r7, #20
 800d3e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3ee:	e054      	b.n	800d49a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fe:	d103      	bne.n	800d408 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d400:	f04f 33ff 	mov.w	r3, #4294967295
 800d404:	627b      	str	r3, [r7, #36]	; 0x24
 800d406:	e009      	b.n	800d41c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d006      	beq.n	800d41c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <osMessageGet+0x5c>
      ticks = 1;
 800d418:	2301      	movs	r3, #1
 800d41a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d41c:	f7ff feef 	bl	800d1fe <inHandlerMode>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d01c      	beq.n	800d460 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d426:	f107 0220 	add.w	r2, r7, #32
 800d42a:	f107 0314 	add.w	r3, r7, #20
 800d42e:	3304      	adds	r3, #4
 800d430:	4619      	mov	r1, r3
 800d432:	68b8      	ldr	r0, [r7, #8]
 800d434:	f000 fca0 	bl	800dd78 <xQueueReceiveFromISR>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d102      	bne.n	800d444 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d43e:	2310      	movs	r3, #16
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	e001      	b.n	800d448 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d444:	2300      	movs	r3, #0
 800d446:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d01d      	beq.n	800d48a <osMessageGet+0xca>
 800d44e:	4b15      	ldr	r3, [pc, #84]	; (800d4a4 <osMessageGet+0xe4>)
 800d450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d454:	601a      	str	r2, [r3, #0]
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	e014      	b.n	800d48a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d460:	f107 0314 	add.w	r3, r7, #20
 800d464:	3304      	adds	r3, #4
 800d466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d468:	4619      	mov	r1, r3
 800d46a:	68b8      	ldr	r0, [r7, #8]
 800d46c:	f000 fba4 	bl	800dbb8 <xQueueReceive>
 800d470:	4603      	mov	r3, r0
 800d472:	2b01      	cmp	r3, #1
 800d474:	d102      	bne.n	800d47c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d476:	2310      	movs	r3, #16
 800d478:	617b      	str	r3, [r7, #20]
 800d47a:	e006      	b.n	800d48a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <osMessageGet+0xc6>
 800d482:	2300      	movs	r3, #0
 800d484:	e000      	b.n	800d488 <osMessageGet+0xc8>
 800d486:	2340      	movs	r3, #64	; 0x40
 800d488:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	461c      	mov	r4, r3
 800d48e:	f107 0314 	add.w	r3, r7, #20
 800d492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	372c      	adds	r7, #44	; 0x2c
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd90      	pop	{r4, r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f103 0208 	add.w	r2, r3, #8
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f103 0208 	add.w	r2, r3, #8
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f103 0208 	add.w	r2, r3, #8
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d502:	b480      	push	{r7}
 800d504:	b085      	sub	sp, #20
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	689a      	ldr	r2, [r3, #8]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	1c5a      	adds	r2, r3, #1
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	601a      	str	r2, [r3, #0]
}
 800d53e:	bf00      	nop
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d54a:	b480      	push	{r7}
 800d54c:	b085      	sub	sp, #20
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d103      	bne.n	800d56a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	691b      	ldr	r3, [r3, #16]
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	e00c      	b.n	800d584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	3308      	adds	r3, #8
 800d56e:	60fb      	str	r3, [r7, #12]
 800d570:	e002      	b.n	800d578 <vListInsert+0x2e>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	429a      	cmp	r2, r3
 800d582:	d2f6      	bcs.n	800d572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	601a      	str	r2, [r3, #0]
}
 800d5b0:	bf00      	nop
 800d5b2:	3714      	adds	r7, #20
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	6892      	ldr	r2, [r2, #8]
 800d5d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	6852      	ldr	r2, [r2, #4]
 800d5dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d103      	bne.n	800d5f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	689a      	ldr	r2, [r3, #8]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	1e5a      	subs	r2, r3, #1
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3714      	adds	r7, #20
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d63a:	f001 fd53 	bl	800f0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d646:	68f9      	ldr	r1, [r7, #12]
 800d648:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d64a:	fb01 f303 	mul.w	r3, r1, r3
 800d64e:	441a      	add	r2, r3
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d66a:	3b01      	subs	r3, #1
 800d66c:	68f9      	ldr	r1, [r7, #12]
 800d66e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d670:	fb01 f303 	mul.w	r3, r1, r3
 800d674:	441a      	add	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	22ff      	movs	r2, #255	; 0xff
 800d67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	22ff      	movs	r2, #255	; 0xff
 800d686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d114      	bne.n	800d6ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d01a      	beq.n	800d6ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3310      	adds	r3, #16
 800d69c:	4618      	mov	r0, r3
 800d69e:	f001 f92b 	bl	800e8f8 <xTaskRemoveFromEventList>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d012      	beq.n	800d6ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6a8:	4b0c      	ldr	r3, [pc, #48]	; (800d6dc <xQueueGenericReset+0xcc>)
 800d6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ae:	601a      	str	r2, [r3, #0]
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	e009      	b.n	800d6ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3310      	adds	r3, #16
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff fef2 	bl	800d4a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	3324      	adds	r3, #36	; 0x24
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff feed 	bl	800d4a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6ce:	f001 fd39 	bl	800f144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6d2:	2301      	movs	r3, #1
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	e000ed04 	.word	0xe000ed04

0800d6e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08e      	sub	sp, #56	; 0x38
 800d6e4:	af02      	add	r7, sp, #8
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
 800d6ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10a      	bne.n	800d726 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d722:	bf00      	nop
 800d724:	e7fe      	b.n	800d724 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d002      	beq.n	800d732 <xQueueGenericCreateStatic+0x52>
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <xQueueGenericCreateStatic+0x56>
 800d732:	2301      	movs	r3, #1
 800d734:	e000      	b.n	800d738 <xQueueGenericCreateStatic+0x58>
 800d736:	2300      	movs	r3, #0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10a      	bne.n	800d752 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	623b      	str	r3, [r7, #32]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <xQueueGenericCreateStatic+0x7e>
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d101      	bne.n	800d762 <xQueueGenericCreateStatic+0x82>
 800d75e:	2301      	movs	r3, #1
 800d760:	e000      	b.n	800d764 <xQueueGenericCreateStatic+0x84>
 800d762:	2300      	movs	r3, #0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10a      	bne.n	800d77e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76c:	f383 8811 	msr	BASEPRI, r3
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	f3bf 8f4f 	dsb	sy
 800d778:	61fb      	str	r3, [r7, #28]
}
 800d77a:	bf00      	nop
 800d77c:	e7fe      	b.n	800d77c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d77e:	2348      	movs	r3, #72	; 0x48
 800d780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2b48      	cmp	r3, #72	; 0x48
 800d786:	d00a      	beq.n	800d79e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	61bb      	str	r3, [r7, #24]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d79e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00d      	beq.n	800d7c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	68b9      	ldr	r1, [r7, #8]
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f000 f83f 	bl	800d844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3730      	adds	r7, #48	; 0x30
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08a      	sub	sp, #40	; 0x28
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10a      	bne.n	800d7fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	613b      	str	r3, [r7, #16]
}
 800d7f6:	bf00      	nop
 800d7f8:	e7fe      	b.n	800d7f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	fb02 f303 	mul.w	r3, r2, r3
 800d802:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	3348      	adds	r3, #72	; 0x48
 800d808:	4618      	mov	r0, r3
 800d80a:	f001 fd8d 	bl	800f328 <pvPortMalloc>
 800d80e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d011      	beq.n	800d83a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	3348      	adds	r3, #72	; 0x48
 800d81e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d828:	79fa      	ldrb	r2, [r7, #7]
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	4613      	mov	r3, r2
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	68b9      	ldr	r1, [r7, #8]
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f000 f805 	bl	800d844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d83a:	69bb      	ldr	r3, [r7, #24]
	}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3720      	adds	r7, #32
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d103      	bne.n	800d860 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	69ba      	ldr	r2, [r7, #24]
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	e002      	b.n	800d866 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d872:	2101      	movs	r1, #1
 800d874:	69b8      	ldr	r0, [r7, #24]
 800d876:	f7ff fecb 	bl	800d610 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d87a:	bf00      	nop
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08e      	sub	sp, #56	; 0x38
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d892:	2300      	movs	r3, #0
 800d894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10a      	bne.n	800d8b6 <xQueueGenericSend+0x32>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d103      	bne.n	800d8c4 <xQueueGenericSend+0x40>
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <xQueueGenericSend+0x44>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <xQueueGenericSend+0x46>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <xQueueGenericSend+0x60>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d103      	bne.n	800d8f2 <xQueueGenericSend+0x6e>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d101      	bne.n	800d8f6 <xQueueGenericSend+0x72>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <xQueueGenericSend+0x74>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <xQueueGenericSend+0x8e>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	623b      	str	r3, [r7, #32]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d912:	f001 f9b1 	bl	800ec78 <xTaskGetSchedulerState>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d102      	bne.n	800d922 <xQueueGenericSend+0x9e>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <xQueueGenericSend+0xa2>
 800d922:	2301      	movs	r3, #1
 800d924:	e000      	b.n	800d928 <xQueueGenericSend+0xa4>
 800d926:	2300      	movs	r3, #0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10a      	bne.n	800d942 <xQueueGenericSend+0xbe>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d930:	f383 8811 	msr	BASEPRI, r3
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	61fb      	str	r3, [r7, #28]
}
 800d93e:	bf00      	nop
 800d940:	e7fe      	b.n	800d940 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d942:	f001 fbcf 	bl	800f0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d94e:	429a      	cmp	r2, r3
 800d950:	d302      	bcc.n	800d958 <xQueueGenericSend+0xd4>
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2b02      	cmp	r3, #2
 800d956:	d129      	bne.n	800d9ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	68b9      	ldr	r1, [r7, #8]
 800d95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d95e:	f000 fa8b 	bl	800de78 <prvCopyDataToQueue>
 800d962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d010      	beq.n	800d98e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	3324      	adds	r3, #36	; 0x24
 800d970:	4618      	mov	r0, r3
 800d972:	f000 ffc1 	bl	800e8f8 <xTaskRemoveFromEventList>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d013      	beq.n	800d9a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d97c:	4b3f      	ldr	r3, [pc, #252]	; (800da7c <xQueueGenericSend+0x1f8>)
 800d97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	e00a      	b.n	800d9a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	2b00      	cmp	r3, #0
 800d992:	d007      	beq.n	800d9a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d994:	4b39      	ldr	r3, [pc, #228]	; (800da7c <xQueueGenericSend+0x1f8>)
 800d996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9a4:	f001 fbce 	bl	800f144 <vPortExitCritical>
				return pdPASS;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e063      	b.n	800da74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d103      	bne.n	800d9ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9b2:	f001 fbc7 	bl	800f144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e05c      	b.n	800da74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9c0:	f107 0314 	add.w	r3, r7, #20
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 fff9 	bl	800e9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ce:	f001 fbb9 	bl	800f144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9d2:	f000 fda9 	bl	800e528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9d6:	f001 fb85 	bl	800f0e4 <vPortEnterCritical>
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9e0:	b25b      	sxtb	r3, r3
 800d9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e6:	d103      	bne.n	800d9f0 <xQueueGenericSend+0x16c>
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f6:	b25b      	sxtb	r3, r3
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fc:	d103      	bne.n	800da06 <xQueueGenericSend+0x182>
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da06:	f001 fb9d 	bl	800f144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da0a:	1d3a      	adds	r2, r7, #4
 800da0c:	f107 0314 	add.w	r3, r7, #20
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f000 ffe8 	bl	800e9e8 <xTaskCheckForTimeOut>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d124      	bne.n	800da68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da20:	f000 fb22 	bl	800e068 <prvIsQueueFull>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d018      	beq.n	800da5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	3310      	adds	r3, #16
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	4611      	mov	r1, r2
 800da32:	4618      	mov	r0, r3
 800da34:	f000 ff3c 	bl	800e8b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da3a:	f000 faad 	bl	800df98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da3e:	f000 fd81 	bl	800e544 <xTaskResumeAll>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	f47f af7c 	bne.w	800d942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800da4a:	4b0c      	ldr	r3, [pc, #48]	; (800da7c <xQueueGenericSend+0x1f8>)
 800da4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	e772      	b.n	800d942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da5e:	f000 fa9b 	bl	800df98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da62:	f000 fd6f 	bl	800e544 <xTaskResumeAll>
 800da66:	e76c      	b.n	800d942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da6a:	f000 fa95 	bl	800df98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da6e:	f000 fd69 	bl	800e544 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da74:	4618      	mov	r0, r3
 800da76:	3738      	adds	r7, #56	; 0x38
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	e000ed04 	.word	0xe000ed04

0800da80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b090      	sub	sp, #64	; 0x40
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10a      	bne.n	800daae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800da98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9c:	f383 8811 	msr	BASEPRI, r3
 800daa0:	f3bf 8f6f 	isb	sy
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800daaa:	bf00      	nop
 800daac:	e7fe      	b.n	800daac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d103      	bne.n	800dabc <xQueueGenericSendFromISR+0x3c>
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d101      	bne.n	800dac0 <xQueueGenericSendFromISR+0x40>
 800dabc:	2301      	movs	r3, #1
 800dabe:	e000      	b.n	800dac2 <xQueueGenericSendFromISR+0x42>
 800dac0:	2300      	movs	r3, #0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10a      	bne.n	800dadc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d103      	bne.n	800daea <xQueueGenericSendFromISR+0x6a>
 800dae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d101      	bne.n	800daee <xQueueGenericSendFromISR+0x6e>
 800daea:	2301      	movs	r3, #1
 800daec:	e000      	b.n	800daf0 <xQueueGenericSendFromISR+0x70>
 800daee:	2300      	movs	r3, #0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10a      	bne.n	800db0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	623b      	str	r3, [r7, #32]
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db0a:	f001 fbcd 	bl	800f2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db0e:	f3ef 8211 	mrs	r2, BASEPRI
 800db12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	61fa      	str	r2, [r7, #28]
 800db24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db32:	429a      	cmp	r2, r3
 800db34:	d302      	bcc.n	800db3c <xQueueGenericSendFromISR+0xbc>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d12f      	bne.n	800db9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db52:	f000 f991 	bl	800de78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800db5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5e:	d112      	bne.n	800db86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db64:	2b00      	cmp	r3, #0
 800db66:	d016      	beq.n	800db96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6a:	3324      	adds	r3, #36	; 0x24
 800db6c:	4618      	mov	r0, r3
 800db6e:	f000 fec3 	bl	800e8f8 <xTaskRemoveFromEventList>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00e      	beq.n	800db96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00b      	beq.n	800db96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	e007      	b.n	800db96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db8a:	3301      	adds	r3, #1
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	b25a      	sxtb	r2, r3
 800db90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db96:	2301      	movs	r3, #1
 800db98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800db9a:	e001      	b.n	800dba0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db9c:	2300      	movs	r3, #0
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dbaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3740      	adds	r7, #64	; 0x40
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08c      	sub	sp, #48	; 0x30
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10a      	bne.n	800dbe8 <xQueueReceive+0x30>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	623b      	str	r3, [r7, #32]
}
 800dbe4:	bf00      	nop
 800dbe6:	e7fe      	b.n	800dbe6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d103      	bne.n	800dbf6 <xQueueReceive+0x3e>
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <xQueueReceive+0x42>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e000      	b.n	800dbfc <xQueueReceive+0x44>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10a      	bne.n	800dc16 <xQueueReceive+0x5e>
	__asm volatile
 800dc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	61fb      	str	r3, [r7, #28]
}
 800dc12:	bf00      	nop
 800dc14:	e7fe      	b.n	800dc14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc16:	f001 f82f 	bl	800ec78 <xTaskGetSchedulerState>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d102      	bne.n	800dc26 <xQueueReceive+0x6e>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d101      	bne.n	800dc2a <xQueueReceive+0x72>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <xQueueReceive+0x74>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <xQueueReceive+0x8e>
	__asm volatile
 800dc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	61bb      	str	r3, [r7, #24]
}
 800dc42:	bf00      	nop
 800dc44:	e7fe      	b.n	800dc44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc46:	f001 fa4d 	bl	800f0e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d01f      	beq.n	800dc96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc56:	68b9      	ldr	r1, [r7, #8]
 800dc58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc5a:	f000 f977 	bl	800df4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	1e5a      	subs	r2, r3, #1
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d00f      	beq.n	800dc8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc70:	3310      	adds	r3, #16
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 fe40 	bl	800e8f8 <xTaskRemoveFromEventList>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d007      	beq.n	800dc8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc7e:	4b3d      	ldr	r3, [pc, #244]	; (800dd74 <xQueueReceive+0x1bc>)
 800dc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc8e:	f001 fa59 	bl	800f144 <vPortExitCritical>
				return pdPASS;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e069      	b.n	800dd6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d103      	bne.n	800dca4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc9c:	f001 fa52 	bl	800f144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dca0:	2300      	movs	r3, #0
 800dca2:	e062      	b.n	800dd6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcaa:	f107 0310 	add.w	r3, r7, #16
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 fe84 	bl	800e9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcb8:	f001 fa44 	bl	800f144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcbc:	f000 fc34 	bl	800e528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcc0:	f001 fa10 	bl	800f0e4 <vPortEnterCritical>
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcca:	b25b      	sxtb	r3, r3
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d103      	bne.n	800dcda <xQueueReceive+0x122>
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dce0:	b25b      	sxtb	r3, r3
 800dce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce6:	d103      	bne.n	800dcf0 <xQueueReceive+0x138>
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	2200      	movs	r2, #0
 800dcec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcf0:	f001 fa28 	bl	800f144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcf4:	1d3a      	adds	r2, r7, #4
 800dcf6:	f107 0310 	add.w	r3, r7, #16
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 fe73 	bl	800e9e8 <xTaskCheckForTimeOut>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d123      	bne.n	800dd50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd0a:	f000 f997 	bl	800e03c <prvIsQueueEmpty>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d017      	beq.n	800dd44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	3324      	adds	r3, #36	; 0x24
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 fdc7 	bl	800e8b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd24:	f000 f938 	bl	800df98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd28:	f000 fc0c 	bl	800e544 <xTaskResumeAll>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d189      	bne.n	800dc46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dd32:	4b10      	ldr	r3, [pc, #64]	; (800dd74 <xQueueReceive+0x1bc>)
 800dd34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	e780      	b.n	800dc46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd46:	f000 f927 	bl	800df98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd4a:	f000 fbfb 	bl	800e544 <xTaskResumeAll>
 800dd4e:	e77a      	b.n	800dc46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd52:	f000 f921 	bl	800df98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd56:	f000 fbf5 	bl	800e544 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd5c:	f000 f96e 	bl	800e03c <prvIsQueueEmpty>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f43f af6f 	beq.w	800dc46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3730      	adds	r7, #48	; 0x30
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	e000ed04 	.word	0xe000ed04

0800dd78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08e      	sub	sp, #56	; 0x38
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10a      	bne.n	800dda4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	623b      	str	r3, [r7, #32]
}
 800dda0:	bf00      	nop
 800dda2:	e7fe      	b.n	800dda2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d103      	bne.n	800ddb2 <xQueueReceiveFromISR+0x3a>
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d101      	bne.n	800ddb6 <xQueueReceiveFromISR+0x3e>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e000      	b.n	800ddb8 <xQueueReceiveFromISR+0x40>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10a      	bne.n	800ddd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	61fb      	str	r3, [r7, #28]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddd2:	f001 fa69 	bl	800f2a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ddd6:	f3ef 8211 	mrs	r2, BASEPRI
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	61ba      	str	r2, [r7, #24]
 800ddec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ddee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d02f      	beq.n	800de5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de08:	68b9      	ldr	r1, [r7, #8]
 800de0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de0c:	f000 f89e 	bl	800df4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de12:	1e5a      	subs	r2, r3, #1
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800de18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de20:	d112      	bne.n	800de48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d016      	beq.n	800de58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	3310      	adds	r3, #16
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 fd62 	bl	800e8f8 <xTaskRemoveFromEventList>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00e      	beq.n	800de58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00b      	beq.n	800de58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	601a      	str	r2, [r3, #0]
 800de46:	e007      	b.n	800de58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800de48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de4c:	3301      	adds	r3, #1
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	b25a      	sxtb	r2, r3
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800de58:	2301      	movs	r3, #1
 800de5a:	637b      	str	r3, [r7, #52]	; 0x34
 800de5c:	e001      	b.n	800de62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800de5e:	2300      	movs	r3, #0
 800de60:	637b      	str	r3, [r7, #52]	; 0x34
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	f383 8811 	msr	BASEPRI, r3
}
 800de6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de70:	4618      	mov	r0, r3
 800de72:	3738      	adds	r7, #56	; 0x38
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10d      	bne.n	800deb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d14d      	bne.n	800df3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 ff06 	bl	800ecb4 <xTaskPriorityDisinherit>
 800dea8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	609a      	str	r2, [r3, #8]
 800deb0:	e043      	b.n	800df3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d119      	bne.n	800deec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6858      	ldr	r0, [r3, #4]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec0:	461a      	mov	r2, r3
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	f002 fb79 	bl	80105ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded0:	441a      	add	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	685a      	ldr	r2, [r3, #4]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d32b      	bcc.n	800df3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	605a      	str	r2, [r3, #4]
 800deea:	e026      	b.n	800df3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	68d8      	ldr	r0, [r3, #12]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def4:	461a      	mov	r2, r3
 800def6:	68b9      	ldr	r1, [r7, #8]
 800def8:	f002 fb5f 	bl	80105ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	68da      	ldr	r2, [r3, #12]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df04:	425b      	negs	r3, r3
 800df06:	441a      	add	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	429a      	cmp	r2, r3
 800df16:	d207      	bcs.n	800df28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	689a      	ldr	r2, [r3, #8]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df20:	425b      	negs	r3, r3
 800df22:	441a      	add	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d105      	bne.n	800df3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	3b01      	subs	r3, #1
 800df38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	1c5a      	adds	r2, r3, #1
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df42:	697b      	ldr	r3, [r7, #20]
}
 800df44:	4618      	mov	r0, r3
 800df46:	3718      	adds	r7, #24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d018      	beq.n	800df90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df66:	441a      	add	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	429a      	cmp	r2, r3
 800df76:	d303      	bcc.n	800df80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68d9      	ldr	r1, [r3, #12]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df88:	461a      	mov	r2, r3
 800df8a:	6838      	ldr	r0, [r7, #0]
 800df8c:	f002 fb15 	bl	80105ba <memcpy>
	}
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dfa0:	f001 f8a0 	bl	800f0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfac:	e011      	b.n	800dfd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d012      	beq.n	800dfdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3324      	adds	r3, #36	; 0x24
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f000 fc9c 	bl	800e8f8 <xTaskRemoveFromEventList>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfc6:	f000 fd71 	bl	800eaac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	dce9      	bgt.n	800dfae <prvUnlockQueue+0x16>
 800dfda:	e000      	b.n	800dfde <prvUnlockQueue+0x46>
					break;
 800dfdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	22ff      	movs	r2, #255	; 0xff
 800dfe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfe6:	f001 f8ad 	bl	800f144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfea:	f001 f87b 	bl	800f0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dff4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dff6:	e011      	b.n	800e01c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d012      	beq.n	800e026 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3310      	adds	r3, #16
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fc77 	bl	800e8f8 <xTaskRemoveFromEventList>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e010:	f000 fd4c 	bl	800eaac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	3b01      	subs	r3, #1
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e020:	2b00      	cmp	r3, #0
 800e022:	dce9      	bgt.n	800dff8 <prvUnlockQueue+0x60>
 800e024:	e000      	b.n	800e028 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e026:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	22ff      	movs	r2, #255	; 0xff
 800e02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e030:	f001 f888 	bl	800f144 <vPortExitCritical>
}
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e044:	f001 f84e 	bl	800f0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d102      	bne.n	800e056 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e050:	2301      	movs	r3, #1
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	e001      	b.n	800e05a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e056:	2300      	movs	r3, #0
 800e058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e05a:	f001 f873 	bl	800f144 <vPortExitCritical>

	return xReturn;
 800e05e:	68fb      	ldr	r3, [r7, #12]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e070:	f001 f838 	bl	800f0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d102      	bne.n	800e086 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e080:	2301      	movs	r3, #1
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	e001      	b.n	800e08a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e086:	2300      	movs	r3, #0
 800e088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e08a:	f001 f85b 	bl	800f144 <vPortExitCritical>

	return xReturn;
 800e08e:	68fb      	ldr	r3, [r7, #12]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08e      	sub	sp, #56	; 0x38
 800e09c:	af04      	add	r7, sp, #16
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
 800e0a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10a      	bne.n	800e0c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	623b      	str	r3, [r7, #32]
}
 800e0be:	bf00      	nop
 800e0c0:	e7fe      	b.n	800e0c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10a      	bne.n	800e0de <xTaskCreateStatic+0x46>
	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	61fb      	str	r3, [r7, #28]
}
 800e0da:	bf00      	nop
 800e0dc:	e7fe      	b.n	800e0dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0de:	23a0      	movs	r3, #160	; 0xa0
 800e0e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2ba0      	cmp	r3, #160	; 0xa0
 800e0e6:	d00a      	beq.n	800e0fe <xTaskCreateStatic+0x66>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	61bb      	str	r3, [r7, #24]
}
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e0fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	2b00      	cmp	r3, #0
 800e104:	d01e      	beq.n	800e144 <xTaskCreateStatic+0xac>
 800e106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d01b      	beq.n	800e144 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e114:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	2202      	movs	r2, #2
 800e11a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e11e:	2300      	movs	r3, #0
 800e120:	9303      	str	r3, [sp, #12]
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	9302      	str	r3, [sp, #8]
 800e126:	f107 0314 	add.w	r3, r7, #20
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f000 f850 	bl	800e1dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e13c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e13e:	f000 f8eb 	bl	800e318 <prvAddNewTaskToReadyList>
 800e142:	e001      	b.n	800e148 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e144:	2300      	movs	r3, #0
 800e146:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e148:	697b      	ldr	r3, [r7, #20]
	}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3728      	adds	r7, #40	; 0x28
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e152:	b580      	push	{r7, lr}
 800e154:	b08c      	sub	sp, #48	; 0x30
 800e156:	af04      	add	r7, sp, #16
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	603b      	str	r3, [r7, #0]
 800e15e:	4613      	mov	r3, r2
 800e160:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e162:	88fb      	ldrh	r3, [r7, #6]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4618      	mov	r0, r3
 800e168:	f001 f8de 	bl	800f328 <pvPortMalloc>
 800e16c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00e      	beq.n	800e192 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e174:	20a0      	movs	r0, #160	; 0xa0
 800e176:	f001 f8d7 	bl	800f328 <pvPortMalloc>
 800e17a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	697a      	ldr	r2, [r7, #20]
 800e186:	631a      	str	r2, [r3, #48]	; 0x30
 800e188:	e005      	b.n	800e196 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e18a:	6978      	ldr	r0, [r7, #20]
 800e18c:	f001 f998 	bl	800f4c0 <vPortFree>
 800e190:	e001      	b.n	800e196 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e192:	2300      	movs	r3, #0
 800e194:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d017      	beq.n	800e1cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1a4:	88fa      	ldrh	r2, [r7, #6]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	9303      	str	r3, [sp, #12]
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	9302      	str	r3, [sp, #8]
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	68b9      	ldr	r1, [r7, #8]
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 f80e 	bl	800e1dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1c0:	69f8      	ldr	r0, [r7, #28]
 800e1c2:	f000 f8a9 	bl	800e318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	61bb      	str	r3, [r7, #24]
 800e1ca:	e002      	b.n	800e1d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1d2:	69bb      	ldr	r3, [r7, #24]
	}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3720      	adds	r7, #32
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4413      	add	r3, r2
 800e1fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	f023 0307 	bic.w	r3, r3, #7
 800e202:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	f003 0307 	and.w	r3, r3, #7
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	617b      	str	r3, [r7, #20]
}
 800e220:	bf00      	nop
 800e222:	e7fe      	b.n	800e222 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d01f      	beq.n	800e26a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e22a:	2300      	movs	r3, #0
 800e22c:	61fb      	str	r3, [r7, #28]
 800e22e:	e012      	b.n	800e256 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	4413      	add	r3, r2
 800e236:	7819      	ldrb	r1, [r3, #0]
 800e238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	4413      	add	r3, r2
 800e23e:	3334      	adds	r3, #52	; 0x34
 800e240:	460a      	mov	r2, r1
 800e242:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	4413      	add	r3, r2
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d006      	beq.n	800e25e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	3301      	adds	r3, #1
 800e254:	61fb      	str	r3, [r7, #28]
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	2b0f      	cmp	r3, #15
 800e25a:	d9e9      	bls.n	800e230 <prvInitialiseNewTask+0x54>
 800e25c:	e000      	b.n	800e260 <prvInitialiseNewTask+0x84>
			{
				break;
 800e25e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e268:	e003      	b.n	800e272 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	2b06      	cmp	r3, #6
 800e276:	d901      	bls.n	800e27c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e278:	2306      	movs	r3, #6
 800e27a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e280:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e286:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28a:	2200      	movs	r2, #0
 800e28c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	3304      	adds	r3, #4
 800e292:	4618      	mov	r0, r3
 800e294:	f7ff f928 	bl	800d4e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29a:	3318      	adds	r3, #24
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7ff f923 	bl	800d4e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	f1c3 0207 	rsb	r2, r3, #7
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	334c      	adds	r3, #76	; 0x4c
 800e2cc:	224c      	movs	r2, #76	; 0x4c
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f002 f891 	bl	80103f8 <memset>
 800e2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d8:	4a0c      	ldr	r2, [pc, #48]	; (800e30c <prvInitialiseNewTask+0x130>)
 800e2da:	651a      	str	r2, [r3, #80]	; 0x50
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	4a0c      	ldr	r2, [pc, #48]	; (800e310 <prvInitialiseNewTask+0x134>)
 800e2e0:	655a      	str	r2, [r3, #84]	; 0x54
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	4a0b      	ldr	r2, [pc, #44]	; (800e314 <prvInitialiseNewTask+0x138>)
 800e2e6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	68f9      	ldr	r1, [r7, #12]
 800e2ec:	69b8      	ldr	r0, [r7, #24]
 800e2ee:	f000 fdcd 	bl	800ee8c <pxPortInitialiseStack>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d002      	beq.n	800e304 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e302:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e304:	bf00      	nop
 800e306:	3720      	adds	r7, #32
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20004b64 	.word	0x20004b64
 800e310:	20004bcc 	.word	0x20004bcc
 800e314:	20004c34 	.word	0x20004c34

0800e318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e320:	f000 fee0 	bl	800f0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e324:	4b2a      	ldr	r3, [pc, #168]	; (800e3d0 <prvAddNewTaskToReadyList+0xb8>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3301      	adds	r3, #1
 800e32a:	4a29      	ldr	r2, [pc, #164]	; (800e3d0 <prvAddNewTaskToReadyList+0xb8>)
 800e32c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e32e:	4b29      	ldr	r3, [pc, #164]	; (800e3d4 <prvAddNewTaskToReadyList+0xbc>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d109      	bne.n	800e34a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e336:	4a27      	ldr	r2, [pc, #156]	; (800e3d4 <prvAddNewTaskToReadyList+0xbc>)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e33c:	4b24      	ldr	r3, [pc, #144]	; (800e3d0 <prvAddNewTaskToReadyList+0xb8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d110      	bne.n	800e366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e344:	f000 fbd6 	bl	800eaf4 <prvInitialiseTaskLists>
 800e348:	e00d      	b.n	800e366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e34a:	4b23      	ldr	r3, [pc, #140]	; (800e3d8 <prvAddNewTaskToReadyList+0xc0>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d109      	bne.n	800e366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e352:	4b20      	ldr	r3, [pc, #128]	; (800e3d4 <prvAddNewTaskToReadyList+0xbc>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d802      	bhi.n	800e366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e360:	4a1c      	ldr	r2, [pc, #112]	; (800e3d4 <prvAddNewTaskToReadyList+0xbc>)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e366:	4b1d      	ldr	r3, [pc, #116]	; (800e3dc <prvAddNewTaskToReadyList+0xc4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3301      	adds	r3, #1
 800e36c:	4a1b      	ldr	r2, [pc, #108]	; (800e3dc <prvAddNewTaskToReadyList+0xc4>)
 800e36e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e374:	2201      	movs	r2, #1
 800e376:	409a      	lsls	r2, r3
 800e378:	4b19      	ldr	r3, [pc, #100]	; (800e3e0 <prvAddNewTaskToReadyList+0xc8>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	4a18      	ldr	r2, [pc, #96]	; (800e3e0 <prvAddNewTaskToReadyList+0xc8>)
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4a15      	ldr	r2, [pc, #84]	; (800e3e4 <prvAddNewTaskToReadyList+0xcc>)
 800e390:	441a      	add	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3304      	adds	r3, #4
 800e396:	4619      	mov	r1, r3
 800e398:	4610      	mov	r0, r2
 800e39a:	f7ff f8b2 	bl	800d502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e39e:	f000 fed1 	bl	800f144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3a2:	4b0d      	ldr	r3, [pc, #52]	; (800e3d8 <prvAddNewTaskToReadyList+0xc0>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00e      	beq.n	800e3c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3aa:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <prvAddNewTaskToReadyList+0xbc>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d207      	bcs.n	800e3c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3b8:	4b0b      	ldr	r3, [pc, #44]	; (800e3e8 <prvAddNewTaskToReadyList+0xd0>)
 800e3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3c8:	bf00      	nop
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	20000740 	.word	0x20000740
 800e3d4:	20000640 	.word	0x20000640
 800e3d8:	2000074c 	.word	0x2000074c
 800e3dc:	2000075c 	.word	0x2000075c
 800e3e0:	20000748 	.word	0x20000748
 800e3e4:	20000644 	.word	0x20000644
 800e3e8:	e000ed04 	.word	0xe000ed04

0800e3ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d017      	beq.n	800e42e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e3fe:	4b13      	ldr	r3, [pc, #76]	; (800e44c <vTaskDelay+0x60>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00a      	beq.n	800e41c <vTaskDelay+0x30>
	__asm volatile
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	60bb      	str	r3, [r7, #8]
}
 800e418:	bf00      	nop
 800e41a:	e7fe      	b.n	800e41a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e41c:	f000 f884 	bl	800e528 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e420:	2100      	movs	r1, #0
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fccc 	bl	800edc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e428:	f000 f88c 	bl	800e544 <xTaskResumeAll>
 800e42c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d107      	bne.n	800e444 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e434:	4b06      	ldr	r3, [pc, #24]	; (800e450 <vTaskDelay+0x64>)
 800e436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e43a:	601a      	str	r2, [r3, #0]
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e444:	bf00      	nop
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	20000768 	.word	0x20000768
 800e450:	e000ed04 	.word	0xe000ed04

0800e454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08a      	sub	sp, #40	; 0x28
 800e458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e45e:	2300      	movs	r3, #0
 800e460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e462:	463a      	mov	r2, r7
 800e464:	1d39      	adds	r1, r7, #4
 800e466:	f107 0308 	add.w	r3, r7, #8
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f2 f87e 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	9202      	str	r2, [sp, #8]
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	2300      	movs	r3, #0
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	2300      	movs	r3, #0
 800e480:	460a      	mov	r2, r1
 800e482:	4921      	ldr	r1, [pc, #132]	; (800e508 <vTaskStartScheduler+0xb4>)
 800e484:	4821      	ldr	r0, [pc, #132]	; (800e50c <vTaskStartScheduler+0xb8>)
 800e486:	f7ff fe07 	bl	800e098 <xTaskCreateStatic>
 800e48a:	4603      	mov	r3, r0
 800e48c:	4a20      	ldr	r2, [pc, #128]	; (800e510 <vTaskStartScheduler+0xbc>)
 800e48e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e490:	4b1f      	ldr	r3, [pc, #124]	; (800e510 <vTaskStartScheduler+0xbc>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e498:	2301      	movs	r3, #1
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	e001      	b.n	800e4a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d11b      	bne.n	800e4e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	613b      	str	r3, [r7, #16]
}
 800e4ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e4bc:	4b15      	ldr	r3, [pc, #84]	; (800e514 <vTaskStartScheduler+0xc0>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	334c      	adds	r3, #76	; 0x4c
 800e4c2:	4a15      	ldr	r2, [pc, #84]	; (800e518 <vTaskStartScheduler+0xc4>)
 800e4c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4c6:	4b15      	ldr	r3, [pc, #84]	; (800e51c <vTaskStartScheduler+0xc8>)
 800e4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4ce:	4b14      	ldr	r3, [pc, #80]	; (800e520 <vTaskStartScheduler+0xcc>)
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4d4:	4b13      	ldr	r3, [pc, #76]	; (800e524 <vTaskStartScheduler+0xd0>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e4da:	f000 fd61 	bl	800efa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e4de:	e00e      	b.n	800e4fe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e6:	d10a      	bne.n	800e4fe <vTaskStartScheduler+0xaa>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	60fb      	str	r3, [r7, #12]
}
 800e4fa:	bf00      	nop
 800e4fc:	e7fe      	b.n	800e4fc <vTaskStartScheduler+0xa8>
}
 800e4fe:	bf00      	nop
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	08010f1c 	.word	0x08010f1c
 800e50c:	0800eac5 	.word	0x0800eac5
 800e510:	20000764 	.word	0x20000764
 800e514:	20000640 	.word	0x20000640
 800e518:	2000009c 	.word	0x2000009c
 800e51c:	20000760 	.word	0x20000760
 800e520:	2000074c 	.word	0x2000074c
 800e524:	20000744 	.word	0x20000744

0800e528 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e528:	b480      	push	{r7}
 800e52a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e52c:	4b04      	ldr	r3, [pc, #16]	; (800e540 <vTaskSuspendAll+0x18>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3301      	adds	r3, #1
 800e532:	4a03      	ldr	r2, [pc, #12]	; (800e540 <vTaskSuspendAll+0x18>)
 800e534:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e536:	bf00      	nop
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr
 800e540:	20000768 	.word	0x20000768

0800e544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e54e:	2300      	movs	r3, #0
 800e550:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e552:	4b41      	ldr	r3, [pc, #260]	; (800e658 <xTaskResumeAll+0x114>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10a      	bne.n	800e570 <xTaskResumeAll+0x2c>
	__asm volatile
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	603b      	str	r3, [r7, #0]
}
 800e56c:	bf00      	nop
 800e56e:	e7fe      	b.n	800e56e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e570:	f000 fdb8 	bl	800f0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e574:	4b38      	ldr	r3, [pc, #224]	; (800e658 <xTaskResumeAll+0x114>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3b01      	subs	r3, #1
 800e57a:	4a37      	ldr	r2, [pc, #220]	; (800e658 <xTaskResumeAll+0x114>)
 800e57c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e57e:	4b36      	ldr	r3, [pc, #216]	; (800e658 <xTaskResumeAll+0x114>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d161      	bne.n	800e64a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e586:	4b35      	ldr	r3, [pc, #212]	; (800e65c <xTaskResumeAll+0x118>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d05d      	beq.n	800e64a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e58e:	e02e      	b.n	800e5ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e590:	4b33      	ldr	r3, [pc, #204]	; (800e660 <xTaskResumeAll+0x11c>)
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	3318      	adds	r3, #24
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff f80d 	bl	800d5bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7ff f808 	bl	800d5bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	409a      	lsls	r2, r3
 800e5b4:	4b2b      	ldr	r3, [pc, #172]	; (800e664 <xTaskResumeAll+0x120>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	4a2a      	ldr	r2, [pc, #168]	; (800e664 <xTaskResumeAll+0x120>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4413      	add	r3, r2
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4a27      	ldr	r2, [pc, #156]	; (800e668 <xTaskResumeAll+0x124>)
 800e5cc:	441a      	add	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f7fe ff94 	bl	800d502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5de:	4b23      	ldr	r3, [pc, #140]	; (800e66c <xTaskResumeAll+0x128>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d302      	bcc.n	800e5ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e5e8:	4b21      	ldr	r3, [pc, #132]	; (800e670 <xTaskResumeAll+0x12c>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5ee:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <xTaskResumeAll+0x11c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1cc      	bne.n	800e590 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d001      	beq.n	800e600 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e5fc:	f000 fb1c 	bl	800ec38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e600:	4b1c      	ldr	r3, [pc, #112]	; (800e674 <xTaskResumeAll+0x130>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d010      	beq.n	800e62e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e60c:	f000 f836 	bl	800e67c <xTaskIncrementTick>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e616:	4b16      	ldr	r3, [pc, #88]	; (800e670 <xTaskResumeAll+0x12c>)
 800e618:	2201      	movs	r2, #1
 800e61a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3b01      	subs	r3, #1
 800e620:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1f1      	bne.n	800e60c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e628:	4b12      	ldr	r3, [pc, #72]	; (800e674 <xTaskResumeAll+0x130>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e62e:	4b10      	ldr	r3, [pc, #64]	; (800e670 <xTaskResumeAll+0x12c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d009      	beq.n	800e64a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e636:	2301      	movs	r3, #1
 800e638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e63a:	4b0f      	ldr	r3, [pc, #60]	; (800e678 <xTaskResumeAll+0x134>)
 800e63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e64a:	f000 fd7b 	bl	800f144 <vPortExitCritical>

	return xAlreadyYielded;
 800e64e:	68bb      	ldr	r3, [r7, #8]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20000768 	.word	0x20000768
 800e65c:	20000740 	.word	0x20000740
 800e660:	20000700 	.word	0x20000700
 800e664:	20000748 	.word	0x20000748
 800e668:	20000644 	.word	0x20000644
 800e66c:	20000640 	.word	0x20000640
 800e670:	20000754 	.word	0x20000754
 800e674:	20000750 	.word	0x20000750
 800e678:	e000ed04 	.word	0xe000ed04

0800e67c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e682:	2300      	movs	r3, #0
 800e684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e686:	4b4e      	ldr	r3, [pc, #312]	; (800e7c0 <xTaskIncrementTick+0x144>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f040 808e 	bne.w	800e7ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e690:	4b4c      	ldr	r3, [pc, #304]	; (800e7c4 <xTaskIncrementTick+0x148>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	3301      	adds	r3, #1
 800e696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e698:	4a4a      	ldr	r2, [pc, #296]	; (800e7c4 <xTaskIncrementTick+0x148>)
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d120      	bne.n	800e6e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6a4:	4b48      	ldr	r3, [pc, #288]	; (800e7c8 <xTaskIncrementTick+0x14c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	603b      	str	r3, [r7, #0]
}
 800e6c0:	bf00      	nop
 800e6c2:	e7fe      	b.n	800e6c2 <xTaskIncrementTick+0x46>
 800e6c4:	4b40      	ldr	r3, [pc, #256]	; (800e7c8 <xTaskIncrementTick+0x14c>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	60fb      	str	r3, [r7, #12]
 800e6ca:	4b40      	ldr	r3, [pc, #256]	; (800e7cc <xTaskIncrementTick+0x150>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a3e      	ldr	r2, [pc, #248]	; (800e7c8 <xTaskIncrementTick+0x14c>)
 800e6d0:	6013      	str	r3, [r2, #0]
 800e6d2:	4a3e      	ldr	r2, [pc, #248]	; (800e7cc <xTaskIncrementTick+0x150>)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	4b3d      	ldr	r3, [pc, #244]	; (800e7d0 <xTaskIncrementTick+0x154>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	4a3c      	ldr	r2, [pc, #240]	; (800e7d0 <xTaskIncrementTick+0x154>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	f000 faa9 	bl	800ec38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6e6:	4b3b      	ldr	r3, [pc, #236]	; (800e7d4 <xTaskIncrementTick+0x158>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d348      	bcc.n	800e782 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6f0:	4b35      	ldr	r3, [pc, #212]	; (800e7c8 <xTaskIncrementTick+0x14c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d104      	bne.n	800e704 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6fa:	4b36      	ldr	r3, [pc, #216]	; (800e7d4 <xTaskIncrementTick+0x158>)
 800e6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e700:	601a      	str	r2, [r3, #0]
					break;
 800e702:	e03e      	b.n	800e782 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e704:	4b30      	ldr	r3, [pc, #192]	; (800e7c8 <xTaskIncrementTick+0x14c>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d203      	bcs.n	800e724 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e71c:	4a2d      	ldr	r2, [pc, #180]	; (800e7d4 <xTaskIncrementTick+0x158>)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e722:	e02e      	b.n	800e782 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	3304      	adds	r3, #4
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fe ff47 	bl	800d5bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e732:	2b00      	cmp	r3, #0
 800e734:	d004      	beq.n	800e740 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	3318      	adds	r3, #24
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe ff3e 	bl	800d5bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	2201      	movs	r2, #1
 800e746:	409a      	lsls	r2, r3
 800e748:	4b23      	ldr	r3, [pc, #140]	; (800e7d8 <xTaskIncrementTick+0x15c>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	4a22      	ldr	r2, [pc, #136]	; (800e7d8 <xTaskIncrementTick+0x15c>)
 800e750:	6013      	str	r3, [r2, #0]
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e756:	4613      	mov	r3, r2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4413      	add	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4a1f      	ldr	r2, [pc, #124]	; (800e7dc <xTaskIncrementTick+0x160>)
 800e760:	441a      	add	r2, r3
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	3304      	adds	r3, #4
 800e766:	4619      	mov	r1, r3
 800e768:	4610      	mov	r0, r2
 800e76a:	f7fe feca 	bl	800d502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e772:	4b1b      	ldr	r3, [pc, #108]	; (800e7e0 <xTaskIncrementTick+0x164>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e778:	429a      	cmp	r2, r3
 800e77a:	d3b9      	bcc.n	800e6f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e77c:	2301      	movs	r3, #1
 800e77e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e780:	e7b6      	b.n	800e6f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e782:	4b17      	ldr	r3, [pc, #92]	; (800e7e0 <xTaskIncrementTick+0x164>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e788:	4914      	ldr	r1, [pc, #80]	; (800e7dc <xTaskIncrementTick+0x160>)
 800e78a:	4613      	mov	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4413      	add	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	440b      	add	r3, r1
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d901      	bls.n	800e79e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e79a:	2301      	movs	r3, #1
 800e79c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e79e:	4b11      	ldr	r3, [pc, #68]	; (800e7e4 <xTaskIncrementTick+0x168>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d007      	beq.n	800e7b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	617b      	str	r3, [r7, #20]
 800e7aa:	e004      	b.n	800e7b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7ac:	4b0e      	ldr	r3, [pc, #56]	; (800e7e8 <xTaskIncrementTick+0x16c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	4a0d      	ldr	r2, [pc, #52]	; (800e7e8 <xTaskIncrementTick+0x16c>)
 800e7b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7b6:	697b      	ldr	r3, [r7, #20]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3718      	adds	r7, #24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20000768 	.word	0x20000768
 800e7c4:	20000744 	.word	0x20000744
 800e7c8:	200006f8 	.word	0x200006f8
 800e7cc:	200006fc 	.word	0x200006fc
 800e7d0:	20000758 	.word	0x20000758
 800e7d4:	20000760 	.word	0x20000760
 800e7d8:	20000748 	.word	0x20000748
 800e7dc:	20000644 	.word	0x20000644
 800e7e0:	20000640 	.word	0x20000640
 800e7e4:	20000754 	.word	0x20000754
 800e7e8:	20000750 	.word	0x20000750

0800e7ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b087      	sub	sp, #28
 800e7f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e7f2:	4b29      	ldr	r3, [pc, #164]	; (800e898 <vTaskSwitchContext+0xac>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d003      	beq.n	800e802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7fa:	4b28      	ldr	r3, [pc, #160]	; (800e89c <vTaskSwitchContext+0xb0>)
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e800:	e044      	b.n	800e88c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e802:	4b26      	ldr	r3, [pc, #152]	; (800e89c <vTaskSwitchContext+0xb0>)
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e808:	4b25      	ldr	r3, [pc, #148]	; (800e8a0 <vTaskSwitchContext+0xb4>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	fab3 f383 	clz	r3, r3
 800e814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	f1c3 031f 	rsb	r3, r3, #31
 800e81c:	617b      	str	r3, [r7, #20]
 800e81e:	4921      	ldr	r1, [pc, #132]	; (800e8a4 <vTaskSwitchContext+0xb8>)
 800e820:	697a      	ldr	r2, [r7, #20]
 800e822:	4613      	mov	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	440b      	add	r3, r1
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10a      	bne.n	800e848 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	607b      	str	r3, [r7, #4]
}
 800e844:	bf00      	nop
 800e846:	e7fe      	b.n	800e846 <vTaskSwitchContext+0x5a>
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	4613      	mov	r3, r2
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4a14      	ldr	r2, [pc, #80]	; (800e8a4 <vTaskSwitchContext+0xb8>)
 800e854:	4413      	add	r3, r2
 800e856:	613b      	str	r3, [r7, #16]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	685a      	ldr	r2, [r3, #4]
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	605a      	str	r2, [r3, #4]
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	3308      	adds	r3, #8
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d104      	bne.n	800e878 <vTaskSwitchContext+0x8c>
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	605a      	str	r2, [r3, #4]
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	4a0a      	ldr	r2, [pc, #40]	; (800e8a8 <vTaskSwitchContext+0xbc>)
 800e880:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e882:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <vTaskSwitchContext+0xbc>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	334c      	adds	r3, #76	; 0x4c
 800e888:	4a08      	ldr	r2, [pc, #32]	; (800e8ac <vTaskSwitchContext+0xc0>)
 800e88a:	6013      	str	r3, [r2, #0]
}
 800e88c:	bf00      	nop
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	20000768 	.word	0x20000768
 800e89c:	20000754 	.word	0x20000754
 800e8a0:	20000748 	.word	0x20000748
 800e8a4:	20000644 	.word	0x20000644
 800e8a8:	20000640 	.word	0x20000640
 800e8ac:	2000009c 	.word	0x2000009c

0800e8b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d10a      	bne.n	800e8d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	60fb      	str	r3, [r7, #12]
}
 800e8d2:	bf00      	nop
 800e8d4:	e7fe      	b.n	800e8d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8d6:	4b07      	ldr	r3, [pc, #28]	; (800e8f4 <vTaskPlaceOnEventList+0x44>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3318      	adds	r3, #24
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7fe fe33 	bl	800d54a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	6838      	ldr	r0, [r7, #0]
 800e8e8:	f000 fa6a 	bl	800edc0 <prvAddCurrentTaskToDelayedList>
}
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	20000640 	.word	0x20000640

0800e8f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10a      	bne.n	800e924 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	60fb      	str	r3, [r7, #12]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	3318      	adds	r3, #24
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fe fe47 	bl	800d5bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e92e:	4b1d      	ldr	r3, [pc, #116]	; (800e9a4 <xTaskRemoveFromEventList+0xac>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d11c      	bne.n	800e970 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	3304      	adds	r3, #4
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe fe3e 	bl	800d5bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e944:	2201      	movs	r2, #1
 800e946:	409a      	lsls	r2, r3
 800e948:	4b17      	ldr	r3, [pc, #92]	; (800e9a8 <xTaskRemoveFromEventList+0xb0>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	4a16      	ldr	r2, [pc, #88]	; (800e9a8 <xTaskRemoveFromEventList+0xb0>)
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e956:	4613      	mov	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4a13      	ldr	r2, [pc, #76]	; (800e9ac <xTaskRemoveFromEventList+0xb4>)
 800e960:	441a      	add	r2, r3
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	3304      	adds	r3, #4
 800e966:	4619      	mov	r1, r3
 800e968:	4610      	mov	r0, r2
 800e96a:	f7fe fdca 	bl	800d502 <vListInsertEnd>
 800e96e:	e005      	b.n	800e97c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	3318      	adds	r3, #24
 800e974:	4619      	mov	r1, r3
 800e976:	480e      	ldr	r0, [pc, #56]	; (800e9b0 <xTaskRemoveFromEventList+0xb8>)
 800e978:	f7fe fdc3 	bl	800d502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e980:	4b0c      	ldr	r3, [pc, #48]	; (800e9b4 <xTaskRemoveFromEventList+0xbc>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e986:	429a      	cmp	r2, r3
 800e988:	d905      	bls.n	800e996 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e98a:	2301      	movs	r3, #1
 800e98c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e98e:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <xTaskRemoveFromEventList+0xc0>)
 800e990:	2201      	movs	r2, #1
 800e992:	601a      	str	r2, [r3, #0]
 800e994:	e001      	b.n	800e99a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e996:	2300      	movs	r3, #0
 800e998:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e99a:	697b      	ldr	r3, [r7, #20]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20000768 	.word	0x20000768
 800e9a8:	20000748 	.word	0x20000748
 800e9ac:	20000644 	.word	0x20000644
 800e9b0:	20000700 	.word	0x20000700
 800e9b4:	20000640 	.word	0x20000640
 800e9b8:	20000754 	.word	0x20000754

0800e9bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9c4:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <vTaskInternalSetTimeOutState+0x24>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9cc:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <vTaskInternalSetTimeOutState+0x28>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	605a      	str	r2, [r3, #4]
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	20000758 	.word	0x20000758
 800e9e4:	20000744 	.word	0x20000744

0800e9e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10a      	bne.n	800ea0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fc:	f383 8811 	msr	BASEPRI, r3
 800ea00:	f3bf 8f6f 	isb	sy
 800ea04:	f3bf 8f4f 	dsb	sy
 800ea08:	613b      	str	r3, [r7, #16]
}
 800ea0a:	bf00      	nop
 800ea0c:	e7fe      	b.n	800ea0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10a      	bne.n	800ea2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	f383 8811 	msr	BASEPRI, r3
 800ea1c:	f3bf 8f6f 	isb	sy
 800ea20:	f3bf 8f4f 	dsb	sy
 800ea24:	60fb      	str	r3, [r7, #12]
}
 800ea26:	bf00      	nop
 800ea28:	e7fe      	b.n	800ea28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ea2a:	f000 fb5b 	bl	800f0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea2e:	4b1d      	ldr	r3, [pc, #116]	; (800eaa4 <xTaskCheckForTimeOut+0xbc>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	69ba      	ldr	r2, [r7, #24]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea46:	d102      	bne.n	800ea4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	61fb      	str	r3, [r7, #28]
 800ea4c:	e023      	b.n	800ea96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	4b15      	ldr	r3, [pc, #84]	; (800eaa8 <xTaskCheckForTimeOut+0xc0>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d007      	beq.n	800ea6a <xTaskCheckForTimeOut+0x82>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	69ba      	ldr	r2, [r7, #24]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d302      	bcc.n	800ea6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea64:	2301      	movs	r3, #1
 800ea66:	61fb      	str	r3, [r7, #28]
 800ea68:	e015      	b.n	800ea96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d20b      	bcs.n	800ea8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	1ad2      	subs	r2, r2, r3
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff ff9b 	bl	800e9bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea86:	2300      	movs	r3, #0
 800ea88:	61fb      	str	r3, [r7, #28]
 800ea8a:	e004      	b.n	800ea96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea92:	2301      	movs	r3, #1
 800ea94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea96:	f000 fb55 	bl	800f144 <vPortExitCritical>

	return xReturn;
 800ea9a:	69fb      	ldr	r3, [r7, #28]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3720      	adds	r7, #32
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20000744 	.word	0x20000744
 800eaa8:	20000758 	.word	0x20000758

0800eaac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eaac:	b480      	push	{r7}
 800eaae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eab0:	4b03      	ldr	r3, [pc, #12]	; (800eac0 <vTaskMissedYield+0x14>)
 800eab2:	2201      	movs	r2, #1
 800eab4:	601a      	str	r2, [r3, #0]
}
 800eab6:	bf00      	nop
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	20000754 	.word	0x20000754

0800eac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eacc:	f000 f852 	bl	800eb74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ead0:	4b06      	ldr	r3, [pc, #24]	; (800eaec <prvIdleTask+0x28>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d9f9      	bls.n	800eacc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ead8:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <prvIdleTask+0x2c>)
 800eada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eade:	601a      	str	r2, [r3, #0]
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eae8:	e7f0      	b.n	800eacc <prvIdleTask+0x8>
 800eaea:	bf00      	nop
 800eaec:	20000644 	.word	0x20000644
 800eaf0:	e000ed04 	.word	0xe000ed04

0800eaf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eafa:	2300      	movs	r3, #0
 800eafc:	607b      	str	r3, [r7, #4]
 800eafe:	e00c      	b.n	800eb1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4a12      	ldr	r2, [pc, #72]	; (800eb54 <prvInitialiseTaskLists+0x60>)
 800eb0c:	4413      	add	r3, r2
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe fcca 	bl	800d4a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3301      	adds	r3, #1
 800eb18:	607b      	str	r3, [r7, #4]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b06      	cmp	r3, #6
 800eb1e:	d9ef      	bls.n	800eb00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb20:	480d      	ldr	r0, [pc, #52]	; (800eb58 <prvInitialiseTaskLists+0x64>)
 800eb22:	f7fe fcc1 	bl	800d4a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb26:	480d      	ldr	r0, [pc, #52]	; (800eb5c <prvInitialiseTaskLists+0x68>)
 800eb28:	f7fe fcbe 	bl	800d4a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb2c:	480c      	ldr	r0, [pc, #48]	; (800eb60 <prvInitialiseTaskLists+0x6c>)
 800eb2e:	f7fe fcbb 	bl	800d4a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb32:	480c      	ldr	r0, [pc, #48]	; (800eb64 <prvInitialiseTaskLists+0x70>)
 800eb34:	f7fe fcb8 	bl	800d4a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb38:	480b      	ldr	r0, [pc, #44]	; (800eb68 <prvInitialiseTaskLists+0x74>)
 800eb3a:	f7fe fcb5 	bl	800d4a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb3e:	4b0b      	ldr	r3, [pc, #44]	; (800eb6c <prvInitialiseTaskLists+0x78>)
 800eb40:	4a05      	ldr	r2, [pc, #20]	; (800eb58 <prvInitialiseTaskLists+0x64>)
 800eb42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb44:	4b0a      	ldr	r3, [pc, #40]	; (800eb70 <prvInitialiseTaskLists+0x7c>)
 800eb46:	4a05      	ldr	r2, [pc, #20]	; (800eb5c <prvInitialiseTaskLists+0x68>)
 800eb48:	601a      	str	r2, [r3, #0]
}
 800eb4a:	bf00      	nop
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	20000644 	.word	0x20000644
 800eb58:	200006d0 	.word	0x200006d0
 800eb5c:	200006e4 	.word	0x200006e4
 800eb60:	20000700 	.word	0x20000700
 800eb64:	20000714 	.word	0x20000714
 800eb68:	2000072c 	.word	0x2000072c
 800eb6c:	200006f8 	.word	0x200006f8
 800eb70:	200006fc 	.word	0x200006fc

0800eb74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb7a:	e019      	b.n	800ebb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb7c:	f000 fab2 	bl	800f0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb80:	4b10      	ldr	r3, [pc, #64]	; (800ebc4 <prvCheckTasksWaitingTermination+0x50>)
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	3304      	adds	r3, #4
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fe fd15 	bl	800d5bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb92:	4b0d      	ldr	r3, [pc, #52]	; (800ebc8 <prvCheckTasksWaitingTermination+0x54>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	4a0b      	ldr	r2, [pc, #44]	; (800ebc8 <prvCheckTasksWaitingTermination+0x54>)
 800eb9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb9c:	4b0b      	ldr	r3, [pc, #44]	; (800ebcc <prvCheckTasksWaitingTermination+0x58>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	4a0a      	ldr	r2, [pc, #40]	; (800ebcc <prvCheckTasksWaitingTermination+0x58>)
 800eba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eba6:	f000 facd 	bl	800f144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f810 	bl	800ebd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebb0:	4b06      	ldr	r3, [pc, #24]	; (800ebcc <prvCheckTasksWaitingTermination+0x58>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d1e1      	bne.n	800eb7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebb8:	bf00      	nop
 800ebba:	bf00      	nop
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20000714 	.word	0x20000714
 800ebc8:	20000740 	.word	0x20000740
 800ebcc:	20000728 	.word	0x20000728

0800ebd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	334c      	adds	r3, #76	; 0x4c
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f001 fc23 	bl	8010428 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d108      	bne.n	800ebfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f000 fc65 	bl	800f4c0 <vPortFree>
				vPortFree( pxTCB );
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 fc62 	bl	800f4c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebfc:	e018      	b.n	800ec30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d103      	bne.n	800ec10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 fc59 	bl	800f4c0 <vPortFree>
	}
 800ec0e:	e00f      	b.n	800ec30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ec16:	2b02      	cmp	r3, #2
 800ec18:	d00a      	beq.n	800ec30 <prvDeleteTCB+0x60>
	__asm volatile
 800ec1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1e:	f383 8811 	msr	BASEPRI, r3
 800ec22:	f3bf 8f6f 	isb	sy
 800ec26:	f3bf 8f4f 	dsb	sy
 800ec2a:	60fb      	str	r3, [r7, #12]
}
 800ec2c:	bf00      	nop
 800ec2e:	e7fe      	b.n	800ec2e <prvDeleteTCB+0x5e>
	}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec48:	4b0a      	ldr	r3, [pc, #40]	; (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec50:	e008      	b.n	800ec64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec52:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	4a04      	ldr	r2, [pc, #16]	; (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec62:	6013      	str	r3, [r2, #0]
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	200006f8 	.word	0x200006f8
 800ec74:	20000760 	.word	0x20000760

0800ec78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec7e:	4b0b      	ldr	r3, [pc, #44]	; (800ecac <xTaskGetSchedulerState+0x34>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec86:	2301      	movs	r3, #1
 800ec88:	607b      	str	r3, [r7, #4]
 800ec8a:	e008      	b.n	800ec9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec8c:	4b08      	ldr	r3, [pc, #32]	; (800ecb0 <xTaskGetSchedulerState+0x38>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec94:	2302      	movs	r3, #2
 800ec96:	607b      	str	r3, [r7, #4]
 800ec98:	e001      	b.n	800ec9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec9e:	687b      	ldr	r3, [r7, #4]
	}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	2000074c 	.word	0x2000074c
 800ecb0:	20000768 	.word	0x20000768

0800ecb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d06e      	beq.n	800eda8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecca:	4b3a      	ldr	r3, [pc, #232]	; (800edb4 <xTaskPriorityDisinherit+0x100>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d00a      	beq.n	800ecea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60fb      	str	r3, [r7, #12]
}
 800ece6:	bf00      	nop
 800ece8:	e7fe      	b.n	800ece8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10a      	bne.n	800ed08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	60bb      	str	r3, [r7, #8]
}
 800ed04:	bf00      	nop
 800ed06:	e7fe      	b.n	800ed06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed0c:	1e5a      	subs	r2, r3, #1
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d044      	beq.n	800eda8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d140      	bne.n	800eda8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fe fc46 	bl	800d5bc <uxListRemove>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d115      	bne.n	800ed62 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3a:	491f      	ldr	r1, [pc, #124]	; (800edb8 <xTaskPriorityDisinherit+0x104>)
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	440b      	add	r3, r1
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10a      	bne.n	800ed62 <xTaskPriorityDisinherit+0xae>
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed50:	2201      	movs	r2, #1
 800ed52:	fa02 f303 	lsl.w	r3, r2, r3
 800ed56:	43da      	mvns	r2, r3
 800ed58:	4b18      	ldr	r3, [pc, #96]	; (800edbc <xTaskPriorityDisinherit+0x108>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4013      	ands	r3, r2
 800ed5e:	4a17      	ldr	r2, [pc, #92]	; (800edbc <xTaskPriorityDisinherit+0x108>)
 800ed60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6e:	f1c3 0207 	rsb	r2, r3, #7
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	409a      	lsls	r2, r3
 800ed7e:	4b0f      	ldr	r3, [pc, #60]	; (800edbc <xTaskPriorityDisinherit+0x108>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	4a0d      	ldr	r2, [pc, #52]	; (800edbc <xTaskPriorityDisinherit+0x108>)
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4a08      	ldr	r2, [pc, #32]	; (800edb8 <xTaskPriorityDisinherit+0x104>)
 800ed96:	441a      	add	r2, r3
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4610      	mov	r0, r2
 800eda0:	f7fe fbaf 	bl	800d502 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eda4:	2301      	movs	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eda8:	697b      	ldr	r3, [r7, #20]
	}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	20000640 	.word	0x20000640
 800edb8:	20000644 	.word	0x20000644
 800edbc:	20000748 	.word	0x20000748

0800edc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edca:	4b29      	ldr	r3, [pc, #164]	; (800ee70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edd0:	4b28      	ldr	r3, [pc, #160]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	3304      	adds	r3, #4
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fe fbf0 	bl	800d5bc <uxListRemove>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10b      	bne.n	800edfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ede2:	4b24      	ldr	r3, [pc, #144]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede8:	2201      	movs	r2, #1
 800edea:	fa02 f303 	lsl.w	r3, r2, r3
 800edee:	43da      	mvns	r2, r3
 800edf0:	4b21      	ldr	r3, [pc, #132]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4013      	ands	r3, r2
 800edf6:	4a20      	ldr	r2, [pc, #128]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800edf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee00:	d10a      	bne.n	800ee18 <prvAddCurrentTaskToDelayedList+0x58>
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d007      	beq.n	800ee18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee08:	4b1a      	ldr	r3, [pc, #104]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	3304      	adds	r3, #4
 800ee0e:	4619      	mov	r1, r3
 800ee10:	481a      	ldr	r0, [pc, #104]	; (800ee7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee12:	f7fe fb76 	bl	800d502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee16:	e026      	b.n	800ee66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee20:	4b14      	ldr	r3, [pc, #80]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d209      	bcs.n	800ee44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee30:	4b13      	ldr	r3, [pc, #76]	; (800ee80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	4b0f      	ldr	r3, [pc, #60]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	4610      	mov	r0, r2
 800ee3e:	f7fe fb84 	bl	800d54a <vListInsert>
}
 800ee42:	e010      	b.n	800ee66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee44:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7fe fb7a 	bl	800d54a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee56:	4b0c      	ldr	r3, [pc, #48]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	68ba      	ldr	r2, [r7, #8]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d202      	bcs.n	800ee66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ee60:	4a09      	ldr	r2, [pc, #36]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	6013      	str	r3, [r2, #0]
}
 800ee66:	bf00      	nop
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	20000744 	.word	0x20000744
 800ee74:	20000640 	.word	0x20000640
 800ee78:	20000748 	.word	0x20000748
 800ee7c:	2000072c 	.word	0x2000072c
 800ee80:	200006fc 	.word	0x200006fc
 800ee84:	200006f8 	.word	0x200006f8
 800ee88:	20000760 	.word	0x20000760

0800ee8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b085      	sub	sp, #20
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	3b04      	subs	r3, #4
 800ee9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	3b04      	subs	r3, #4
 800eeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	f023 0201 	bic.w	r2, r3, #1
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	3b04      	subs	r3, #4
 800eeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eebc:	4a0c      	ldr	r2, [pc, #48]	; (800eef0 <pxPortInitialiseStack+0x64>)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	3b14      	subs	r3, #20
 800eec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	3b04      	subs	r3, #4
 800eed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f06f 0202 	mvn.w	r2, #2
 800eeda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	3b20      	subs	r3, #32
 800eee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eee2:	68fb      	ldr	r3, [r7, #12]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr
 800eef0:	0800eef5 	.word	0x0800eef5

0800eef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eefe:	4b12      	ldr	r3, [pc, #72]	; (800ef48 <prvTaskExitError+0x54>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef06:	d00a      	beq.n	800ef1e <prvTaskExitError+0x2a>
	__asm volatile
 800ef08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	60fb      	str	r3, [r7, #12]
}
 800ef1a:	bf00      	nop
 800ef1c:	e7fe      	b.n	800ef1c <prvTaskExitError+0x28>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	60bb      	str	r3, [r7, #8]
}
 800ef30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef32:	bf00      	nop
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d0fc      	beq.n	800ef34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef3a:	bf00      	nop
 800ef3c:	bf00      	nop
 800ef3e:	3714      	adds	r7, #20
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr
 800ef48:	20000040 	.word	0x20000040
 800ef4c:	00000000 	.word	0x00000000

0800ef50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef50:	4b07      	ldr	r3, [pc, #28]	; (800ef70 <pxCurrentTCBConst2>)
 800ef52:	6819      	ldr	r1, [r3, #0]
 800ef54:	6808      	ldr	r0, [r1, #0]
 800ef56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5a:	f380 8809 	msr	PSP, r0
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f04f 0000 	mov.w	r0, #0
 800ef66:	f380 8811 	msr	BASEPRI, r0
 800ef6a:	4770      	bx	lr
 800ef6c:	f3af 8000 	nop.w

0800ef70 <pxCurrentTCBConst2>:
 800ef70:	20000640 	.word	0x20000640
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef74:	bf00      	nop
 800ef76:	bf00      	nop

0800ef78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef78:	4808      	ldr	r0, [pc, #32]	; (800ef9c <prvPortStartFirstTask+0x24>)
 800ef7a:	6800      	ldr	r0, [r0, #0]
 800ef7c:	6800      	ldr	r0, [r0, #0]
 800ef7e:	f380 8808 	msr	MSP, r0
 800ef82:	f04f 0000 	mov.w	r0, #0
 800ef86:	f380 8814 	msr	CONTROL, r0
 800ef8a:	b662      	cpsie	i
 800ef8c:	b661      	cpsie	f
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	df00      	svc	0
 800ef98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef9a:	bf00      	nop
 800ef9c:	e000ed08 	.word	0xe000ed08

0800efa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b086      	sub	sp, #24
 800efa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800efa6:	4b46      	ldr	r3, [pc, #280]	; (800f0c0 <xPortStartScheduler+0x120>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4a46      	ldr	r2, [pc, #280]	; (800f0c4 <xPortStartScheduler+0x124>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d10a      	bne.n	800efc6 <xPortStartScheduler+0x26>
	__asm volatile
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	613b      	str	r3, [r7, #16]
}
 800efc2:	bf00      	nop
 800efc4:	e7fe      	b.n	800efc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800efc6:	4b3e      	ldr	r3, [pc, #248]	; (800f0c0 <xPortStartScheduler+0x120>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a3f      	ldr	r2, [pc, #252]	; (800f0c8 <xPortStartScheduler+0x128>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d10a      	bne.n	800efe6 <xPortStartScheduler+0x46>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	60fb      	str	r3, [r7, #12]
}
 800efe2:	bf00      	nop
 800efe4:	e7fe      	b.n	800efe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efe6:	4b39      	ldr	r3, [pc, #228]	; (800f0cc <xPortStartScheduler+0x12c>)
 800efe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	22ff      	movs	r2, #255	; 0xff
 800eff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	b2db      	uxtb	r3, r3
 800effe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f000:	78fb      	ldrb	r3, [r7, #3]
 800f002:	b2db      	uxtb	r3, r3
 800f004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	4b31      	ldr	r3, [pc, #196]	; (800f0d0 <xPortStartScheduler+0x130>)
 800f00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f00e:	4b31      	ldr	r3, [pc, #196]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f010:	2207      	movs	r2, #7
 800f012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f014:	e009      	b.n	800f02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f016:	4b2f      	ldr	r3, [pc, #188]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	4a2d      	ldr	r2, [pc, #180]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f020:	78fb      	ldrb	r3, [r7, #3]
 800f022:	b2db      	uxtb	r3, r3
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	b2db      	uxtb	r3, r3
 800f028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f032:	2b80      	cmp	r3, #128	; 0x80
 800f034:	d0ef      	beq.n	800f016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f036:	4b27      	ldr	r3, [pc, #156]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f1c3 0307 	rsb	r3, r3, #7
 800f03e:	2b04      	cmp	r3, #4
 800f040:	d00a      	beq.n	800f058 <xPortStartScheduler+0xb8>
	__asm volatile
 800f042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f046:	f383 8811 	msr	BASEPRI, r3
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	60bb      	str	r3, [r7, #8]
}
 800f054:	bf00      	nop
 800f056:	e7fe      	b.n	800f056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f058:	4b1e      	ldr	r3, [pc, #120]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	021b      	lsls	r3, r3, #8
 800f05e:	4a1d      	ldr	r2, [pc, #116]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f062:	4b1c      	ldr	r3, [pc, #112]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f06a:	4a1a      	ldr	r2, [pc, #104]	; (800f0d4 <xPortStartScheduler+0x134>)
 800f06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	b2da      	uxtb	r2, r3
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f076:	4b18      	ldr	r3, [pc, #96]	; (800f0d8 <xPortStartScheduler+0x138>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a17      	ldr	r2, [pc, #92]	; (800f0d8 <xPortStartScheduler+0x138>)
 800f07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f082:	4b15      	ldr	r3, [pc, #84]	; (800f0d8 <xPortStartScheduler+0x138>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a14      	ldr	r2, [pc, #80]	; (800f0d8 <xPortStartScheduler+0x138>)
 800f088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f08e:	f000 f8dd 	bl	800f24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f092:	4b12      	ldr	r3, [pc, #72]	; (800f0dc <xPortStartScheduler+0x13c>)
 800f094:	2200      	movs	r2, #0
 800f096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f098:	f000 f8fc 	bl	800f294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f09c:	4b10      	ldr	r3, [pc, #64]	; (800f0e0 <xPortStartScheduler+0x140>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a0f      	ldr	r2, [pc, #60]	; (800f0e0 <xPortStartScheduler+0x140>)
 800f0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f0a8:	f7ff ff66 	bl	800ef78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f0ac:	f7ff fb9e 	bl	800e7ec <vTaskSwitchContext>
	prvTaskExitError();
 800f0b0:	f7ff ff20 	bl	800eef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3718      	adds	r7, #24
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	e000ed00 	.word	0xe000ed00
 800f0c4:	410fc271 	.word	0x410fc271
 800f0c8:	410fc270 	.word	0x410fc270
 800f0cc:	e000e400 	.word	0xe000e400
 800f0d0:	2000076c 	.word	0x2000076c
 800f0d4:	20000770 	.word	0x20000770
 800f0d8:	e000ed20 	.word	0xe000ed20
 800f0dc:	20000040 	.word	0x20000040
 800f0e0:	e000ef34 	.word	0xe000ef34

0800f0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	607b      	str	r3, [r7, #4]
}
 800f0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0fe:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <vPortEnterCritical+0x58>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3301      	adds	r3, #1
 800f104:	4a0d      	ldr	r2, [pc, #52]	; (800f13c <vPortEnterCritical+0x58>)
 800f106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f108:	4b0c      	ldr	r3, [pc, #48]	; (800f13c <vPortEnterCritical+0x58>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d10f      	bne.n	800f130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f110:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <vPortEnterCritical+0x5c>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00a      	beq.n	800f130 <vPortEnterCritical+0x4c>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	603b      	str	r3, [r7, #0]
}
 800f12c:	bf00      	nop
 800f12e:	e7fe      	b.n	800f12e <vPortEnterCritical+0x4a>
	}
}
 800f130:	bf00      	nop
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	20000040 	.word	0x20000040
 800f140:	e000ed04 	.word	0xe000ed04

0800f144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f14a:	4b12      	ldr	r3, [pc, #72]	; (800f194 <vPortExitCritical+0x50>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d10a      	bne.n	800f168 <vPortExitCritical+0x24>
	__asm volatile
 800f152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	607b      	str	r3, [r7, #4]
}
 800f164:	bf00      	nop
 800f166:	e7fe      	b.n	800f166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f168:	4b0a      	ldr	r3, [pc, #40]	; (800f194 <vPortExitCritical+0x50>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	4a09      	ldr	r2, [pc, #36]	; (800f194 <vPortExitCritical+0x50>)
 800f170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f172:	4b08      	ldr	r3, [pc, #32]	; (800f194 <vPortExitCritical+0x50>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d105      	bne.n	800f186 <vPortExitCritical+0x42>
 800f17a:	2300      	movs	r3, #0
 800f17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	f383 8811 	msr	BASEPRI, r3
}
 800f184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f186:	bf00      	nop
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	20000040 	.word	0x20000040
	...

0800f1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f1a0:	f3ef 8009 	mrs	r0, PSP
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	4b15      	ldr	r3, [pc, #84]	; (800f200 <pxCurrentTCBConst>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	f01e 0f10 	tst.w	lr, #16
 800f1b0:	bf08      	it	eq
 800f1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ba:	6010      	str	r0, [r2, #0]
 800f1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f1c4:	f380 8811 	msr	BASEPRI, r0
 800f1c8:	f3bf 8f4f 	dsb	sy
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f7ff fb0c 	bl	800e7ec <vTaskSwitchContext>
 800f1d4:	f04f 0000 	mov.w	r0, #0
 800f1d8:	f380 8811 	msr	BASEPRI, r0
 800f1dc:	bc09      	pop	{r0, r3}
 800f1de:	6819      	ldr	r1, [r3, #0]
 800f1e0:	6808      	ldr	r0, [r1, #0]
 800f1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e6:	f01e 0f10 	tst.w	lr, #16
 800f1ea:	bf08      	it	eq
 800f1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1f0:	f380 8809 	msr	PSP, r0
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	f3af 8000 	nop.w

0800f200 <pxCurrentTCBConst>:
 800f200:	20000640 	.word	0x20000640
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f204:	bf00      	nop
 800f206:	bf00      	nop

0800f208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	607b      	str	r3, [r7, #4]
}
 800f220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f222:	f7ff fa2b 	bl	800e67c <xTaskIncrementTick>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d003      	beq.n	800f234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <xPortSysTickHandler+0x40>)
 800f22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	2300      	movs	r3, #0
 800f236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	f383 8811 	msr	BASEPRI, r3
}
 800f23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f240:	bf00      	nop
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	e000ed04 	.word	0xe000ed04

0800f24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f24c:	b480      	push	{r7}
 800f24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f250:	4b0b      	ldr	r3, [pc, #44]	; (800f280 <vPortSetupTimerInterrupt+0x34>)
 800f252:	2200      	movs	r2, #0
 800f254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f256:	4b0b      	ldr	r3, [pc, #44]	; (800f284 <vPortSetupTimerInterrupt+0x38>)
 800f258:	2200      	movs	r2, #0
 800f25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f25c:	4b0a      	ldr	r3, [pc, #40]	; (800f288 <vPortSetupTimerInterrupt+0x3c>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a0a      	ldr	r2, [pc, #40]	; (800f28c <vPortSetupTimerInterrupt+0x40>)
 800f262:	fba2 2303 	umull	r2, r3, r2, r3
 800f266:	099b      	lsrs	r3, r3, #6
 800f268:	4a09      	ldr	r2, [pc, #36]	; (800f290 <vPortSetupTimerInterrupt+0x44>)
 800f26a:	3b01      	subs	r3, #1
 800f26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f26e:	4b04      	ldr	r3, [pc, #16]	; (800f280 <vPortSetupTimerInterrupt+0x34>)
 800f270:	2207      	movs	r2, #7
 800f272:	601a      	str	r2, [r3, #0]
}
 800f274:	bf00      	nop
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	e000e010 	.word	0xe000e010
 800f284:	e000e018 	.word	0xe000e018
 800f288:	20000000 	.word	0x20000000
 800f28c:	10624dd3 	.word	0x10624dd3
 800f290:	e000e014 	.word	0xe000e014

0800f294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f2a4 <vPortEnableVFP+0x10>
 800f298:	6801      	ldr	r1, [r0, #0]
 800f29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f29e:	6001      	str	r1, [r0, #0]
 800f2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f2a2:	bf00      	nop
 800f2a4:	e000ed88 	.word	0xe000ed88

0800f2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f2ae:	f3ef 8305 	mrs	r3, IPSR
 800f2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b0f      	cmp	r3, #15
 800f2b8:	d914      	bls.n	800f2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f2ba:	4a17      	ldr	r2, [pc, #92]	; (800f318 <vPortValidateInterruptPriority+0x70>)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	4413      	add	r3, r2
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f2c4:	4b15      	ldr	r3, [pc, #84]	; (800f31c <vPortValidateInterruptPriority+0x74>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	7afa      	ldrb	r2, [r7, #11]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d20a      	bcs.n	800f2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	f383 8811 	msr	BASEPRI, r3
 800f2d6:	f3bf 8f6f 	isb	sy
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	607b      	str	r3, [r7, #4]
}
 800f2e0:	bf00      	nop
 800f2e2:	e7fe      	b.n	800f2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2e4:	4b0e      	ldr	r3, [pc, #56]	; (800f320 <vPortValidateInterruptPriority+0x78>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f2ec:	4b0d      	ldr	r3, [pc, #52]	; (800f324 <vPortValidateInterruptPriority+0x7c>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d90a      	bls.n	800f30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f8:	f383 8811 	msr	BASEPRI, r3
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	603b      	str	r3, [r7, #0]
}
 800f306:	bf00      	nop
 800f308:	e7fe      	b.n	800f308 <vPortValidateInterruptPriority+0x60>
	}
 800f30a:	bf00      	nop
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	e000e3f0 	.word	0xe000e3f0
 800f31c:	2000076c 	.word	0x2000076c
 800f320:	e000ed0c 	.word	0xe000ed0c
 800f324:	20000770 	.word	0x20000770

0800f328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b08a      	sub	sp, #40	; 0x28
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f330:	2300      	movs	r3, #0
 800f332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f334:	f7ff f8f8 	bl	800e528 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f338:	4b5b      	ldr	r3, [pc, #364]	; (800f4a8 <pvPortMalloc+0x180>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d101      	bne.n	800f344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f340:	f000 f920 	bl	800f584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f344:	4b59      	ldr	r3, [pc, #356]	; (800f4ac <pvPortMalloc+0x184>)
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4013      	ands	r3, r2
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f040 8093 	bne.w	800f478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d01d      	beq.n	800f394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f358:	2208      	movs	r2, #8
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4413      	add	r3, r2
 800f35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f003 0307 	and.w	r3, r3, #7
 800f366:	2b00      	cmp	r3, #0
 800f368:	d014      	beq.n	800f394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f023 0307 	bic.w	r3, r3, #7
 800f370:	3308      	adds	r3, #8
 800f372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f003 0307 	and.w	r3, r3, #7
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00a      	beq.n	800f394 <pvPortMalloc+0x6c>
	__asm volatile
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	617b      	str	r3, [r7, #20]
}
 800f390:	bf00      	nop
 800f392:	e7fe      	b.n	800f392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d06e      	beq.n	800f478 <pvPortMalloc+0x150>
 800f39a:	4b45      	ldr	r3, [pc, #276]	; (800f4b0 <pvPortMalloc+0x188>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d869      	bhi.n	800f478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f3a4:	4b43      	ldr	r3, [pc, #268]	; (800f4b4 <pvPortMalloc+0x18c>)
 800f3a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f3a8:	4b42      	ldr	r3, [pc, #264]	; (800f4b4 <pvPortMalloc+0x18c>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3ae:	e004      	b.n	800f3ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d903      	bls.n	800f3cc <pvPortMalloc+0xa4>
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d1f1      	bne.n	800f3b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3cc:	4b36      	ldr	r3, [pc, #216]	; (800f4a8 <pvPortMalloc+0x180>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d050      	beq.n	800f478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3d6:	6a3b      	ldr	r3, [r7, #32]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2208      	movs	r2, #8
 800f3dc:	4413      	add	r3, r2
 800f3de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	681a      	ldr	r2, [r3, #0]
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ea:	685a      	ldr	r2, [r3, #4]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	1ad2      	subs	r2, r2, r3
 800f3f0:	2308      	movs	r3, #8
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d91f      	bls.n	800f438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	f003 0307 	and.w	r3, r3, #7
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00a      	beq.n	800f420 <pvPortMalloc+0xf8>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	613b      	str	r3, [r7, #16]
}
 800f41c:	bf00      	nop
 800f41e:	e7fe      	b.n	800f41e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	1ad2      	subs	r2, r2, r3
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f432:	69b8      	ldr	r0, [r7, #24]
 800f434:	f000 f908 	bl	800f648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f438:	4b1d      	ldr	r3, [pc, #116]	; (800f4b0 <pvPortMalloc+0x188>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	4a1b      	ldr	r2, [pc, #108]	; (800f4b0 <pvPortMalloc+0x188>)
 800f444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f446:	4b1a      	ldr	r3, [pc, #104]	; (800f4b0 <pvPortMalloc+0x188>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	4b1b      	ldr	r3, [pc, #108]	; (800f4b8 <pvPortMalloc+0x190>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d203      	bcs.n	800f45a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f452:	4b17      	ldr	r3, [pc, #92]	; (800f4b0 <pvPortMalloc+0x188>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a18      	ldr	r2, [pc, #96]	; (800f4b8 <pvPortMalloc+0x190>)
 800f458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	685a      	ldr	r2, [r3, #4]
 800f45e:	4b13      	ldr	r3, [pc, #76]	; (800f4ac <pvPortMalloc+0x184>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	431a      	orrs	r2, r3
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	2200      	movs	r2, #0
 800f46c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f46e:	4b13      	ldr	r3, [pc, #76]	; (800f4bc <pvPortMalloc+0x194>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	3301      	adds	r3, #1
 800f474:	4a11      	ldr	r2, [pc, #68]	; (800f4bc <pvPortMalloc+0x194>)
 800f476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f478:	f7ff f864 	bl	800e544 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	f003 0307 	and.w	r3, r3, #7
 800f482:	2b00      	cmp	r3, #0
 800f484:	d00a      	beq.n	800f49c <pvPortMalloc+0x174>
	__asm volatile
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	60fb      	str	r3, [r7, #12]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <pvPortMalloc+0x172>
	return pvReturn;
 800f49c:	69fb      	ldr	r3, [r7, #28]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3728      	adds	r7, #40	; 0x28
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2000437c 	.word	0x2000437c
 800f4ac:	20004390 	.word	0x20004390
 800f4b0:	20004380 	.word	0x20004380
 800f4b4:	20004374 	.word	0x20004374
 800f4b8:	20004384 	.word	0x20004384
 800f4bc:	20004388 	.word	0x20004388

0800f4c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d04d      	beq.n	800f56e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4d2:	2308      	movs	r3, #8
 800f4d4:	425b      	negs	r3, r3
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	4413      	add	r3, r2
 800f4da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	685a      	ldr	r2, [r3, #4]
 800f4e4:	4b24      	ldr	r3, [pc, #144]	; (800f578 <vPortFree+0xb8>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10a      	bne.n	800f504 <vPortFree+0x44>
	__asm volatile
 800f4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f2:	f383 8811 	msr	BASEPRI, r3
 800f4f6:	f3bf 8f6f 	isb	sy
 800f4fa:	f3bf 8f4f 	dsb	sy
 800f4fe:	60fb      	str	r3, [r7, #12]
}
 800f500:	bf00      	nop
 800f502:	e7fe      	b.n	800f502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00a      	beq.n	800f522 <vPortFree+0x62>
	__asm volatile
 800f50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f510:	f383 8811 	msr	BASEPRI, r3
 800f514:	f3bf 8f6f 	isb	sy
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	60bb      	str	r3, [r7, #8]
}
 800f51e:	bf00      	nop
 800f520:	e7fe      	b.n	800f520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	4b14      	ldr	r3, [pc, #80]	; (800f578 <vPortFree+0xb8>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4013      	ands	r3, r2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d01e      	beq.n	800f56e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d11a      	bne.n	800f56e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	685a      	ldr	r2, [r3, #4]
 800f53c:	4b0e      	ldr	r3, [pc, #56]	; (800f578 <vPortFree+0xb8>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	43db      	mvns	r3, r3
 800f542:	401a      	ands	r2, r3
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f548:	f7fe ffee 	bl	800e528 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	685a      	ldr	r2, [r3, #4]
 800f550:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <vPortFree+0xbc>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4413      	add	r3, r2
 800f556:	4a09      	ldr	r2, [pc, #36]	; (800f57c <vPortFree+0xbc>)
 800f558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f55a:	6938      	ldr	r0, [r7, #16]
 800f55c:	f000 f874 	bl	800f648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f560:	4b07      	ldr	r3, [pc, #28]	; (800f580 <vPortFree+0xc0>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	3301      	adds	r3, #1
 800f566:	4a06      	ldr	r2, [pc, #24]	; (800f580 <vPortFree+0xc0>)
 800f568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f56a:	f7fe ffeb 	bl	800e544 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f56e:	bf00      	nop
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	20004390 	.word	0x20004390
 800f57c:	20004380 	.word	0x20004380
 800f580:	2000438c 	.word	0x2000438c

0800f584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f58a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f58e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f590:	4b27      	ldr	r3, [pc, #156]	; (800f630 <prvHeapInit+0xac>)
 800f592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f003 0307 	and.w	r3, r3, #7
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00c      	beq.n	800f5b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	3307      	adds	r3, #7
 800f5a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f023 0307 	bic.w	r3, r3, #7
 800f5aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5ac:	68ba      	ldr	r2, [r7, #8]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	4a1f      	ldr	r2, [pc, #124]	; (800f630 <prvHeapInit+0xac>)
 800f5b4:	4413      	add	r3, r2
 800f5b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5bc:	4a1d      	ldr	r2, [pc, #116]	; (800f634 <prvHeapInit+0xb0>)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5c2:	4b1c      	ldr	r3, [pc, #112]	; (800f634 <prvHeapInit+0xb0>)
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5d0:	2208      	movs	r2, #8
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	1a9b      	subs	r3, r3, r2
 800f5d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f023 0307 	bic.w	r3, r3, #7
 800f5de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	4a15      	ldr	r2, [pc, #84]	; (800f638 <prvHeapInit+0xb4>)
 800f5e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5e6:	4b14      	ldr	r3, [pc, #80]	; (800f638 <prvHeapInit+0xb4>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5ee:	4b12      	ldr	r3, [pc, #72]	; (800f638 <prvHeapInit+0xb4>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	1ad2      	subs	r2, r2, r3
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f604:	4b0c      	ldr	r3, [pc, #48]	; (800f638 <prvHeapInit+0xb4>)
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	4a0a      	ldr	r2, [pc, #40]	; (800f63c <prvHeapInit+0xb8>)
 800f612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	4a09      	ldr	r2, [pc, #36]	; (800f640 <prvHeapInit+0xbc>)
 800f61a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f61c:	4b09      	ldr	r3, [pc, #36]	; (800f644 <prvHeapInit+0xc0>)
 800f61e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f622:	601a      	str	r2, [r3, #0]
}
 800f624:	bf00      	nop
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	20000774 	.word	0x20000774
 800f634:	20004374 	.word	0x20004374
 800f638:	2000437c 	.word	0x2000437c
 800f63c:	20004384 	.word	0x20004384
 800f640:	20004380 	.word	0x20004380
 800f644:	20004390 	.word	0x20004390

0800f648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f650:	4b28      	ldr	r3, [pc, #160]	; (800f6f4 <prvInsertBlockIntoFreeList+0xac>)
 800f652:	60fb      	str	r3, [r7, #12]
 800f654:	e002      	b.n	800f65c <prvInsertBlockIntoFreeList+0x14>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	60fb      	str	r3, [r7, #12]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	429a      	cmp	r2, r3
 800f664:	d8f7      	bhi.n	800f656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	4413      	add	r3, r2
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d108      	bne.n	800f68a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	441a      	add	r2, r3
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	68ba      	ldr	r2, [r7, #8]
 800f694:	441a      	add	r2, r3
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d118      	bne.n	800f6d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	4b15      	ldr	r3, [pc, #84]	; (800f6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d00d      	beq.n	800f6c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	685a      	ldr	r2, [r3, #4]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	441a      	add	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	e008      	b.n	800f6d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	e003      	b.n	800f6d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d002      	beq.n	800f6e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6e6:	bf00      	nop
 800f6e8:	3714      	adds	r7, #20
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	20004374 	.word	0x20004374
 800f6f8:	2000437c 	.word	0x2000437c

0800f6fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f700:	2201      	movs	r2, #1
 800f702:	490e      	ldr	r1, [pc, #56]	; (800f73c <MX_USB_HOST_Init+0x40>)
 800f704:	480e      	ldr	r0, [pc, #56]	; (800f740 <MX_USB_HOST_Init+0x44>)
 800f706:	f7fb fde1 	bl	800b2cc <USBH_Init>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d001      	beq.n	800f714 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f710:	f7f1 faee 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f714:	490b      	ldr	r1, [pc, #44]	; (800f744 <MX_USB_HOST_Init+0x48>)
 800f716:	480a      	ldr	r0, [pc, #40]	; (800f740 <MX_USB_HOST_Init+0x44>)
 800f718:	f7fb fead 	bl	800b476 <USBH_RegisterClass>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f722:	f7f1 fae5 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f726:	4806      	ldr	r0, [pc, #24]	; (800f740 <MX_USB_HOST_Init+0x44>)
 800f728:	f7fb ff31 	bl	800b58e <USBH_Start>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d001      	beq.n	800f736 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f732:	f7f1 fadd 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f736:	bf00      	nop
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	0800f749 	.word	0x0800f749
 800f740:	20004394 	.word	0x20004394
 800f744:	20000020 	.word	0x20000020

0800f748 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f754:	78fb      	ldrb	r3, [r7, #3]
 800f756:	3b01      	subs	r3, #1
 800f758:	2b04      	cmp	r3, #4
 800f75a:	d819      	bhi.n	800f790 <USBH_UserProcess+0x48>
 800f75c:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <USBH_UserProcess+0x1c>)
 800f75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f762:	bf00      	nop
 800f764:	0800f791 	.word	0x0800f791
 800f768:	0800f781 	.word	0x0800f781
 800f76c:	0800f791 	.word	0x0800f791
 800f770:	0800f789 	.word	0x0800f789
 800f774:	0800f779 	.word	0x0800f779
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f778:	4b09      	ldr	r3, [pc, #36]	; (800f7a0 <USBH_UserProcess+0x58>)
 800f77a:	2203      	movs	r2, #3
 800f77c:	701a      	strb	r2, [r3, #0]
  break;
 800f77e:	e008      	b.n	800f792 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f780:	4b07      	ldr	r3, [pc, #28]	; (800f7a0 <USBH_UserProcess+0x58>)
 800f782:	2202      	movs	r2, #2
 800f784:	701a      	strb	r2, [r3, #0]
  break;
 800f786:	e004      	b.n	800f792 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f788:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <USBH_UserProcess+0x58>)
 800f78a:	2201      	movs	r2, #1
 800f78c:	701a      	strb	r2, [r3, #0]
  break;
 800f78e:	e000      	b.n	800f792 <USBH_UserProcess+0x4a>

  default:
  break;
 800f790:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f792:	bf00      	nop
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	20004778 	.word	0x20004778

0800f7a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08a      	sub	sp, #40	; 0x28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7ac:	f107 0314 	add.w	r3, r7, #20
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	605a      	str	r2, [r3, #4]
 800f7b6:	609a      	str	r2, [r3, #8]
 800f7b8:	60da      	str	r2, [r3, #12]
 800f7ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f7c4:	d147      	bne.n	800f856 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	613b      	str	r3, [r7, #16]
 800f7ca:	4b25      	ldr	r3, [pc, #148]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ce:	4a24      	ldr	r2, [pc, #144]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f7d0:	f043 0301 	orr.w	r3, r3, #1
 800f7d4:	6313      	str	r3, [r2, #48]	; 0x30
 800f7d6:	4b22      	ldr	r3, [pc, #136]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7da:	f003 0301 	and.w	r3, r3, #1
 800f7de:	613b      	str	r3, [r7, #16]
 800f7e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f7e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f7f0:	f107 0314 	add.w	r3, r7, #20
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	481b      	ldr	r0, [pc, #108]	; (800f864 <HAL_HCD_MspInit+0xc0>)
 800f7f8:	f7f4 fbc4 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f7fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f802:	2302      	movs	r3, #2
 800f804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f806:	2300      	movs	r3, #0
 800f808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f80a:	2300      	movs	r3, #0
 800f80c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f80e:	230a      	movs	r3, #10
 800f810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f812:	f107 0314 	add.w	r3, r7, #20
 800f816:	4619      	mov	r1, r3
 800f818:	4812      	ldr	r0, [pc, #72]	; (800f864 <HAL_HCD_MspInit+0xc0>)
 800f81a:	f7f4 fbb3 	bl	8003f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f81e:	4b10      	ldr	r3, [pc, #64]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f822:	4a0f      	ldr	r2, [pc, #60]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f828:	6353      	str	r3, [r2, #52]	; 0x34
 800f82a:	2300      	movs	r3, #0
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f832:	4a0b      	ldr	r2, [pc, #44]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f838:	6453      	str	r3, [r2, #68]	; 0x44
 800f83a:	4b09      	ldr	r3, [pc, #36]	; (800f860 <HAL_HCD_MspInit+0xbc>)
 800f83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f83e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f846:	2200      	movs	r2, #0
 800f848:	2105      	movs	r1, #5
 800f84a:	2043      	movs	r0, #67	; 0x43
 800f84c:	f7f2 fb31 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f850:	2043      	movs	r0, #67	; 0x43
 800f852:	f7f2 fb4a 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f856:	bf00      	nop
 800f858:	3728      	adds	r7, #40	; 0x28
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	40023800 	.word	0x40023800
 800f864:	40020000 	.word	0x40020000

0800f868 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f876:	4618      	mov	r0, r3
 800f878:	f7fc fb41 	bl	800befe <USBH_LL_IncTimer>
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f892:	4618      	mov	r0, r3
 800f894:	f7fc fb85 	bl	800bfa2 <USBH_LL_Connect>
}
 800f898:	bf00      	nop
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fc fb9a 	bl	800bfe8 <USBH_LL_Disconnect>
}
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	70fb      	strb	r3, [r7, #3]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fc fbcf 	bl	800c076 <USBH_LL_NotifyURBChange>
#endif
}
 800f8d8:	bf00      	nop
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fc fb2f 	bl	800bf52 <USBH_LL_PortEnabled>
}
 800f8f4:	bf00      	nop
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fc fb3b 	bl	800bf86 <USBH_LL_PortDisabled>
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f926:	2b01      	cmp	r3, #1
 800f928:	d12a      	bne.n	800f980 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f92a:	4a18      	ldr	r2, [pc, #96]	; (800f98c <USBH_LL_Init+0x74>)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4a15      	ldr	r2, [pc, #84]	; (800f98c <USBH_LL_Init+0x74>)
 800f936:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f93a:	4b14      	ldr	r3, [pc, #80]	; (800f98c <USBH_LL_Init+0x74>)
 800f93c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f940:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f942:	4b12      	ldr	r3, [pc, #72]	; (800f98c <USBH_LL_Init+0x74>)
 800f944:	2208      	movs	r2, #8
 800f946:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f948:	4b10      	ldr	r3, [pc, #64]	; (800f98c <USBH_LL_Init+0x74>)
 800f94a:	2201      	movs	r2, #1
 800f94c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f94e:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <USBH_LL_Init+0x74>)
 800f950:	2200      	movs	r2, #0
 800f952:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f954:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <USBH_LL_Init+0x74>)
 800f956:	2202      	movs	r2, #2
 800f958:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f95a:	4b0c      	ldr	r3, [pc, #48]	; (800f98c <USBH_LL_Init+0x74>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f960:	480a      	ldr	r0, [pc, #40]	; (800f98c <USBH_LL_Init+0x74>)
 800f962:	f7f4 fcc4 	bl	80042ee <HAL_HCD_Init>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d001      	beq.n	800f970 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f96c:	f7f1 f9c0 	bl	8000cf0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f970:	4806      	ldr	r0, [pc, #24]	; (800f98c <USBH_LL_Init+0x74>)
 800f972:	f7f5 f925 	bl	8004bc0 <HAL_HCD_GetCurrentFrame>
 800f976:	4603      	mov	r3, r0
 800f978:	4619      	mov	r1, r3
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7fc fab0 	bl	800bee0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3708      	adds	r7, #8
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	2000477c 	.word	0x2000477c

0800f990 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f998:	2300      	movs	r3, #0
 800f99a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f99c:	2300      	movs	r3, #0
 800f99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7f5 f892 	bl	8004ad0 <HAL_HCD_Start>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f000 f95e 	bl	800fc74 <USBH_Get_USB_Status>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b084      	sub	sp, #16
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7f5 f89a 	bl	8004b16 <HAL_HCD_Stop>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f9e6:	7bfb      	ldrb	r3, [r7, #15]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 f943 	bl	800fc74 <USBH_Get_USB_Status>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fa04:	2301      	movs	r3, #1
 800fa06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7f5 f8e4 	bl	8004bdc <HAL_HCD_GetCurrentSpeed>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d00c      	beq.n	800fa34 <USBH_LL_GetSpeed+0x38>
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d80d      	bhi.n	800fa3a <USBH_LL_GetSpeed+0x3e>
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d002      	beq.n	800fa28 <USBH_LL_GetSpeed+0x2c>
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d003      	beq.n	800fa2e <USBH_LL_GetSpeed+0x32>
 800fa26:	e008      	b.n	800fa3a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa2c:	e008      	b.n	800fa40 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	73fb      	strb	r3, [r7, #15]
    break;
 800fa32:	e005      	b.n	800fa40 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fa34:	2302      	movs	r3, #2
 800fa36:	73fb      	strb	r3, [r7, #15]
    break;
 800fa38:	e002      	b.n	800fa40 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3e:	bf00      	nop
  }
  return  speed;
 800fa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa52:	2300      	movs	r3, #0
 800fa54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa56:	2300      	movs	r3, #0
 800fa58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f5 f875 	bl	8004b50 <HAL_HCD_ResetPort>
 800fa66:	4603      	mov	r3, r0
 800fa68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa6a:	7bfb      	ldrb	r3, [r7, #15]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f901 	bl	800fc74 <USBH_Get_USB_Status>
 800fa72:	4603      	mov	r3, r0
 800fa74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa76:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa92:	78fa      	ldrb	r2, [r7, #3]
 800fa94:	4611      	mov	r1, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7f5 f87d 	bl	8004b96 <HAL_HCD_HC_GetXferCount>
 800fa9c:	4603      	mov	r3, r0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800faa6:	b590      	push	{r4, r7, lr}
 800faa8:	b089      	sub	sp, #36	; 0x24
 800faaa:	af04      	add	r7, sp, #16
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	4608      	mov	r0, r1
 800fab0:	4611      	mov	r1, r2
 800fab2:	461a      	mov	r2, r3
 800fab4:	4603      	mov	r3, r0
 800fab6:	70fb      	strb	r3, [r7, #3]
 800fab8:	460b      	mov	r3, r1
 800faba:	70bb      	strb	r3, [r7, #2]
 800fabc:	4613      	mov	r3, r2
 800fabe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800face:	787c      	ldrb	r4, [r7, #1]
 800fad0:	78ba      	ldrb	r2, [r7, #2]
 800fad2:	78f9      	ldrb	r1, [r7, #3]
 800fad4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fad6:	9302      	str	r3, [sp, #8]
 800fad8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fadc:	9301      	str	r3, [sp, #4]
 800fade:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	4623      	mov	r3, r4
 800fae6:	f7f4 fc69 	bl	80043bc <HAL_HCD_HC_Init>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 f8bf 	bl	800fc74 <USBH_Get_USB_Status>
 800faf6:	4603      	mov	r3, r0
 800faf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd90      	pop	{r4, r7, pc}

0800fb04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb14:	2300      	movs	r3, #0
 800fb16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fb1e:	78fa      	ldrb	r2, [r7, #3]
 800fb20:	4611      	mov	r1, r2
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f4 fd02 	bl	800452c <HAL_HCD_HC_Halt>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb2c:	7bfb      	ldrb	r3, [r7, #15]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 f8a0 	bl	800fc74 <USBH_Get_USB_Status>
 800fb34:	4603      	mov	r3, r0
 800fb36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fb42:	b590      	push	{r4, r7, lr}
 800fb44:	b089      	sub	sp, #36	; 0x24
 800fb46:	af04      	add	r7, sp, #16
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	4608      	mov	r0, r1
 800fb4c:	4611      	mov	r1, r2
 800fb4e:	461a      	mov	r2, r3
 800fb50:	4603      	mov	r3, r0
 800fb52:	70fb      	strb	r3, [r7, #3]
 800fb54:	460b      	mov	r3, r1
 800fb56:	70bb      	strb	r3, [r7, #2]
 800fb58:	4613      	mov	r3, r2
 800fb5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb60:	2300      	movs	r3, #0
 800fb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800fb6a:	787c      	ldrb	r4, [r7, #1]
 800fb6c:	78ba      	ldrb	r2, [r7, #2]
 800fb6e:	78f9      	ldrb	r1, [r7, #3]
 800fb70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fb74:	9303      	str	r3, [sp, #12]
 800fb76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb78:	9302      	str	r3, [sp, #8]
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	9301      	str	r3, [sp, #4]
 800fb7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	4623      	mov	r3, r4
 800fb86:	f7f4 fcf5 	bl	8004574 <HAL_HCD_HC_SubmitRequest>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f000 f86f 	bl	800fc74 <USBH_Get_USB_Status>
 800fb96:	4603      	mov	r3, r0
 800fb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3714      	adds	r7, #20
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd90      	pop	{r4, r7, pc}

0800fba4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fbb6:	78fa      	ldrb	r2, [r7, #3]
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7f4 ffd6 	bl	8004b6c <HAL_HCD_HC_GetURBState>
 800fbc0:	4603      	mov	r3, r0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b082      	sub	sp, #8
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d103      	bne.n	800fbe8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fbe0:	78fb      	ldrb	r3, [r7, #3]
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f000 f872 	bl	800fccc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fbe8:	20c8      	movs	r0, #200	; 0xc8
 800fbea:	f7f2 f863 	bl	8001cb4 <HAL_Delay>
  return USBH_OK;
 800fbee:	2300      	movs	r3, #0
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	460b      	mov	r3, r1
 800fc02:	70fb      	strb	r3, [r7, #3]
 800fc04:	4613      	mov	r3, r2
 800fc06:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fc0e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fc10:	78fa      	ldrb	r2, [r7, #3]
 800fc12:	68f9      	ldr	r1, [r7, #12]
 800fc14:	4613      	mov	r3, r2
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	1a9b      	subs	r3, r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	440b      	add	r3, r1
 800fc1e:	3317      	adds	r3, #23
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00a      	beq.n	800fc3c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fc26:	78fa      	ldrb	r2, [r7, #3]
 800fc28:	68f9      	ldr	r1, [r7, #12]
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	011b      	lsls	r3, r3, #4
 800fc2e:	1a9b      	subs	r3, r3, r2
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	440b      	add	r3, r1
 800fc34:	333c      	adds	r3, #60	; 0x3c
 800fc36:	78ba      	ldrb	r2, [r7, #2]
 800fc38:	701a      	strb	r2, [r3, #0]
 800fc3a:	e009      	b.n	800fc50 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fc3c:	78fa      	ldrb	r2, [r7, #3]
 800fc3e:	68f9      	ldr	r1, [r7, #12]
 800fc40:	4613      	mov	r3, r2
 800fc42:	011b      	lsls	r3, r3, #4
 800fc44:	1a9b      	subs	r3, r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	440b      	add	r3, r1
 800fc4a:	333d      	adds	r3, #61	; 0x3d
 800fc4c:	78ba      	ldrb	r2, [r7, #2]
 800fc4e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b082      	sub	sp, #8
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7f2 f824 	bl	8001cb4 <HAL_Delay>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc82:	79fb      	ldrb	r3, [r7, #7]
 800fc84:	2b03      	cmp	r3, #3
 800fc86:	d817      	bhi.n	800fcb8 <USBH_Get_USB_Status+0x44>
 800fc88:	a201      	add	r2, pc, #4	; (adr r2, 800fc90 <USBH_Get_USB_Status+0x1c>)
 800fc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc8e:	bf00      	nop
 800fc90:	0800fca1 	.word	0x0800fca1
 800fc94:	0800fca7 	.word	0x0800fca7
 800fc98:	0800fcad 	.word	0x0800fcad
 800fc9c:	0800fcb3 	.word	0x0800fcb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	73fb      	strb	r3, [r7, #15]
    break;
 800fca4:	e00b      	b.n	800fcbe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fca6:	2302      	movs	r3, #2
 800fca8:	73fb      	strb	r3, [r7, #15]
    break;
 800fcaa:	e008      	b.n	800fcbe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fcac:	2301      	movs	r3, #1
 800fcae:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb0:	e005      	b.n	800fcbe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fcb2:	2302      	movs	r3, #2
 800fcb4:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb6:	e002      	b.n	800fcbe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fcb8:	2302      	movs	r3, #2
 800fcba:	73fb      	strb	r3, [r7, #15]
    break;
 800fcbc:	bf00      	nop
  }
  return usb_status;
 800fcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3714      	adds	r7, #20
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fcd6:	79fb      	ldrb	r3, [r7, #7]
 800fcd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fcda:	79fb      	ldrb	r3, [r7, #7]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d102      	bne.n	800fce6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73fb      	strb	r3, [r7, #15]
 800fce4:	e001      	b.n	800fcea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fce6:	2301      	movs	r3, #1
 800fce8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
 800fcec:	461a      	mov	r2, r3
 800fcee:	2101      	movs	r1, #1
 800fcf0:	4803      	ldr	r0, [pc, #12]	; (800fd00 <MX_DriverVbusFS+0x34>)
 800fcf2:	f7f4 fae3 	bl	80042bc <HAL_GPIO_WritePin>
}
 800fcf6:	bf00      	nop
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	40020800 	.word	0x40020800

0800fd04 <malloc>:
 800fd04:	4b02      	ldr	r3, [pc, #8]	; (800fd10 <malloc+0xc>)
 800fd06:	4601      	mov	r1, r0
 800fd08:	6818      	ldr	r0, [r3, #0]
 800fd0a:	f000 b82b 	b.w	800fd64 <_malloc_r>
 800fd0e:	bf00      	nop
 800fd10:	2000009c 	.word	0x2000009c

0800fd14 <free>:
 800fd14:	4b02      	ldr	r3, [pc, #8]	; (800fd20 <free+0xc>)
 800fd16:	4601      	mov	r1, r0
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	f000 bc5d 	b.w	80105d8 <_free_r>
 800fd1e:	bf00      	nop
 800fd20:	2000009c 	.word	0x2000009c

0800fd24 <sbrk_aligned>:
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	4e0e      	ldr	r6, [pc, #56]	; (800fd60 <sbrk_aligned+0x3c>)
 800fd28:	460c      	mov	r4, r1
 800fd2a:	6831      	ldr	r1, [r6, #0]
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	b911      	cbnz	r1, 800fd36 <sbrk_aligned+0x12>
 800fd30:	f000 fbf4 	bl	801051c <_sbrk_r>
 800fd34:	6030      	str	r0, [r6, #0]
 800fd36:	4621      	mov	r1, r4
 800fd38:	4628      	mov	r0, r5
 800fd3a:	f000 fbef 	bl	801051c <_sbrk_r>
 800fd3e:	1c43      	adds	r3, r0, #1
 800fd40:	d00a      	beq.n	800fd58 <sbrk_aligned+0x34>
 800fd42:	1cc4      	adds	r4, r0, #3
 800fd44:	f024 0403 	bic.w	r4, r4, #3
 800fd48:	42a0      	cmp	r0, r4
 800fd4a:	d007      	beq.n	800fd5c <sbrk_aligned+0x38>
 800fd4c:	1a21      	subs	r1, r4, r0
 800fd4e:	4628      	mov	r0, r5
 800fd50:	f000 fbe4 	bl	801051c <_sbrk_r>
 800fd54:	3001      	adds	r0, #1
 800fd56:	d101      	bne.n	800fd5c <sbrk_aligned+0x38>
 800fd58:	f04f 34ff 	mov.w	r4, #4294967295
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	bd70      	pop	{r4, r5, r6, pc}
 800fd60:	20004b60 	.word	0x20004b60

0800fd64 <_malloc_r>:
 800fd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd68:	1ccd      	adds	r5, r1, #3
 800fd6a:	f025 0503 	bic.w	r5, r5, #3
 800fd6e:	3508      	adds	r5, #8
 800fd70:	2d0c      	cmp	r5, #12
 800fd72:	bf38      	it	cc
 800fd74:	250c      	movcc	r5, #12
 800fd76:	2d00      	cmp	r5, #0
 800fd78:	4607      	mov	r7, r0
 800fd7a:	db01      	blt.n	800fd80 <_malloc_r+0x1c>
 800fd7c:	42a9      	cmp	r1, r5
 800fd7e:	d905      	bls.n	800fd8c <_malloc_r+0x28>
 800fd80:	230c      	movs	r3, #12
 800fd82:	603b      	str	r3, [r7, #0]
 800fd84:	2600      	movs	r6, #0
 800fd86:	4630      	mov	r0, r6
 800fd88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fe60 <_malloc_r+0xfc>
 800fd90:	f000 f868 	bl	800fe64 <__malloc_lock>
 800fd94:	f8d8 3000 	ldr.w	r3, [r8]
 800fd98:	461c      	mov	r4, r3
 800fd9a:	bb5c      	cbnz	r4, 800fdf4 <_malloc_r+0x90>
 800fd9c:	4629      	mov	r1, r5
 800fd9e:	4638      	mov	r0, r7
 800fda0:	f7ff ffc0 	bl	800fd24 <sbrk_aligned>
 800fda4:	1c43      	adds	r3, r0, #1
 800fda6:	4604      	mov	r4, r0
 800fda8:	d155      	bne.n	800fe56 <_malloc_r+0xf2>
 800fdaa:	f8d8 4000 	ldr.w	r4, [r8]
 800fdae:	4626      	mov	r6, r4
 800fdb0:	2e00      	cmp	r6, #0
 800fdb2:	d145      	bne.n	800fe40 <_malloc_r+0xdc>
 800fdb4:	2c00      	cmp	r4, #0
 800fdb6:	d048      	beq.n	800fe4a <_malloc_r+0xe6>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	4631      	mov	r1, r6
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	eb04 0903 	add.w	r9, r4, r3
 800fdc2:	f000 fbab 	bl	801051c <_sbrk_r>
 800fdc6:	4581      	cmp	r9, r0
 800fdc8:	d13f      	bne.n	800fe4a <_malloc_r+0xe6>
 800fdca:	6821      	ldr	r1, [r4, #0]
 800fdcc:	1a6d      	subs	r5, r5, r1
 800fdce:	4629      	mov	r1, r5
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f7ff ffa7 	bl	800fd24 <sbrk_aligned>
 800fdd6:	3001      	adds	r0, #1
 800fdd8:	d037      	beq.n	800fe4a <_malloc_r+0xe6>
 800fdda:	6823      	ldr	r3, [r4, #0]
 800fddc:	442b      	add	r3, r5
 800fdde:	6023      	str	r3, [r4, #0]
 800fde0:	f8d8 3000 	ldr.w	r3, [r8]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d038      	beq.n	800fe5a <_malloc_r+0xf6>
 800fde8:	685a      	ldr	r2, [r3, #4]
 800fdea:	42a2      	cmp	r2, r4
 800fdec:	d12b      	bne.n	800fe46 <_malloc_r+0xe2>
 800fdee:	2200      	movs	r2, #0
 800fdf0:	605a      	str	r2, [r3, #4]
 800fdf2:	e00f      	b.n	800fe14 <_malloc_r+0xb0>
 800fdf4:	6822      	ldr	r2, [r4, #0]
 800fdf6:	1b52      	subs	r2, r2, r5
 800fdf8:	d41f      	bmi.n	800fe3a <_malloc_r+0xd6>
 800fdfa:	2a0b      	cmp	r2, #11
 800fdfc:	d917      	bls.n	800fe2e <_malloc_r+0xca>
 800fdfe:	1961      	adds	r1, r4, r5
 800fe00:	42a3      	cmp	r3, r4
 800fe02:	6025      	str	r5, [r4, #0]
 800fe04:	bf18      	it	ne
 800fe06:	6059      	strne	r1, [r3, #4]
 800fe08:	6863      	ldr	r3, [r4, #4]
 800fe0a:	bf08      	it	eq
 800fe0c:	f8c8 1000 	streq.w	r1, [r8]
 800fe10:	5162      	str	r2, [r4, r5]
 800fe12:	604b      	str	r3, [r1, #4]
 800fe14:	4638      	mov	r0, r7
 800fe16:	f104 060b 	add.w	r6, r4, #11
 800fe1a:	f000 f829 	bl	800fe70 <__malloc_unlock>
 800fe1e:	f026 0607 	bic.w	r6, r6, #7
 800fe22:	1d23      	adds	r3, r4, #4
 800fe24:	1af2      	subs	r2, r6, r3
 800fe26:	d0ae      	beq.n	800fd86 <_malloc_r+0x22>
 800fe28:	1b9b      	subs	r3, r3, r6
 800fe2a:	50a3      	str	r3, [r4, r2]
 800fe2c:	e7ab      	b.n	800fd86 <_malloc_r+0x22>
 800fe2e:	42a3      	cmp	r3, r4
 800fe30:	6862      	ldr	r2, [r4, #4]
 800fe32:	d1dd      	bne.n	800fdf0 <_malloc_r+0x8c>
 800fe34:	f8c8 2000 	str.w	r2, [r8]
 800fe38:	e7ec      	b.n	800fe14 <_malloc_r+0xb0>
 800fe3a:	4623      	mov	r3, r4
 800fe3c:	6864      	ldr	r4, [r4, #4]
 800fe3e:	e7ac      	b.n	800fd9a <_malloc_r+0x36>
 800fe40:	4634      	mov	r4, r6
 800fe42:	6876      	ldr	r6, [r6, #4]
 800fe44:	e7b4      	b.n	800fdb0 <_malloc_r+0x4c>
 800fe46:	4613      	mov	r3, r2
 800fe48:	e7cc      	b.n	800fde4 <_malloc_r+0x80>
 800fe4a:	230c      	movs	r3, #12
 800fe4c:	603b      	str	r3, [r7, #0]
 800fe4e:	4638      	mov	r0, r7
 800fe50:	f000 f80e 	bl	800fe70 <__malloc_unlock>
 800fe54:	e797      	b.n	800fd86 <_malloc_r+0x22>
 800fe56:	6025      	str	r5, [r4, #0]
 800fe58:	e7dc      	b.n	800fe14 <_malloc_r+0xb0>
 800fe5a:	605b      	str	r3, [r3, #4]
 800fe5c:	deff      	udf	#255	; 0xff
 800fe5e:	bf00      	nop
 800fe60:	20004b5c 	.word	0x20004b5c

0800fe64 <__malloc_lock>:
 800fe64:	4801      	ldr	r0, [pc, #4]	; (800fe6c <__malloc_lock+0x8>)
 800fe66:	f000 bba6 	b.w	80105b6 <__retarget_lock_acquire_recursive>
 800fe6a:	bf00      	nop
 800fe6c:	20004ca4 	.word	0x20004ca4

0800fe70 <__malloc_unlock>:
 800fe70:	4801      	ldr	r0, [pc, #4]	; (800fe78 <__malloc_unlock+0x8>)
 800fe72:	f000 bba1 	b.w	80105b8 <__retarget_lock_release_recursive>
 800fe76:	bf00      	nop
 800fe78:	20004ca4 	.word	0x20004ca4

0800fe7c <std>:
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	b510      	push	{r4, lr}
 800fe80:	4604      	mov	r4, r0
 800fe82:	e9c0 3300 	strd	r3, r3, [r0]
 800fe86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe8a:	6083      	str	r3, [r0, #8]
 800fe8c:	8181      	strh	r1, [r0, #12]
 800fe8e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe90:	81c2      	strh	r2, [r0, #14]
 800fe92:	6183      	str	r3, [r0, #24]
 800fe94:	4619      	mov	r1, r3
 800fe96:	2208      	movs	r2, #8
 800fe98:	305c      	adds	r0, #92	; 0x5c
 800fe9a:	f000 faad 	bl	80103f8 <memset>
 800fe9e:	4b0d      	ldr	r3, [pc, #52]	; (800fed4 <std+0x58>)
 800fea0:	6263      	str	r3, [r4, #36]	; 0x24
 800fea2:	4b0d      	ldr	r3, [pc, #52]	; (800fed8 <std+0x5c>)
 800fea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fea6:	4b0d      	ldr	r3, [pc, #52]	; (800fedc <std+0x60>)
 800fea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800feaa:	4b0d      	ldr	r3, [pc, #52]	; (800fee0 <std+0x64>)
 800feac:	6323      	str	r3, [r4, #48]	; 0x30
 800feae:	4b0d      	ldr	r3, [pc, #52]	; (800fee4 <std+0x68>)
 800feb0:	6224      	str	r4, [r4, #32]
 800feb2:	429c      	cmp	r4, r3
 800feb4:	d006      	beq.n	800fec4 <std+0x48>
 800feb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800feba:	4294      	cmp	r4, r2
 800febc:	d002      	beq.n	800fec4 <std+0x48>
 800febe:	33d0      	adds	r3, #208	; 0xd0
 800fec0:	429c      	cmp	r4, r3
 800fec2:	d105      	bne.n	800fed0 <std+0x54>
 800fec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fecc:	f000 bb72 	b.w	80105b4 <__retarget_lock_init_recursive>
 800fed0:	bd10      	pop	{r4, pc}
 800fed2:	bf00      	nop
 800fed4:	08010249 	.word	0x08010249
 800fed8:	0801026b 	.word	0x0801026b
 800fedc:	080102a3 	.word	0x080102a3
 800fee0:	080102c7 	.word	0x080102c7
 800fee4:	20004b64 	.word	0x20004b64

0800fee8 <stdio_exit_handler>:
 800fee8:	4a02      	ldr	r2, [pc, #8]	; (800fef4 <stdio_exit_handler+0xc>)
 800feea:	4903      	ldr	r1, [pc, #12]	; (800fef8 <stdio_exit_handler+0x10>)
 800feec:	4803      	ldr	r0, [pc, #12]	; (800fefc <stdio_exit_handler+0x14>)
 800feee:	f000 b869 	b.w	800ffc4 <_fwalk_sglue>
 800fef2:	bf00      	nop
 800fef4:	20000044 	.word	0x20000044
 800fef8:	08010d25 	.word	0x08010d25
 800fefc:	20000050 	.word	0x20000050

0800ff00 <cleanup_stdio>:
 800ff00:	6841      	ldr	r1, [r0, #4]
 800ff02:	4b0c      	ldr	r3, [pc, #48]	; (800ff34 <cleanup_stdio+0x34>)
 800ff04:	4299      	cmp	r1, r3
 800ff06:	b510      	push	{r4, lr}
 800ff08:	4604      	mov	r4, r0
 800ff0a:	d001      	beq.n	800ff10 <cleanup_stdio+0x10>
 800ff0c:	f000 ff0a 	bl	8010d24 <_fflush_r>
 800ff10:	68a1      	ldr	r1, [r4, #8]
 800ff12:	4b09      	ldr	r3, [pc, #36]	; (800ff38 <cleanup_stdio+0x38>)
 800ff14:	4299      	cmp	r1, r3
 800ff16:	d002      	beq.n	800ff1e <cleanup_stdio+0x1e>
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f000 ff03 	bl	8010d24 <_fflush_r>
 800ff1e:	68e1      	ldr	r1, [r4, #12]
 800ff20:	4b06      	ldr	r3, [pc, #24]	; (800ff3c <cleanup_stdio+0x3c>)
 800ff22:	4299      	cmp	r1, r3
 800ff24:	d004      	beq.n	800ff30 <cleanup_stdio+0x30>
 800ff26:	4620      	mov	r0, r4
 800ff28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff2c:	f000 befa 	b.w	8010d24 <_fflush_r>
 800ff30:	bd10      	pop	{r4, pc}
 800ff32:	bf00      	nop
 800ff34:	20004b64 	.word	0x20004b64
 800ff38:	20004bcc 	.word	0x20004bcc
 800ff3c:	20004c34 	.word	0x20004c34

0800ff40 <global_stdio_init.part.0>:
 800ff40:	b510      	push	{r4, lr}
 800ff42:	4b0b      	ldr	r3, [pc, #44]	; (800ff70 <global_stdio_init.part.0+0x30>)
 800ff44:	4c0b      	ldr	r4, [pc, #44]	; (800ff74 <global_stdio_init.part.0+0x34>)
 800ff46:	4a0c      	ldr	r2, [pc, #48]	; (800ff78 <global_stdio_init.part.0+0x38>)
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	2104      	movs	r1, #4
 800ff50:	f7ff ff94 	bl	800fe7c <std>
 800ff54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ff58:	2201      	movs	r2, #1
 800ff5a:	2109      	movs	r1, #9
 800ff5c:	f7ff ff8e 	bl	800fe7c <std>
 800ff60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ff64:	2202      	movs	r2, #2
 800ff66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff6a:	2112      	movs	r1, #18
 800ff6c:	f7ff bf86 	b.w	800fe7c <std>
 800ff70:	20004c9c 	.word	0x20004c9c
 800ff74:	20004b64 	.word	0x20004b64
 800ff78:	0800fee9 	.word	0x0800fee9

0800ff7c <__sfp_lock_acquire>:
 800ff7c:	4801      	ldr	r0, [pc, #4]	; (800ff84 <__sfp_lock_acquire+0x8>)
 800ff7e:	f000 bb1a 	b.w	80105b6 <__retarget_lock_acquire_recursive>
 800ff82:	bf00      	nop
 800ff84:	20004ca5 	.word	0x20004ca5

0800ff88 <__sfp_lock_release>:
 800ff88:	4801      	ldr	r0, [pc, #4]	; (800ff90 <__sfp_lock_release+0x8>)
 800ff8a:	f000 bb15 	b.w	80105b8 <__retarget_lock_release_recursive>
 800ff8e:	bf00      	nop
 800ff90:	20004ca5 	.word	0x20004ca5

0800ff94 <__sinit>:
 800ff94:	b510      	push	{r4, lr}
 800ff96:	4604      	mov	r4, r0
 800ff98:	f7ff fff0 	bl	800ff7c <__sfp_lock_acquire>
 800ff9c:	6a23      	ldr	r3, [r4, #32]
 800ff9e:	b11b      	cbz	r3, 800ffa8 <__sinit+0x14>
 800ffa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffa4:	f7ff bff0 	b.w	800ff88 <__sfp_lock_release>
 800ffa8:	4b04      	ldr	r3, [pc, #16]	; (800ffbc <__sinit+0x28>)
 800ffaa:	6223      	str	r3, [r4, #32]
 800ffac:	4b04      	ldr	r3, [pc, #16]	; (800ffc0 <__sinit+0x2c>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1f5      	bne.n	800ffa0 <__sinit+0xc>
 800ffb4:	f7ff ffc4 	bl	800ff40 <global_stdio_init.part.0>
 800ffb8:	e7f2      	b.n	800ffa0 <__sinit+0xc>
 800ffba:	bf00      	nop
 800ffbc:	0800ff01 	.word	0x0800ff01
 800ffc0:	20004c9c 	.word	0x20004c9c

0800ffc4 <_fwalk_sglue>:
 800ffc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffc8:	4607      	mov	r7, r0
 800ffca:	4688      	mov	r8, r1
 800ffcc:	4614      	mov	r4, r2
 800ffce:	2600      	movs	r6, #0
 800ffd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ffd4:	f1b9 0901 	subs.w	r9, r9, #1
 800ffd8:	d505      	bpl.n	800ffe6 <_fwalk_sglue+0x22>
 800ffda:	6824      	ldr	r4, [r4, #0]
 800ffdc:	2c00      	cmp	r4, #0
 800ffde:	d1f7      	bne.n	800ffd0 <_fwalk_sglue+0xc>
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffe6:	89ab      	ldrh	r3, [r5, #12]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d907      	bls.n	800fffc <_fwalk_sglue+0x38>
 800ffec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fff0:	3301      	adds	r3, #1
 800fff2:	d003      	beq.n	800fffc <_fwalk_sglue+0x38>
 800fff4:	4629      	mov	r1, r5
 800fff6:	4638      	mov	r0, r7
 800fff8:	47c0      	blx	r8
 800fffa:	4306      	orrs	r6, r0
 800fffc:	3568      	adds	r5, #104	; 0x68
 800fffe:	e7e9      	b.n	800ffd4 <_fwalk_sglue+0x10>

08010000 <iprintf>:
 8010000:	b40f      	push	{r0, r1, r2, r3}
 8010002:	b507      	push	{r0, r1, r2, lr}
 8010004:	4906      	ldr	r1, [pc, #24]	; (8010020 <iprintf+0x20>)
 8010006:	ab04      	add	r3, sp, #16
 8010008:	6808      	ldr	r0, [r1, #0]
 801000a:	f853 2b04 	ldr.w	r2, [r3], #4
 801000e:	6881      	ldr	r1, [r0, #8]
 8010010:	9301      	str	r3, [sp, #4]
 8010012:	f000 fb57 	bl	80106c4 <_vfiprintf_r>
 8010016:	b003      	add	sp, #12
 8010018:	f85d eb04 	ldr.w	lr, [sp], #4
 801001c:	b004      	add	sp, #16
 801001e:	4770      	bx	lr
 8010020:	2000009c 	.word	0x2000009c

08010024 <_puts_r>:
 8010024:	6a03      	ldr	r3, [r0, #32]
 8010026:	b570      	push	{r4, r5, r6, lr}
 8010028:	6884      	ldr	r4, [r0, #8]
 801002a:	4605      	mov	r5, r0
 801002c:	460e      	mov	r6, r1
 801002e:	b90b      	cbnz	r3, 8010034 <_puts_r+0x10>
 8010030:	f7ff ffb0 	bl	800ff94 <__sinit>
 8010034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010036:	07db      	lsls	r3, r3, #31
 8010038:	d405      	bmi.n	8010046 <_puts_r+0x22>
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	0598      	lsls	r0, r3, #22
 801003e:	d402      	bmi.n	8010046 <_puts_r+0x22>
 8010040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010042:	f000 fab8 	bl	80105b6 <__retarget_lock_acquire_recursive>
 8010046:	89a3      	ldrh	r3, [r4, #12]
 8010048:	0719      	lsls	r1, r3, #28
 801004a:	d513      	bpl.n	8010074 <_puts_r+0x50>
 801004c:	6923      	ldr	r3, [r4, #16]
 801004e:	b18b      	cbz	r3, 8010074 <_puts_r+0x50>
 8010050:	3e01      	subs	r6, #1
 8010052:	68a3      	ldr	r3, [r4, #8]
 8010054:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010058:	3b01      	subs	r3, #1
 801005a:	60a3      	str	r3, [r4, #8]
 801005c:	b9e9      	cbnz	r1, 801009a <_puts_r+0x76>
 801005e:	2b00      	cmp	r3, #0
 8010060:	da2e      	bge.n	80100c0 <_puts_r+0x9c>
 8010062:	4622      	mov	r2, r4
 8010064:	210a      	movs	r1, #10
 8010066:	4628      	mov	r0, r5
 8010068:	f000 f931 	bl	80102ce <__swbuf_r>
 801006c:	3001      	adds	r0, #1
 801006e:	d007      	beq.n	8010080 <_puts_r+0x5c>
 8010070:	250a      	movs	r5, #10
 8010072:	e007      	b.n	8010084 <_puts_r+0x60>
 8010074:	4621      	mov	r1, r4
 8010076:	4628      	mov	r0, r5
 8010078:	f000 f966 	bl	8010348 <__swsetup_r>
 801007c:	2800      	cmp	r0, #0
 801007e:	d0e7      	beq.n	8010050 <_puts_r+0x2c>
 8010080:	f04f 35ff 	mov.w	r5, #4294967295
 8010084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010086:	07da      	lsls	r2, r3, #31
 8010088:	d405      	bmi.n	8010096 <_puts_r+0x72>
 801008a:	89a3      	ldrh	r3, [r4, #12]
 801008c:	059b      	lsls	r3, r3, #22
 801008e:	d402      	bmi.n	8010096 <_puts_r+0x72>
 8010090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010092:	f000 fa91 	bl	80105b8 <__retarget_lock_release_recursive>
 8010096:	4628      	mov	r0, r5
 8010098:	bd70      	pop	{r4, r5, r6, pc}
 801009a:	2b00      	cmp	r3, #0
 801009c:	da04      	bge.n	80100a8 <_puts_r+0x84>
 801009e:	69a2      	ldr	r2, [r4, #24]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	dc06      	bgt.n	80100b2 <_puts_r+0x8e>
 80100a4:	290a      	cmp	r1, #10
 80100a6:	d004      	beq.n	80100b2 <_puts_r+0x8e>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	1c5a      	adds	r2, r3, #1
 80100ac:	6022      	str	r2, [r4, #0]
 80100ae:	7019      	strb	r1, [r3, #0]
 80100b0:	e7cf      	b.n	8010052 <_puts_r+0x2e>
 80100b2:	4622      	mov	r2, r4
 80100b4:	4628      	mov	r0, r5
 80100b6:	f000 f90a 	bl	80102ce <__swbuf_r>
 80100ba:	3001      	adds	r0, #1
 80100bc:	d1c9      	bne.n	8010052 <_puts_r+0x2e>
 80100be:	e7df      	b.n	8010080 <_puts_r+0x5c>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	250a      	movs	r5, #10
 80100c4:	1c5a      	adds	r2, r3, #1
 80100c6:	6022      	str	r2, [r4, #0]
 80100c8:	701d      	strb	r5, [r3, #0]
 80100ca:	e7db      	b.n	8010084 <_puts_r+0x60>

080100cc <puts>:
 80100cc:	4b02      	ldr	r3, [pc, #8]	; (80100d8 <puts+0xc>)
 80100ce:	4601      	mov	r1, r0
 80100d0:	6818      	ldr	r0, [r3, #0]
 80100d2:	f7ff bfa7 	b.w	8010024 <_puts_r>
 80100d6:	bf00      	nop
 80100d8:	2000009c 	.word	0x2000009c

080100dc <setbuf>:
 80100dc:	fab1 f281 	clz	r2, r1
 80100e0:	0952      	lsrs	r2, r2, #5
 80100e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100e6:	0052      	lsls	r2, r2, #1
 80100e8:	f000 b800 	b.w	80100ec <setvbuf>

080100ec <setvbuf>:
 80100ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100f0:	461d      	mov	r5, r3
 80100f2:	4b54      	ldr	r3, [pc, #336]	; (8010244 <setvbuf+0x158>)
 80100f4:	681f      	ldr	r7, [r3, #0]
 80100f6:	4604      	mov	r4, r0
 80100f8:	460e      	mov	r6, r1
 80100fa:	4690      	mov	r8, r2
 80100fc:	b127      	cbz	r7, 8010108 <setvbuf+0x1c>
 80100fe:	6a3b      	ldr	r3, [r7, #32]
 8010100:	b913      	cbnz	r3, 8010108 <setvbuf+0x1c>
 8010102:	4638      	mov	r0, r7
 8010104:	f7ff ff46 	bl	800ff94 <__sinit>
 8010108:	f1b8 0f02 	cmp.w	r8, #2
 801010c:	d006      	beq.n	801011c <setvbuf+0x30>
 801010e:	f1b8 0f01 	cmp.w	r8, #1
 8010112:	f200 8094 	bhi.w	801023e <setvbuf+0x152>
 8010116:	2d00      	cmp	r5, #0
 8010118:	f2c0 8091 	blt.w	801023e <setvbuf+0x152>
 801011c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801011e:	07da      	lsls	r2, r3, #31
 8010120:	d405      	bmi.n	801012e <setvbuf+0x42>
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	059b      	lsls	r3, r3, #22
 8010126:	d402      	bmi.n	801012e <setvbuf+0x42>
 8010128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801012a:	f000 fa44 	bl	80105b6 <__retarget_lock_acquire_recursive>
 801012e:	4621      	mov	r1, r4
 8010130:	4638      	mov	r0, r7
 8010132:	f000 fdf7 	bl	8010d24 <_fflush_r>
 8010136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010138:	b141      	cbz	r1, 801014c <setvbuf+0x60>
 801013a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801013e:	4299      	cmp	r1, r3
 8010140:	d002      	beq.n	8010148 <setvbuf+0x5c>
 8010142:	4638      	mov	r0, r7
 8010144:	f000 fa48 	bl	80105d8 <_free_r>
 8010148:	2300      	movs	r3, #0
 801014a:	6363      	str	r3, [r4, #52]	; 0x34
 801014c:	2300      	movs	r3, #0
 801014e:	61a3      	str	r3, [r4, #24]
 8010150:	6063      	str	r3, [r4, #4]
 8010152:	89a3      	ldrh	r3, [r4, #12]
 8010154:	0618      	lsls	r0, r3, #24
 8010156:	d503      	bpl.n	8010160 <setvbuf+0x74>
 8010158:	6921      	ldr	r1, [r4, #16]
 801015a:	4638      	mov	r0, r7
 801015c:	f000 fa3c 	bl	80105d8 <_free_r>
 8010160:	89a3      	ldrh	r3, [r4, #12]
 8010162:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8010166:	f023 0303 	bic.w	r3, r3, #3
 801016a:	f1b8 0f02 	cmp.w	r8, #2
 801016e:	81a3      	strh	r3, [r4, #12]
 8010170:	d05f      	beq.n	8010232 <setvbuf+0x146>
 8010172:	ab01      	add	r3, sp, #4
 8010174:	466a      	mov	r2, sp
 8010176:	4621      	mov	r1, r4
 8010178:	4638      	mov	r0, r7
 801017a:	f000 fdfb 	bl	8010d74 <__swhatbuf_r>
 801017e:	89a3      	ldrh	r3, [r4, #12]
 8010180:	4318      	orrs	r0, r3
 8010182:	81a0      	strh	r0, [r4, #12]
 8010184:	bb2d      	cbnz	r5, 80101d2 <setvbuf+0xe6>
 8010186:	9d00      	ldr	r5, [sp, #0]
 8010188:	4628      	mov	r0, r5
 801018a:	f7ff fdbb 	bl	800fd04 <malloc>
 801018e:	4606      	mov	r6, r0
 8010190:	2800      	cmp	r0, #0
 8010192:	d150      	bne.n	8010236 <setvbuf+0x14a>
 8010194:	f8dd 9000 	ldr.w	r9, [sp]
 8010198:	45a9      	cmp	r9, r5
 801019a:	d13e      	bne.n	801021a <setvbuf+0x12e>
 801019c:	f04f 35ff 	mov.w	r5, #4294967295
 80101a0:	2200      	movs	r2, #0
 80101a2:	60a2      	str	r2, [r4, #8]
 80101a4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80101a8:	6022      	str	r2, [r4, #0]
 80101aa:	6122      	str	r2, [r4, #16]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101b2:	6162      	str	r2, [r4, #20]
 80101b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80101b6:	f043 0302 	orr.w	r3, r3, #2
 80101ba:	07d1      	lsls	r1, r2, #31
 80101bc:	81a3      	strh	r3, [r4, #12]
 80101be:	d404      	bmi.n	80101ca <setvbuf+0xde>
 80101c0:	059b      	lsls	r3, r3, #22
 80101c2:	d402      	bmi.n	80101ca <setvbuf+0xde>
 80101c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101c6:	f000 f9f7 	bl	80105b8 <__retarget_lock_release_recursive>
 80101ca:	4628      	mov	r0, r5
 80101cc:	b003      	add	sp, #12
 80101ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101d2:	2e00      	cmp	r6, #0
 80101d4:	d0d8      	beq.n	8010188 <setvbuf+0x9c>
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	b913      	cbnz	r3, 80101e0 <setvbuf+0xf4>
 80101da:	4638      	mov	r0, r7
 80101dc:	f7ff feda 	bl	800ff94 <__sinit>
 80101e0:	f1b8 0f01 	cmp.w	r8, #1
 80101e4:	bf08      	it	eq
 80101e6:	89a3      	ldrheq	r3, [r4, #12]
 80101e8:	6026      	str	r6, [r4, #0]
 80101ea:	bf04      	itt	eq
 80101ec:	f043 0301 	orreq.w	r3, r3, #1
 80101f0:	81a3      	strheq	r3, [r4, #12]
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	f013 0208 	ands.w	r2, r3, #8
 80101f8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80101fc:	d01d      	beq.n	801023a <setvbuf+0x14e>
 80101fe:	07da      	lsls	r2, r3, #31
 8010200:	bf41      	itttt	mi
 8010202:	2200      	movmi	r2, #0
 8010204:	426d      	negmi	r5, r5
 8010206:	60a2      	strmi	r2, [r4, #8]
 8010208:	61a5      	strmi	r5, [r4, #24]
 801020a:	bf58      	it	pl
 801020c:	60a5      	strpl	r5, [r4, #8]
 801020e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010210:	f015 0501 	ands.w	r5, r5, #1
 8010214:	d0d4      	beq.n	80101c0 <setvbuf+0xd4>
 8010216:	2500      	movs	r5, #0
 8010218:	e7d7      	b.n	80101ca <setvbuf+0xde>
 801021a:	4648      	mov	r0, r9
 801021c:	f7ff fd72 	bl	800fd04 <malloc>
 8010220:	4606      	mov	r6, r0
 8010222:	2800      	cmp	r0, #0
 8010224:	d0ba      	beq.n	801019c <setvbuf+0xb0>
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801022c:	81a3      	strh	r3, [r4, #12]
 801022e:	464d      	mov	r5, r9
 8010230:	e7d1      	b.n	80101d6 <setvbuf+0xea>
 8010232:	2500      	movs	r5, #0
 8010234:	e7b4      	b.n	80101a0 <setvbuf+0xb4>
 8010236:	46a9      	mov	r9, r5
 8010238:	e7f5      	b.n	8010226 <setvbuf+0x13a>
 801023a:	60a2      	str	r2, [r4, #8]
 801023c:	e7e7      	b.n	801020e <setvbuf+0x122>
 801023e:	f04f 35ff 	mov.w	r5, #4294967295
 8010242:	e7c2      	b.n	80101ca <setvbuf+0xde>
 8010244:	2000009c 	.word	0x2000009c

08010248 <__sread>:
 8010248:	b510      	push	{r4, lr}
 801024a:	460c      	mov	r4, r1
 801024c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010250:	f000 f952 	bl	80104f8 <_read_r>
 8010254:	2800      	cmp	r0, #0
 8010256:	bfab      	itete	ge
 8010258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801025a:	89a3      	ldrhlt	r3, [r4, #12]
 801025c:	181b      	addge	r3, r3, r0
 801025e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010262:	bfac      	ite	ge
 8010264:	6563      	strge	r3, [r4, #84]	; 0x54
 8010266:	81a3      	strhlt	r3, [r4, #12]
 8010268:	bd10      	pop	{r4, pc}

0801026a <__swrite>:
 801026a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026e:	461f      	mov	r7, r3
 8010270:	898b      	ldrh	r3, [r1, #12]
 8010272:	05db      	lsls	r3, r3, #23
 8010274:	4605      	mov	r5, r0
 8010276:	460c      	mov	r4, r1
 8010278:	4616      	mov	r6, r2
 801027a:	d505      	bpl.n	8010288 <__swrite+0x1e>
 801027c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010280:	2302      	movs	r3, #2
 8010282:	2200      	movs	r2, #0
 8010284:	f000 f926 	bl	80104d4 <_lseek_r>
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801028e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010292:	81a3      	strh	r3, [r4, #12]
 8010294:	4632      	mov	r2, r6
 8010296:	463b      	mov	r3, r7
 8010298:	4628      	mov	r0, r5
 801029a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801029e:	f000 b94d 	b.w	801053c <_write_r>

080102a2 <__sseek>:
 80102a2:	b510      	push	{r4, lr}
 80102a4:	460c      	mov	r4, r1
 80102a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102aa:	f000 f913 	bl	80104d4 <_lseek_r>
 80102ae:	1c43      	adds	r3, r0, #1
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	bf15      	itete	ne
 80102b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80102b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102be:	81a3      	strheq	r3, [r4, #12]
 80102c0:	bf18      	it	ne
 80102c2:	81a3      	strhne	r3, [r4, #12]
 80102c4:	bd10      	pop	{r4, pc}

080102c6 <__sclose>:
 80102c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ca:	f000 b89d 	b.w	8010408 <_close_r>

080102ce <__swbuf_r>:
 80102ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d0:	460e      	mov	r6, r1
 80102d2:	4614      	mov	r4, r2
 80102d4:	4605      	mov	r5, r0
 80102d6:	b118      	cbz	r0, 80102e0 <__swbuf_r+0x12>
 80102d8:	6a03      	ldr	r3, [r0, #32]
 80102da:	b90b      	cbnz	r3, 80102e0 <__swbuf_r+0x12>
 80102dc:	f7ff fe5a 	bl	800ff94 <__sinit>
 80102e0:	69a3      	ldr	r3, [r4, #24]
 80102e2:	60a3      	str	r3, [r4, #8]
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	071a      	lsls	r2, r3, #28
 80102e8:	d525      	bpl.n	8010336 <__swbuf_r+0x68>
 80102ea:	6923      	ldr	r3, [r4, #16]
 80102ec:	b31b      	cbz	r3, 8010336 <__swbuf_r+0x68>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	6922      	ldr	r2, [r4, #16]
 80102f2:	1a98      	subs	r0, r3, r2
 80102f4:	6963      	ldr	r3, [r4, #20]
 80102f6:	b2f6      	uxtb	r6, r6
 80102f8:	4283      	cmp	r3, r0
 80102fa:	4637      	mov	r7, r6
 80102fc:	dc04      	bgt.n	8010308 <__swbuf_r+0x3a>
 80102fe:	4621      	mov	r1, r4
 8010300:	4628      	mov	r0, r5
 8010302:	f000 fd0f 	bl	8010d24 <_fflush_r>
 8010306:	b9e0      	cbnz	r0, 8010342 <__swbuf_r+0x74>
 8010308:	68a3      	ldr	r3, [r4, #8]
 801030a:	3b01      	subs	r3, #1
 801030c:	60a3      	str	r3, [r4, #8]
 801030e:	6823      	ldr	r3, [r4, #0]
 8010310:	1c5a      	adds	r2, r3, #1
 8010312:	6022      	str	r2, [r4, #0]
 8010314:	701e      	strb	r6, [r3, #0]
 8010316:	6962      	ldr	r2, [r4, #20]
 8010318:	1c43      	adds	r3, r0, #1
 801031a:	429a      	cmp	r2, r3
 801031c:	d004      	beq.n	8010328 <__swbuf_r+0x5a>
 801031e:	89a3      	ldrh	r3, [r4, #12]
 8010320:	07db      	lsls	r3, r3, #31
 8010322:	d506      	bpl.n	8010332 <__swbuf_r+0x64>
 8010324:	2e0a      	cmp	r6, #10
 8010326:	d104      	bne.n	8010332 <__swbuf_r+0x64>
 8010328:	4621      	mov	r1, r4
 801032a:	4628      	mov	r0, r5
 801032c:	f000 fcfa 	bl	8010d24 <_fflush_r>
 8010330:	b938      	cbnz	r0, 8010342 <__swbuf_r+0x74>
 8010332:	4638      	mov	r0, r7
 8010334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010336:	4621      	mov	r1, r4
 8010338:	4628      	mov	r0, r5
 801033a:	f000 f805 	bl	8010348 <__swsetup_r>
 801033e:	2800      	cmp	r0, #0
 8010340:	d0d5      	beq.n	80102ee <__swbuf_r+0x20>
 8010342:	f04f 37ff 	mov.w	r7, #4294967295
 8010346:	e7f4      	b.n	8010332 <__swbuf_r+0x64>

08010348 <__swsetup_r>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	4b2a      	ldr	r3, [pc, #168]	; (80103f4 <__swsetup_r+0xac>)
 801034c:	4605      	mov	r5, r0
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	460c      	mov	r4, r1
 8010352:	b118      	cbz	r0, 801035c <__swsetup_r+0x14>
 8010354:	6a03      	ldr	r3, [r0, #32]
 8010356:	b90b      	cbnz	r3, 801035c <__swsetup_r+0x14>
 8010358:	f7ff fe1c 	bl	800ff94 <__sinit>
 801035c:	89a3      	ldrh	r3, [r4, #12]
 801035e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010362:	0718      	lsls	r0, r3, #28
 8010364:	d422      	bmi.n	80103ac <__swsetup_r+0x64>
 8010366:	06d9      	lsls	r1, r3, #27
 8010368:	d407      	bmi.n	801037a <__swsetup_r+0x32>
 801036a:	2309      	movs	r3, #9
 801036c:	602b      	str	r3, [r5, #0]
 801036e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010372:	81a3      	strh	r3, [r4, #12]
 8010374:	f04f 30ff 	mov.w	r0, #4294967295
 8010378:	e034      	b.n	80103e4 <__swsetup_r+0x9c>
 801037a:	0758      	lsls	r0, r3, #29
 801037c:	d512      	bpl.n	80103a4 <__swsetup_r+0x5c>
 801037e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010380:	b141      	cbz	r1, 8010394 <__swsetup_r+0x4c>
 8010382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010386:	4299      	cmp	r1, r3
 8010388:	d002      	beq.n	8010390 <__swsetup_r+0x48>
 801038a:	4628      	mov	r0, r5
 801038c:	f000 f924 	bl	80105d8 <_free_r>
 8010390:	2300      	movs	r3, #0
 8010392:	6363      	str	r3, [r4, #52]	; 0x34
 8010394:	89a3      	ldrh	r3, [r4, #12]
 8010396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801039a:	81a3      	strh	r3, [r4, #12]
 801039c:	2300      	movs	r3, #0
 801039e:	6063      	str	r3, [r4, #4]
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	6023      	str	r3, [r4, #0]
 80103a4:	89a3      	ldrh	r3, [r4, #12]
 80103a6:	f043 0308 	orr.w	r3, r3, #8
 80103aa:	81a3      	strh	r3, [r4, #12]
 80103ac:	6923      	ldr	r3, [r4, #16]
 80103ae:	b94b      	cbnz	r3, 80103c4 <__swsetup_r+0x7c>
 80103b0:	89a3      	ldrh	r3, [r4, #12]
 80103b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103ba:	d003      	beq.n	80103c4 <__swsetup_r+0x7c>
 80103bc:	4621      	mov	r1, r4
 80103be:	4628      	mov	r0, r5
 80103c0:	f000 fcfe 	bl	8010dc0 <__smakebuf_r>
 80103c4:	89a0      	ldrh	r0, [r4, #12]
 80103c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103ca:	f010 0301 	ands.w	r3, r0, #1
 80103ce:	d00a      	beq.n	80103e6 <__swsetup_r+0x9e>
 80103d0:	2300      	movs	r3, #0
 80103d2:	60a3      	str	r3, [r4, #8]
 80103d4:	6963      	ldr	r3, [r4, #20]
 80103d6:	425b      	negs	r3, r3
 80103d8:	61a3      	str	r3, [r4, #24]
 80103da:	6923      	ldr	r3, [r4, #16]
 80103dc:	b943      	cbnz	r3, 80103f0 <__swsetup_r+0xa8>
 80103de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80103e2:	d1c4      	bne.n	801036e <__swsetup_r+0x26>
 80103e4:	bd38      	pop	{r3, r4, r5, pc}
 80103e6:	0781      	lsls	r1, r0, #30
 80103e8:	bf58      	it	pl
 80103ea:	6963      	ldrpl	r3, [r4, #20]
 80103ec:	60a3      	str	r3, [r4, #8]
 80103ee:	e7f4      	b.n	80103da <__swsetup_r+0x92>
 80103f0:	2000      	movs	r0, #0
 80103f2:	e7f7      	b.n	80103e4 <__swsetup_r+0x9c>
 80103f4:	2000009c 	.word	0x2000009c

080103f8 <memset>:
 80103f8:	4402      	add	r2, r0
 80103fa:	4603      	mov	r3, r0
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d100      	bne.n	8010402 <memset+0xa>
 8010400:	4770      	bx	lr
 8010402:	f803 1b01 	strb.w	r1, [r3], #1
 8010406:	e7f9      	b.n	80103fc <memset+0x4>

08010408 <_close_r>:
 8010408:	b538      	push	{r3, r4, r5, lr}
 801040a:	4d06      	ldr	r5, [pc, #24]	; (8010424 <_close_r+0x1c>)
 801040c:	2300      	movs	r3, #0
 801040e:	4604      	mov	r4, r0
 8010410:	4608      	mov	r0, r1
 8010412:	602b      	str	r3, [r5, #0]
 8010414:	f7f1 f827 	bl	8001466 <_close>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d102      	bne.n	8010422 <_close_r+0x1a>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	b103      	cbz	r3, 8010422 <_close_r+0x1a>
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	bd38      	pop	{r3, r4, r5, pc}
 8010424:	20004ca0 	.word	0x20004ca0

08010428 <_reclaim_reent>:
 8010428:	4b29      	ldr	r3, [pc, #164]	; (80104d0 <_reclaim_reent+0xa8>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4283      	cmp	r3, r0
 801042e:	b570      	push	{r4, r5, r6, lr}
 8010430:	4604      	mov	r4, r0
 8010432:	d04b      	beq.n	80104cc <_reclaim_reent+0xa4>
 8010434:	69c3      	ldr	r3, [r0, #28]
 8010436:	b143      	cbz	r3, 801044a <_reclaim_reent+0x22>
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d144      	bne.n	80104c8 <_reclaim_reent+0xa0>
 801043e:	69e3      	ldr	r3, [r4, #28]
 8010440:	6819      	ldr	r1, [r3, #0]
 8010442:	b111      	cbz	r1, 801044a <_reclaim_reent+0x22>
 8010444:	4620      	mov	r0, r4
 8010446:	f000 f8c7 	bl	80105d8 <_free_r>
 801044a:	6961      	ldr	r1, [r4, #20]
 801044c:	b111      	cbz	r1, 8010454 <_reclaim_reent+0x2c>
 801044e:	4620      	mov	r0, r4
 8010450:	f000 f8c2 	bl	80105d8 <_free_r>
 8010454:	69e1      	ldr	r1, [r4, #28]
 8010456:	b111      	cbz	r1, 801045e <_reclaim_reent+0x36>
 8010458:	4620      	mov	r0, r4
 801045a:	f000 f8bd 	bl	80105d8 <_free_r>
 801045e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010460:	b111      	cbz	r1, 8010468 <_reclaim_reent+0x40>
 8010462:	4620      	mov	r0, r4
 8010464:	f000 f8b8 	bl	80105d8 <_free_r>
 8010468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801046a:	b111      	cbz	r1, 8010472 <_reclaim_reent+0x4a>
 801046c:	4620      	mov	r0, r4
 801046e:	f000 f8b3 	bl	80105d8 <_free_r>
 8010472:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010474:	b111      	cbz	r1, 801047c <_reclaim_reent+0x54>
 8010476:	4620      	mov	r0, r4
 8010478:	f000 f8ae 	bl	80105d8 <_free_r>
 801047c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801047e:	b111      	cbz	r1, 8010486 <_reclaim_reent+0x5e>
 8010480:	4620      	mov	r0, r4
 8010482:	f000 f8a9 	bl	80105d8 <_free_r>
 8010486:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010488:	b111      	cbz	r1, 8010490 <_reclaim_reent+0x68>
 801048a:	4620      	mov	r0, r4
 801048c:	f000 f8a4 	bl	80105d8 <_free_r>
 8010490:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010492:	b111      	cbz	r1, 801049a <_reclaim_reent+0x72>
 8010494:	4620      	mov	r0, r4
 8010496:	f000 f89f 	bl	80105d8 <_free_r>
 801049a:	6a23      	ldr	r3, [r4, #32]
 801049c:	b1b3      	cbz	r3, 80104cc <_reclaim_reent+0xa4>
 801049e:	4620      	mov	r0, r4
 80104a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104a4:	4718      	bx	r3
 80104a6:	5949      	ldr	r1, [r1, r5]
 80104a8:	b941      	cbnz	r1, 80104bc <_reclaim_reent+0x94>
 80104aa:	3504      	adds	r5, #4
 80104ac:	69e3      	ldr	r3, [r4, #28]
 80104ae:	2d80      	cmp	r5, #128	; 0x80
 80104b0:	68d9      	ldr	r1, [r3, #12]
 80104b2:	d1f8      	bne.n	80104a6 <_reclaim_reent+0x7e>
 80104b4:	4620      	mov	r0, r4
 80104b6:	f000 f88f 	bl	80105d8 <_free_r>
 80104ba:	e7c0      	b.n	801043e <_reclaim_reent+0x16>
 80104bc:	680e      	ldr	r6, [r1, #0]
 80104be:	4620      	mov	r0, r4
 80104c0:	f000 f88a 	bl	80105d8 <_free_r>
 80104c4:	4631      	mov	r1, r6
 80104c6:	e7ef      	b.n	80104a8 <_reclaim_reent+0x80>
 80104c8:	2500      	movs	r5, #0
 80104ca:	e7ef      	b.n	80104ac <_reclaim_reent+0x84>
 80104cc:	bd70      	pop	{r4, r5, r6, pc}
 80104ce:	bf00      	nop
 80104d0:	2000009c 	.word	0x2000009c

080104d4 <_lseek_r>:
 80104d4:	b538      	push	{r3, r4, r5, lr}
 80104d6:	4d07      	ldr	r5, [pc, #28]	; (80104f4 <_lseek_r+0x20>)
 80104d8:	4604      	mov	r4, r0
 80104da:	4608      	mov	r0, r1
 80104dc:	4611      	mov	r1, r2
 80104de:	2200      	movs	r2, #0
 80104e0:	602a      	str	r2, [r5, #0]
 80104e2:	461a      	mov	r2, r3
 80104e4:	f7f0 ffe6 	bl	80014b4 <_lseek>
 80104e8:	1c43      	adds	r3, r0, #1
 80104ea:	d102      	bne.n	80104f2 <_lseek_r+0x1e>
 80104ec:	682b      	ldr	r3, [r5, #0]
 80104ee:	b103      	cbz	r3, 80104f2 <_lseek_r+0x1e>
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	bd38      	pop	{r3, r4, r5, pc}
 80104f4:	20004ca0 	.word	0x20004ca0

080104f8 <_read_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d07      	ldr	r5, [pc, #28]	; (8010518 <_read_r+0x20>)
 80104fc:	4604      	mov	r4, r0
 80104fe:	4608      	mov	r0, r1
 8010500:	4611      	mov	r1, r2
 8010502:	2200      	movs	r2, #0
 8010504:	602a      	str	r2, [r5, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	f7f0 ff74 	bl	80013f4 <_read>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_read_r+0x1e>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	b103      	cbz	r3, 8010516 <_read_r+0x1e>
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	20004ca0 	.word	0x20004ca0

0801051c <_sbrk_r>:
 801051c:	b538      	push	{r3, r4, r5, lr}
 801051e:	4d06      	ldr	r5, [pc, #24]	; (8010538 <_sbrk_r+0x1c>)
 8010520:	2300      	movs	r3, #0
 8010522:	4604      	mov	r4, r0
 8010524:	4608      	mov	r0, r1
 8010526:	602b      	str	r3, [r5, #0]
 8010528:	f7f0 ffd2 	bl	80014d0 <_sbrk>
 801052c:	1c43      	adds	r3, r0, #1
 801052e:	d102      	bne.n	8010536 <_sbrk_r+0x1a>
 8010530:	682b      	ldr	r3, [r5, #0]
 8010532:	b103      	cbz	r3, 8010536 <_sbrk_r+0x1a>
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	bd38      	pop	{r3, r4, r5, pc}
 8010538:	20004ca0 	.word	0x20004ca0

0801053c <_write_r>:
 801053c:	b538      	push	{r3, r4, r5, lr}
 801053e:	4d07      	ldr	r5, [pc, #28]	; (801055c <_write_r+0x20>)
 8010540:	4604      	mov	r4, r0
 8010542:	4608      	mov	r0, r1
 8010544:	4611      	mov	r1, r2
 8010546:	2200      	movs	r2, #0
 8010548:	602a      	str	r2, [r5, #0]
 801054a:	461a      	mov	r2, r3
 801054c:	f7f0 ff6f 	bl	800142e <_write>
 8010550:	1c43      	adds	r3, r0, #1
 8010552:	d102      	bne.n	801055a <_write_r+0x1e>
 8010554:	682b      	ldr	r3, [r5, #0]
 8010556:	b103      	cbz	r3, 801055a <_write_r+0x1e>
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	20004ca0 	.word	0x20004ca0

08010560 <__errno>:
 8010560:	4b01      	ldr	r3, [pc, #4]	; (8010568 <__errno+0x8>)
 8010562:	6818      	ldr	r0, [r3, #0]
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	2000009c 	.word	0x2000009c

0801056c <__libc_init_array>:
 801056c:	b570      	push	{r4, r5, r6, lr}
 801056e:	4d0d      	ldr	r5, [pc, #52]	; (80105a4 <__libc_init_array+0x38>)
 8010570:	4c0d      	ldr	r4, [pc, #52]	; (80105a8 <__libc_init_array+0x3c>)
 8010572:	1b64      	subs	r4, r4, r5
 8010574:	10a4      	asrs	r4, r4, #2
 8010576:	2600      	movs	r6, #0
 8010578:	42a6      	cmp	r6, r4
 801057a:	d109      	bne.n	8010590 <__libc_init_array+0x24>
 801057c:	4d0b      	ldr	r5, [pc, #44]	; (80105ac <__libc_init_array+0x40>)
 801057e:	4c0c      	ldr	r4, [pc, #48]	; (80105b0 <__libc_init_array+0x44>)
 8010580:	f000 fc7c 	bl	8010e7c <_init>
 8010584:	1b64      	subs	r4, r4, r5
 8010586:	10a4      	asrs	r4, r4, #2
 8010588:	2600      	movs	r6, #0
 801058a:	42a6      	cmp	r6, r4
 801058c:	d105      	bne.n	801059a <__libc_init_array+0x2e>
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	f855 3b04 	ldr.w	r3, [r5], #4
 8010594:	4798      	blx	r3
 8010596:	3601      	adds	r6, #1
 8010598:	e7ee      	b.n	8010578 <__libc_init_array+0xc>
 801059a:	f855 3b04 	ldr.w	r3, [r5], #4
 801059e:	4798      	blx	r3
 80105a0:	3601      	adds	r6, #1
 80105a2:	e7f2      	b.n	801058a <__libc_init_array+0x1e>
 80105a4:	08010fdc 	.word	0x08010fdc
 80105a8:	08010fdc 	.word	0x08010fdc
 80105ac:	08010fdc 	.word	0x08010fdc
 80105b0:	08010fe0 	.word	0x08010fe0

080105b4 <__retarget_lock_init_recursive>:
 80105b4:	4770      	bx	lr

080105b6 <__retarget_lock_acquire_recursive>:
 80105b6:	4770      	bx	lr

080105b8 <__retarget_lock_release_recursive>:
 80105b8:	4770      	bx	lr

080105ba <memcpy>:
 80105ba:	440a      	add	r2, r1
 80105bc:	4291      	cmp	r1, r2
 80105be:	f100 33ff 	add.w	r3, r0, #4294967295
 80105c2:	d100      	bne.n	80105c6 <memcpy+0xc>
 80105c4:	4770      	bx	lr
 80105c6:	b510      	push	{r4, lr}
 80105c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105d0:	4291      	cmp	r1, r2
 80105d2:	d1f9      	bne.n	80105c8 <memcpy+0xe>
 80105d4:	bd10      	pop	{r4, pc}
	...

080105d8 <_free_r>:
 80105d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105da:	2900      	cmp	r1, #0
 80105dc:	d044      	beq.n	8010668 <_free_r+0x90>
 80105de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105e2:	9001      	str	r0, [sp, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f1a1 0404 	sub.w	r4, r1, #4
 80105ea:	bfb8      	it	lt
 80105ec:	18e4      	addlt	r4, r4, r3
 80105ee:	f7ff fc39 	bl	800fe64 <__malloc_lock>
 80105f2:	4a1e      	ldr	r2, [pc, #120]	; (801066c <_free_r+0x94>)
 80105f4:	9801      	ldr	r0, [sp, #4]
 80105f6:	6813      	ldr	r3, [r2, #0]
 80105f8:	b933      	cbnz	r3, 8010608 <_free_r+0x30>
 80105fa:	6063      	str	r3, [r4, #4]
 80105fc:	6014      	str	r4, [r2, #0]
 80105fe:	b003      	add	sp, #12
 8010600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010604:	f7ff bc34 	b.w	800fe70 <__malloc_unlock>
 8010608:	42a3      	cmp	r3, r4
 801060a:	d908      	bls.n	801061e <_free_r+0x46>
 801060c:	6825      	ldr	r5, [r4, #0]
 801060e:	1961      	adds	r1, r4, r5
 8010610:	428b      	cmp	r3, r1
 8010612:	bf01      	itttt	eq
 8010614:	6819      	ldreq	r1, [r3, #0]
 8010616:	685b      	ldreq	r3, [r3, #4]
 8010618:	1949      	addeq	r1, r1, r5
 801061a:	6021      	streq	r1, [r4, #0]
 801061c:	e7ed      	b.n	80105fa <_free_r+0x22>
 801061e:	461a      	mov	r2, r3
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	b10b      	cbz	r3, 8010628 <_free_r+0x50>
 8010624:	42a3      	cmp	r3, r4
 8010626:	d9fa      	bls.n	801061e <_free_r+0x46>
 8010628:	6811      	ldr	r1, [r2, #0]
 801062a:	1855      	adds	r5, r2, r1
 801062c:	42a5      	cmp	r5, r4
 801062e:	d10b      	bne.n	8010648 <_free_r+0x70>
 8010630:	6824      	ldr	r4, [r4, #0]
 8010632:	4421      	add	r1, r4
 8010634:	1854      	adds	r4, r2, r1
 8010636:	42a3      	cmp	r3, r4
 8010638:	6011      	str	r1, [r2, #0]
 801063a:	d1e0      	bne.n	80105fe <_free_r+0x26>
 801063c:	681c      	ldr	r4, [r3, #0]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	6053      	str	r3, [r2, #4]
 8010642:	440c      	add	r4, r1
 8010644:	6014      	str	r4, [r2, #0]
 8010646:	e7da      	b.n	80105fe <_free_r+0x26>
 8010648:	d902      	bls.n	8010650 <_free_r+0x78>
 801064a:	230c      	movs	r3, #12
 801064c:	6003      	str	r3, [r0, #0]
 801064e:	e7d6      	b.n	80105fe <_free_r+0x26>
 8010650:	6825      	ldr	r5, [r4, #0]
 8010652:	1961      	adds	r1, r4, r5
 8010654:	428b      	cmp	r3, r1
 8010656:	bf04      	itt	eq
 8010658:	6819      	ldreq	r1, [r3, #0]
 801065a:	685b      	ldreq	r3, [r3, #4]
 801065c:	6063      	str	r3, [r4, #4]
 801065e:	bf04      	itt	eq
 8010660:	1949      	addeq	r1, r1, r5
 8010662:	6021      	streq	r1, [r4, #0]
 8010664:	6054      	str	r4, [r2, #4]
 8010666:	e7ca      	b.n	80105fe <_free_r+0x26>
 8010668:	b003      	add	sp, #12
 801066a:	bd30      	pop	{r4, r5, pc}
 801066c:	20004b5c 	.word	0x20004b5c

08010670 <__sfputc_r>:
 8010670:	6893      	ldr	r3, [r2, #8]
 8010672:	3b01      	subs	r3, #1
 8010674:	2b00      	cmp	r3, #0
 8010676:	b410      	push	{r4}
 8010678:	6093      	str	r3, [r2, #8]
 801067a:	da08      	bge.n	801068e <__sfputc_r+0x1e>
 801067c:	6994      	ldr	r4, [r2, #24]
 801067e:	42a3      	cmp	r3, r4
 8010680:	db01      	blt.n	8010686 <__sfputc_r+0x16>
 8010682:	290a      	cmp	r1, #10
 8010684:	d103      	bne.n	801068e <__sfputc_r+0x1e>
 8010686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801068a:	f7ff be20 	b.w	80102ce <__swbuf_r>
 801068e:	6813      	ldr	r3, [r2, #0]
 8010690:	1c58      	adds	r0, r3, #1
 8010692:	6010      	str	r0, [r2, #0]
 8010694:	7019      	strb	r1, [r3, #0]
 8010696:	4608      	mov	r0, r1
 8010698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801069c:	4770      	bx	lr

0801069e <__sfputs_r>:
 801069e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a0:	4606      	mov	r6, r0
 80106a2:	460f      	mov	r7, r1
 80106a4:	4614      	mov	r4, r2
 80106a6:	18d5      	adds	r5, r2, r3
 80106a8:	42ac      	cmp	r4, r5
 80106aa:	d101      	bne.n	80106b0 <__sfputs_r+0x12>
 80106ac:	2000      	movs	r0, #0
 80106ae:	e007      	b.n	80106c0 <__sfputs_r+0x22>
 80106b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b4:	463a      	mov	r2, r7
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ff ffda 	bl	8010670 <__sfputc_r>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d1f3      	bne.n	80106a8 <__sfputs_r+0xa>
 80106c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106c4 <_vfiprintf_r>:
 80106c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c8:	460d      	mov	r5, r1
 80106ca:	b09d      	sub	sp, #116	; 0x74
 80106cc:	4614      	mov	r4, r2
 80106ce:	4698      	mov	r8, r3
 80106d0:	4606      	mov	r6, r0
 80106d2:	b118      	cbz	r0, 80106dc <_vfiprintf_r+0x18>
 80106d4:	6a03      	ldr	r3, [r0, #32]
 80106d6:	b90b      	cbnz	r3, 80106dc <_vfiprintf_r+0x18>
 80106d8:	f7ff fc5c 	bl	800ff94 <__sinit>
 80106dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106de:	07d9      	lsls	r1, r3, #31
 80106e0:	d405      	bmi.n	80106ee <_vfiprintf_r+0x2a>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	059a      	lsls	r2, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_vfiprintf_r+0x2a>
 80106e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ea:	f7ff ff64 	bl	80105b6 <__retarget_lock_acquire_recursive>
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	071b      	lsls	r3, r3, #28
 80106f2:	d501      	bpl.n	80106f8 <_vfiprintf_r+0x34>
 80106f4:	692b      	ldr	r3, [r5, #16]
 80106f6:	b99b      	cbnz	r3, 8010720 <_vfiprintf_r+0x5c>
 80106f8:	4629      	mov	r1, r5
 80106fa:	4630      	mov	r0, r6
 80106fc:	f7ff fe24 	bl	8010348 <__swsetup_r>
 8010700:	b170      	cbz	r0, 8010720 <_vfiprintf_r+0x5c>
 8010702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010704:	07dc      	lsls	r4, r3, #31
 8010706:	d504      	bpl.n	8010712 <_vfiprintf_r+0x4e>
 8010708:	f04f 30ff 	mov.w	r0, #4294967295
 801070c:	b01d      	add	sp, #116	; 0x74
 801070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010712:	89ab      	ldrh	r3, [r5, #12]
 8010714:	0598      	lsls	r0, r3, #22
 8010716:	d4f7      	bmi.n	8010708 <_vfiprintf_r+0x44>
 8010718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801071a:	f7ff ff4d 	bl	80105b8 <__retarget_lock_release_recursive>
 801071e:	e7f3      	b.n	8010708 <_vfiprintf_r+0x44>
 8010720:	2300      	movs	r3, #0
 8010722:	9309      	str	r3, [sp, #36]	; 0x24
 8010724:	2320      	movs	r3, #32
 8010726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801072a:	f8cd 800c 	str.w	r8, [sp, #12]
 801072e:	2330      	movs	r3, #48	; 0x30
 8010730:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80108e4 <_vfiprintf_r+0x220>
 8010734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010738:	f04f 0901 	mov.w	r9, #1
 801073c:	4623      	mov	r3, r4
 801073e:	469a      	mov	sl, r3
 8010740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010744:	b10a      	cbz	r2, 801074a <_vfiprintf_r+0x86>
 8010746:	2a25      	cmp	r2, #37	; 0x25
 8010748:	d1f9      	bne.n	801073e <_vfiprintf_r+0x7a>
 801074a:	ebba 0b04 	subs.w	fp, sl, r4
 801074e:	d00b      	beq.n	8010768 <_vfiprintf_r+0xa4>
 8010750:	465b      	mov	r3, fp
 8010752:	4622      	mov	r2, r4
 8010754:	4629      	mov	r1, r5
 8010756:	4630      	mov	r0, r6
 8010758:	f7ff ffa1 	bl	801069e <__sfputs_r>
 801075c:	3001      	adds	r0, #1
 801075e:	f000 80a9 	beq.w	80108b4 <_vfiprintf_r+0x1f0>
 8010762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010764:	445a      	add	r2, fp
 8010766:	9209      	str	r2, [sp, #36]	; 0x24
 8010768:	f89a 3000 	ldrb.w	r3, [sl]
 801076c:	2b00      	cmp	r3, #0
 801076e:	f000 80a1 	beq.w	80108b4 <_vfiprintf_r+0x1f0>
 8010772:	2300      	movs	r3, #0
 8010774:	f04f 32ff 	mov.w	r2, #4294967295
 8010778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801077c:	f10a 0a01 	add.w	sl, sl, #1
 8010780:	9304      	str	r3, [sp, #16]
 8010782:	9307      	str	r3, [sp, #28]
 8010784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010788:	931a      	str	r3, [sp, #104]	; 0x68
 801078a:	4654      	mov	r4, sl
 801078c:	2205      	movs	r2, #5
 801078e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010792:	4854      	ldr	r0, [pc, #336]	; (80108e4 <_vfiprintf_r+0x220>)
 8010794:	f7ef fd1c 	bl	80001d0 <memchr>
 8010798:	9a04      	ldr	r2, [sp, #16]
 801079a:	b9d8      	cbnz	r0, 80107d4 <_vfiprintf_r+0x110>
 801079c:	06d1      	lsls	r1, r2, #27
 801079e:	bf44      	itt	mi
 80107a0:	2320      	movmi	r3, #32
 80107a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107a6:	0713      	lsls	r3, r2, #28
 80107a8:	bf44      	itt	mi
 80107aa:	232b      	movmi	r3, #43	; 0x2b
 80107ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107b0:	f89a 3000 	ldrb.w	r3, [sl]
 80107b4:	2b2a      	cmp	r3, #42	; 0x2a
 80107b6:	d015      	beq.n	80107e4 <_vfiprintf_r+0x120>
 80107b8:	9a07      	ldr	r2, [sp, #28]
 80107ba:	4654      	mov	r4, sl
 80107bc:	2000      	movs	r0, #0
 80107be:	f04f 0c0a 	mov.w	ip, #10
 80107c2:	4621      	mov	r1, r4
 80107c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107c8:	3b30      	subs	r3, #48	; 0x30
 80107ca:	2b09      	cmp	r3, #9
 80107cc:	d94d      	bls.n	801086a <_vfiprintf_r+0x1a6>
 80107ce:	b1b0      	cbz	r0, 80107fe <_vfiprintf_r+0x13a>
 80107d0:	9207      	str	r2, [sp, #28]
 80107d2:	e014      	b.n	80107fe <_vfiprintf_r+0x13a>
 80107d4:	eba0 0308 	sub.w	r3, r0, r8
 80107d8:	fa09 f303 	lsl.w	r3, r9, r3
 80107dc:	4313      	orrs	r3, r2
 80107de:	9304      	str	r3, [sp, #16]
 80107e0:	46a2      	mov	sl, r4
 80107e2:	e7d2      	b.n	801078a <_vfiprintf_r+0xc6>
 80107e4:	9b03      	ldr	r3, [sp, #12]
 80107e6:	1d19      	adds	r1, r3, #4
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	9103      	str	r1, [sp, #12]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	bfbb      	ittet	lt
 80107f0:	425b      	neglt	r3, r3
 80107f2:	f042 0202 	orrlt.w	r2, r2, #2
 80107f6:	9307      	strge	r3, [sp, #28]
 80107f8:	9307      	strlt	r3, [sp, #28]
 80107fa:	bfb8      	it	lt
 80107fc:	9204      	strlt	r2, [sp, #16]
 80107fe:	7823      	ldrb	r3, [r4, #0]
 8010800:	2b2e      	cmp	r3, #46	; 0x2e
 8010802:	d10c      	bne.n	801081e <_vfiprintf_r+0x15a>
 8010804:	7863      	ldrb	r3, [r4, #1]
 8010806:	2b2a      	cmp	r3, #42	; 0x2a
 8010808:	d134      	bne.n	8010874 <_vfiprintf_r+0x1b0>
 801080a:	9b03      	ldr	r3, [sp, #12]
 801080c:	1d1a      	adds	r2, r3, #4
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	9203      	str	r2, [sp, #12]
 8010812:	2b00      	cmp	r3, #0
 8010814:	bfb8      	it	lt
 8010816:	f04f 33ff 	movlt.w	r3, #4294967295
 801081a:	3402      	adds	r4, #2
 801081c:	9305      	str	r3, [sp, #20]
 801081e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80108f4 <_vfiprintf_r+0x230>
 8010822:	7821      	ldrb	r1, [r4, #0]
 8010824:	2203      	movs	r2, #3
 8010826:	4650      	mov	r0, sl
 8010828:	f7ef fcd2 	bl	80001d0 <memchr>
 801082c:	b138      	cbz	r0, 801083e <_vfiprintf_r+0x17a>
 801082e:	9b04      	ldr	r3, [sp, #16]
 8010830:	eba0 000a 	sub.w	r0, r0, sl
 8010834:	2240      	movs	r2, #64	; 0x40
 8010836:	4082      	lsls	r2, r0
 8010838:	4313      	orrs	r3, r2
 801083a:	3401      	adds	r4, #1
 801083c:	9304      	str	r3, [sp, #16]
 801083e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010842:	4829      	ldr	r0, [pc, #164]	; (80108e8 <_vfiprintf_r+0x224>)
 8010844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010848:	2206      	movs	r2, #6
 801084a:	f7ef fcc1 	bl	80001d0 <memchr>
 801084e:	2800      	cmp	r0, #0
 8010850:	d03f      	beq.n	80108d2 <_vfiprintf_r+0x20e>
 8010852:	4b26      	ldr	r3, [pc, #152]	; (80108ec <_vfiprintf_r+0x228>)
 8010854:	bb1b      	cbnz	r3, 801089e <_vfiprintf_r+0x1da>
 8010856:	9b03      	ldr	r3, [sp, #12]
 8010858:	3307      	adds	r3, #7
 801085a:	f023 0307 	bic.w	r3, r3, #7
 801085e:	3308      	adds	r3, #8
 8010860:	9303      	str	r3, [sp, #12]
 8010862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010864:	443b      	add	r3, r7
 8010866:	9309      	str	r3, [sp, #36]	; 0x24
 8010868:	e768      	b.n	801073c <_vfiprintf_r+0x78>
 801086a:	fb0c 3202 	mla	r2, ip, r2, r3
 801086e:	460c      	mov	r4, r1
 8010870:	2001      	movs	r0, #1
 8010872:	e7a6      	b.n	80107c2 <_vfiprintf_r+0xfe>
 8010874:	2300      	movs	r3, #0
 8010876:	3401      	adds	r4, #1
 8010878:	9305      	str	r3, [sp, #20]
 801087a:	4619      	mov	r1, r3
 801087c:	f04f 0c0a 	mov.w	ip, #10
 8010880:	4620      	mov	r0, r4
 8010882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010886:	3a30      	subs	r2, #48	; 0x30
 8010888:	2a09      	cmp	r2, #9
 801088a:	d903      	bls.n	8010894 <_vfiprintf_r+0x1d0>
 801088c:	2b00      	cmp	r3, #0
 801088e:	d0c6      	beq.n	801081e <_vfiprintf_r+0x15a>
 8010890:	9105      	str	r1, [sp, #20]
 8010892:	e7c4      	b.n	801081e <_vfiprintf_r+0x15a>
 8010894:	fb0c 2101 	mla	r1, ip, r1, r2
 8010898:	4604      	mov	r4, r0
 801089a:	2301      	movs	r3, #1
 801089c:	e7f0      	b.n	8010880 <_vfiprintf_r+0x1bc>
 801089e:	ab03      	add	r3, sp, #12
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	462a      	mov	r2, r5
 80108a4:	4b12      	ldr	r3, [pc, #72]	; (80108f0 <_vfiprintf_r+0x22c>)
 80108a6:	a904      	add	r1, sp, #16
 80108a8:	4630      	mov	r0, r6
 80108aa:	f3af 8000 	nop.w
 80108ae:	4607      	mov	r7, r0
 80108b0:	1c78      	adds	r0, r7, #1
 80108b2:	d1d6      	bne.n	8010862 <_vfiprintf_r+0x19e>
 80108b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108b6:	07d9      	lsls	r1, r3, #31
 80108b8:	d405      	bmi.n	80108c6 <_vfiprintf_r+0x202>
 80108ba:	89ab      	ldrh	r3, [r5, #12]
 80108bc:	059a      	lsls	r2, r3, #22
 80108be:	d402      	bmi.n	80108c6 <_vfiprintf_r+0x202>
 80108c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108c2:	f7ff fe79 	bl	80105b8 <__retarget_lock_release_recursive>
 80108c6:	89ab      	ldrh	r3, [r5, #12]
 80108c8:	065b      	lsls	r3, r3, #25
 80108ca:	f53f af1d 	bmi.w	8010708 <_vfiprintf_r+0x44>
 80108ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108d0:	e71c      	b.n	801070c <_vfiprintf_r+0x48>
 80108d2:	ab03      	add	r3, sp, #12
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	462a      	mov	r2, r5
 80108d8:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <_vfiprintf_r+0x22c>)
 80108da:	a904      	add	r1, sp, #16
 80108dc:	4630      	mov	r0, r6
 80108de:	f000 f879 	bl	80109d4 <_printf_i>
 80108e2:	e7e4      	b.n	80108ae <_vfiprintf_r+0x1ea>
 80108e4:	08010fa0 	.word	0x08010fa0
 80108e8:	08010faa 	.word	0x08010faa
 80108ec:	00000000 	.word	0x00000000
 80108f0:	0801069f 	.word	0x0801069f
 80108f4:	08010fa6 	.word	0x08010fa6

080108f8 <_printf_common>:
 80108f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108fc:	4616      	mov	r6, r2
 80108fe:	4699      	mov	r9, r3
 8010900:	688a      	ldr	r2, [r1, #8]
 8010902:	690b      	ldr	r3, [r1, #16]
 8010904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010908:	4293      	cmp	r3, r2
 801090a:	bfb8      	it	lt
 801090c:	4613      	movlt	r3, r2
 801090e:	6033      	str	r3, [r6, #0]
 8010910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010914:	4607      	mov	r7, r0
 8010916:	460c      	mov	r4, r1
 8010918:	b10a      	cbz	r2, 801091e <_printf_common+0x26>
 801091a:	3301      	adds	r3, #1
 801091c:	6033      	str	r3, [r6, #0]
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	0699      	lsls	r1, r3, #26
 8010922:	bf42      	ittt	mi
 8010924:	6833      	ldrmi	r3, [r6, #0]
 8010926:	3302      	addmi	r3, #2
 8010928:	6033      	strmi	r3, [r6, #0]
 801092a:	6825      	ldr	r5, [r4, #0]
 801092c:	f015 0506 	ands.w	r5, r5, #6
 8010930:	d106      	bne.n	8010940 <_printf_common+0x48>
 8010932:	f104 0a19 	add.w	sl, r4, #25
 8010936:	68e3      	ldr	r3, [r4, #12]
 8010938:	6832      	ldr	r2, [r6, #0]
 801093a:	1a9b      	subs	r3, r3, r2
 801093c:	42ab      	cmp	r3, r5
 801093e:	dc26      	bgt.n	801098e <_printf_common+0x96>
 8010940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010944:	1e13      	subs	r3, r2, #0
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	bf18      	it	ne
 801094a:	2301      	movne	r3, #1
 801094c:	0692      	lsls	r2, r2, #26
 801094e:	d42b      	bmi.n	80109a8 <_printf_common+0xb0>
 8010950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010954:	4649      	mov	r1, r9
 8010956:	4638      	mov	r0, r7
 8010958:	47c0      	blx	r8
 801095a:	3001      	adds	r0, #1
 801095c:	d01e      	beq.n	801099c <_printf_common+0xa4>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	6922      	ldr	r2, [r4, #16]
 8010962:	f003 0306 	and.w	r3, r3, #6
 8010966:	2b04      	cmp	r3, #4
 8010968:	bf02      	ittt	eq
 801096a:	68e5      	ldreq	r5, [r4, #12]
 801096c:	6833      	ldreq	r3, [r6, #0]
 801096e:	1aed      	subeq	r5, r5, r3
 8010970:	68a3      	ldr	r3, [r4, #8]
 8010972:	bf0c      	ite	eq
 8010974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010978:	2500      	movne	r5, #0
 801097a:	4293      	cmp	r3, r2
 801097c:	bfc4      	itt	gt
 801097e:	1a9b      	subgt	r3, r3, r2
 8010980:	18ed      	addgt	r5, r5, r3
 8010982:	2600      	movs	r6, #0
 8010984:	341a      	adds	r4, #26
 8010986:	42b5      	cmp	r5, r6
 8010988:	d11a      	bne.n	80109c0 <_printf_common+0xc8>
 801098a:	2000      	movs	r0, #0
 801098c:	e008      	b.n	80109a0 <_printf_common+0xa8>
 801098e:	2301      	movs	r3, #1
 8010990:	4652      	mov	r2, sl
 8010992:	4649      	mov	r1, r9
 8010994:	4638      	mov	r0, r7
 8010996:	47c0      	blx	r8
 8010998:	3001      	adds	r0, #1
 801099a:	d103      	bne.n	80109a4 <_printf_common+0xac>
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a4:	3501      	adds	r5, #1
 80109a6:	e7c6      	b.n	8010936 <_printf_common+0x3e>
 80109a8:	18e1      	adds	r1, r4, r3
 80109aa:	1c5a      	adds	r2, r3, #1
 80109ac:	2030      	movs	r0, #48	; 0x30
 80109ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109b2:	4422      	add	r2, r4
 80109b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109bc:	3302      	adds	r3, #2
 80109be:	e7c7      	b.n	8010950 <_printf_common+0x58>
 80109c0:	2301      	movs	r3, #1
 80109c2:	4622      	mov	r2, r4
 80109c4:	4649      	mov	r1, r9
 80109c6:	4638      	mov	r0, r7
 80109c8:	47c0      	blx	r8
 80109ca:	3001      	adds	r0, #1
 80109cc:	d0e6      	beq.n	801099c <_printf_common+0xa4>
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7d9      	b.n	8010986 <_printf_common+0x8e>
	...

080109d4 <_printf_i>:
 80109d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109d8:	7e0f      	ldrb	r7, [r1, #24]
 80109da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109dc:	2f78      	cmp	r7, #120	; 0x78
 80109de:	4691      	mov	r9, r2
 80109e0:	4680      	mov	r8, r0
 80109e2:	460c      	mov	r4, r1
 80109e4:	469a      	mov	sl, r3
 80109e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109ea:	d807      	bhi.n	80109fc <_printf_i+0x28>
 80109ec:	2f62      	cmp	r7, #98	; 0x62
 80109ee:	d80a      	bhi.n	8010a06 <_printf_i+0x32>
 80109f0:	2f00      	cmp	r7, #0
 80109f2:	f000 80d4 	beq.w	8010b9e <_printf_i+0x1ca>
 80109f6:	2f58      	cmp	r7, #88	; 0x58
 80109f8:	f000 80c0 	beq.w	8010b7c <_printf_i+0x1a8>
 80109fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a04:	e03a      	b.n	8010a7c <_printf_i+0xa8>
 8010a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a0a:	2b15      	cmp	r3, #21
 8010a0c:	d8f6      	bhi.n	80109fc <_printf_i+0x28>
 8010a0e:	a101      	add	r1, pc, #4	; (adr r1, 8010a14 <_printf_i+0x40>)
 8010a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a14:	08010a6d 	.word	0x08010a6d
 8010a18:	08010a81 	.word	0x08010a81
 8010a1c:	080109fd 	.word	0x080109fd
 8010a20:	080109fd 	.word	0x080109fd
 8010a24:	080109fd 	.word	0x080109fd
 8010a28:	080109fd 	.word	0x080109fd
 8010a2c:	08010a81 	.word	0x08010a81
 8010a30:	080109fd 	.word	0x080109fd
 8010a34:	080109fd 	.word	0x080109fd
 8010a38:	080109fd 	.word	0x080109fd
 8010a3c:	080109fd 	.word	0x080109fd
 8010a40:	08010b85 	.word	0x08010b85
 8010a44:	08010aad 	.word	0x08010aad
 8010a48:	08010b3f 	.word	0x08010b3f
 8010a4c:	080109fd 	.word	0x080109fd
 8010a50:	080109fd 	.word	0x080109fd
 8010a54:	08010ba7 	.word	0x08010ba7
 8010a58:	080109fd 	.word	0x080109fd
 8010a5c:	08010aad 	.word	0x08010aad
 8010a60:	080109fd 	.word	0x080109fd
 8010a64:	080109fd 	.word	0x080109fd
 8010a68:	08010b47 	.word	0x08010b47
 8010a6c:	682b      	ldr	r3, [r5, #0]
 8010a6e:	1d1a      	adds	r2, r3, #4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	602a      	str	r2, [r5, #0]
 8010a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e09f      	b.n	8010bc0 <_printf_i+0x1ec>
 8010a80:	6820      	ldr	r0, [r4, #0]
 8010a82:	682b      	ldr	r3, [r5, #0]
 8010a84:	0607      	lsls	r7, r0, #24
 8010a86:	f103 0104 	add.w	r1, r3, #4
 8010a8a:	6029      	str	r1, [r5, #0]
 8010a8c:	d501      	bpl.n	8010a92 <_printf_i+0xbe>
 8010a8e:	681e      	ldr	r6, [r3, #0]
 8010a90:	e003      	b.n	8010a9a <_printf_i+0xc6>
 8010a92:	0646      	lsls	r6, r0, #25
 8010a94:	d5fb      	bpl.n	8010a8e <_printf_i+0xba>
 8010a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010a9a:	2e00      	cmp	r6, #0
 8010a9c:	da03      	bge.n	8010aa6 <_printf_i+0xd2>
 8010a9e:	232d      	movs	r3, #45	; 0x2d
 8010aa0:	4276      	negs	r6, r6
 8010aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aa6:	485a      	ldr	r0, [pc, #360]	; (8010c10 <_printf_i+0x23c>)
 8010aa8:	230a      	movs	r3, #10
 8010aaa:	e012      	b.n	8010ad2 <_printf_i+0xfe>
 8010aac:	682b      	ldr	r3, [r5, #0]
 8010aae:	6820      	ldr	r0, [r4, #0]
 8010ab0:	1d19      	adds	r1, r3, #4
 8010ab2:	6029      	str	r1, [r5, #0]
 8010ab4:	0605      	lsls	r5, r0, #24
 8010ab6:	d501      	bpl.n	8010abc <_printf_i+0xe8>
 8010ab8:	681e      	ldr	r6, [r3, #0]
 8010aba:	e002      	b.n	8010ac2 <_printf_i+0xee>
 8010abc:	0641      	lsls	r1, r0, #25
 8010abe:	d5fb      	bpl.n	8010ab8 <_printf_i+0xe4>
 8010ac0:	881e      	ldrh	r6, [r3, #0]
 8010ac2:	4853      	ldr	r0, [pc, #332]	; (8010c10 <_printf_i+0x23c>)
 8010ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8010ac6:	bf0c      	ite	eq
 8010ac8:	2308      	moveq	r3, #8
 8010aca:	230a      	movne	r3, #10
 8010acc:	2100      	movs	r1, #0
 8010ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ad2:	6865      	ldr	r5, [r4, #4]
 8010ad4:	60a5      	str	r5, [r4, #8]
 8010ad6:	2d00      	cmp	r5, #0
 8010ad8:	bfa2      	ittt	ge
 8010ada:	6821      	ldrge	r1, [r4, #0]
 8010adc:	f021 0104 	bicge.w	r1, r1, #4
 8010ae0:	6021      	strge	r1, [r4, #0]
 8010ae2:	b90e      	cbnz	r6, 8010ae8 <_printf_i+0x114>
 8010ae4:	2d00      	cmp	r5, #0
 8010ae6:	d04b      	beq.n	8010b80 <_printf_i+0x1ac>
 8010ae8:	4615      	mov	r5, r2
 8010aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8010aee:	fb03 6711 	mls	r7, r3, r1, r6
 8010af2:	5dc7      	ldrb	r7, [r0, r7]
 8010af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010af8:	4637      	mov	r7, r6
 8010afa:	42bb      	cmp	r3, r7
 8010afc:	460e      	mov	r6, r1
 8010afe:	d9f4      	bls.n	8010aea <_printf_i+0x116>
 8010b00:	2b08      	cmp	r3, #8
 8010b02:	d10b      	bne.n	8010b1c <_printf_i+0x148>
 8010b04:	6823      	ldr	r3, [r4, #0]
 8010b06:	07de      	lsls	r6, r3, #31
 8010b08:	d508      	bpl.n	8010b1c <_printf_i+0x148>
 8010b0a:	6923      	ldr	r3, [r4, #16]
 8010b0c:	6861      	ldr	r1, [r4, #4]
 8010b0e:	4299      	cmp	r1, r3
 8010b10:	bfde      	ittt	le
 8010b12:	2330      	movle	r3, #48	; 0x30
 8010b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b1c:	1b52      	subs	r2, r2, r5
 8010b1e:	6122      	str	r2, [r4, #16]
 8010b20:	f8cd a000 	str.w	sl, [sp]
 8010b24:	464b      	mov	r3, r9
 8010b26:	aa03      	add	r2, sp, #12
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4640      	mov	r0, r8
 8010b2c:	f7ff fee4 	bl	80108f8 <_printf_common>
 8010b30:	3001      	adds	r0, #1
 8010b32:	d14a      	bne.n	8010bca <_printf_i+0x1f6>
 8010b34:	f04f 30ff 	mov.w	r0, #4294967295
 8010b38:	b004      	add	sp, #16
 8010b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b3e:	6823      	ldr	r3, [r4, #0]
 8010b40:	f043 0320 	orr.w	r3, r3, #32
 8010b44:	6023      	str	r3, [r4, #0]
 8010b46:	4833      	ldr	r0, [pc, #204]	; (8010c14 <_printf_i+0x240>)
 8010b48:	2778      	movs	r7, #120	; 0x78
 8010b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b4e:	6823      	ldr	r3, [r4, #0]
 8010b50:	6829      	ldr	r1, [r5, #0]
 8010b52:	061f      	lsls	r7, r3, #24
 8010b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b58:	d402      	bmi.n	8010b60 <_printf_i+0x18c>
 8010b5a:	065f      	lsls	r7, r3, #25
 8010b5c:	bf48      	it	mi
 8010b5e:	b2b6      	uxthmi	r6, r6
 8010b60:	07df      	lsls	r7, r3, #31
 8010b62:	bf48      	it	mi
 8010b64:	f043 0320 	orrmi.w	r3, r3, #32
 8010b68:	6029      	str	r1, [r5, #0]
 8010b6a:	bf48      	it	mi
 8010b6c:	6023      	strmi	r3, [r4, #0]
 8010b6e:	b91e      	cbnz	r6, 8010b78 <_printf_i+0x1a4>
 8010b70:	6823      	ldr	r3, [r4, #0]
 8010b72:	f023 0320 	bic.w	r3, r3, #32
 8010b76:	6023      	str	r3, [r4, #0]
 8010b78:	2310      	movs	r3, #16
 8010b7a:	e7a7      	b.n	8010acc <_printf_i+0xf8>
 8010b7c:	4824      	ldr	r0, [pc, #144]	; (8010c10 <_printf_i+0x23c>)
 8010b7e:	e7e4      	b.n	8010b4a <_printf_i+0x176>
 8010b80:	4615      	mov	r5, r2
 8010b82:	e7bd      	b.n	8010b00 <_printf_i+0x12c>
 8010b84:	682b      	ldr	r3, [r5, #0]
 8010b86:	6826      	ldr	r6, [r4, #0]
 8010b88:	6961      	ldr	r1, [r4, #20]
 8010b8a:	1d18      	adds	r0, r3, #4
 8010b8c:	6028      	str	r0, [r5, #0]
 8010b8e:	0635      	lsls	r5, r6, #24
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	d501      	bpl.n	8010b98 <_printf_i+0x1c4>
 8010b94:	6019      	str	r1, [r3, #0]
 8010b96:	e002      	b.n	8010b9e <_printf_i+0x1ca>
 8010b98:	0670      	lsls	r0, r6, #25
 8010b9a:	d5fb      	bpl.n	8010b94 <_printf_i+0x1c0>
 8010b9c:	8019      	strh	r1, [r3, #0]
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	6123      	str	r3, [r4, #16]
 8010ba2:	4615      	mov	r5, r2
 8010ba4:	e7bc      	b.n	8010b20 <_printf_i+0x14c>
 8010ba6:	682b      	ldr	r3, [r5, #0]
 8010ba8:	1d1a      	adds	r2, r3, #4
 8010baa:	602a      	str	r2, [r5, #0]
 8010bac:	681d      	ldr	r5, [r3, #0]
 8010bae:	6862      	ldr	r2, [r4, #4]
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	f7ef fb0c 	bl	80001d0 <memchr>
 8010bb8:	b108      	cbz	r0, 8010bbe <_printf_i+0x1ea>
 8010bba:	1b40      	subs	r0, r0, r5
 8010bbc:	6060      	str	r0, [r4, #4]
 8010bbe:	6863      	ldr	r3, [r4, #4]
 8010bc0:	6123      	str	r3, [r4, #16]
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bc8:	e7aa      	b.n	8010b20 <_printf_i+0x14c>
 8010bca:	6923      	ldr	r3, [r4, #16]
 8010bcc:	462a      	mov	r2, r5
 8010bce:	4649      	mov	r1, r9
 8010bd0:	4640      	mov	r0, r8
 8010bd2:	47d0      	blx	sl
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	d0ad      	beq.n	8010b34 <_printf_i+0x160>
 8010bd8:	6823      	ldr	r3, [r4, #0]
 8010bda:	079b      	lsls	r3, r3, #30
 8010bdc:	d413      	bmi.n	8010c06 <_printf_i+0x232>
 8010bde:	68e0      	ldr	r0, [r4, #12]
 8010be0:	9b03      	ldr	r3, [sp, #12]
 8010be2:	4298      	cmp	r0, r3
 8010be4:	bfb8      	it	lt
 8010be6:	4618      	movlt	r0, r3
 8010be8:	e7a6      	b.n	8010b38 <_printf_i+0x164>
 8010bea:	2301      	movs	r3, #1
 8010bec:	4632      	mov	r2, r6
 8010bee:	4649      	mov	r1, r9
 8010bf0:	4640      	mov	r0, r8
 8010bf2:	47d0      	blx	sl
 8010bf4:	3001      	adds	r0, #1
 8010bf6:	d09d      	beq.n	8010b34 <_printf_i+0x160>
 8010bf8:	3501      	adds	r5, #1
 8010bfa:	68e3      	ldr	r3, [r4, #12]
 8010bfc:	9903      	ldr	r1, [sp, #12]
 8010bfe:	1a5b      	subs	r3, r3, r1
 8010c00:	42ab      	cmp	r3, r5
 8010c02:	dcf2      	bgt.n	8010bea <_printf_i+0x216>
 8010c04:	e7eb      	b.n	8010bde <_printf_i+0x20a>
 8010c06:	2500      	movs	r5, #0
 8010c08:	f104 0619 	add.w	r6, r4, #25
 8010c0c:	e7f5      	b.n	8010bfa <_printf_i+0x226>
 8010c0e:	bf00      	nop
 8010c10:	08010fb1 	.word	0x08010fb1
 8010c14:	08010fc2 	.word	0x08010fc2

08010c18 <__sflush_r>:
 8010c18:	898a      	ldrh	r2, [r1, #12]
 8010c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c1e:	4605      	mov	r5, r0
 8010c20:	0710      	lsls	r0, r2, #28
 8010c22:	460c      	mov	r4, r1
 8010c24:	d458      	bmi.n	8010cd8 <__sflush_r+0xc0>
 8010c26:	684b      	ldr	r3, [r1, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dc05      	bgt.n	8010c38 <__sflush_r+0x20>
 8010c2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	dc02      	bgt.n	8010c38 <__sflush_r+0x20>
 8010c32:	2000      	movs	r0, #0
 8010c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c3a:	2e00      	cmp	r6, #0
 8010c3c:	d0f9      	beq.n	8010c32 <__sflush_r+0x1a>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c44:	682f      	ldr	r7, [r5, #0]
 8010c46:	6a21      	ldr	r1, [r4, #32]
 8010c48:	602b      	str	r3, [r5, #0]
 8010c4a:	d032      	beq.n	8010cb2 <__sflush_r+0x9a>
 8010c4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c4e:	89a3      	ldrh	r3, [r4, #12]
 8010c50:	075a      	lsls	r2, r3, #29
 8010c52:	d505      	bpl.n	8010c60 <__sflush_r+0x48>
 8010c54:	6863      	ldr	r3, [r4, #4]
 8010c56:	1ac0      	subs	r0, r0, r3
 8010c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c5a:	b10b      	cbz	r3, 8010c60 <__sflush_r+0x48>
 8010c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c5e:	1ac0      	subs	r0, r0, r3
 8010c60:	2300      	movs	r3, #0
 8010c62:	4602      	mov	r2, r0
 8010c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c66:	6a21      	ldr	r1, [r4, #32]
 8010c68:	4628      	mov	r0, r5
 8010c6a:	47b0      	blx	r6
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	89a3      	ldrh	r3, [r4, #12]
 8010c70:	d106      	bne.n	8010c80 <__sflush_r+0x68>
 8010c72:	6829      	ldr	r1, [r5, #0]
 8010c74:	291d      	cmp	r1, #29
 8010c76:	d82b      	bhi.n	8010cd0 <__sflush_r+0xb8>
 8010c78:	4a29      	ldr	r2, [pc, #164]	; (8010d20 <__sflush_r+0x108>)
 8010c7a:	410a      	asrs	r2, r1
 8010c7c:	07d6      	lsls	r6, r2, #31
 8010c7e:	d427      	bmi.n	8010cd0 <__sflush_r+0xb8>
 8010c80:	2200      	movs	r2, #0
 8010c82:	6062      	str	r2, [r4, #4]
 8010c84:	04d9      	lsls	r1, r3, #19
 8010c86:	6922      	ldr	r2, [r4, #16]
 8010c88:	6022      	str	r2, [r4, #0]
 8010c8a:	d504      	bpl.n	8010c96 <__sflush_r+0x7e>
 8010c8c:	1c42      	adds	r2, r0, #1
 8010c8e:	d101      	bne.n	8010c94 <__sflush_r+0x7c>
 8010c90:	682b      	ldr	r3, [r5, #0]
 8010c92:	b903      	cbnz	r3, 8010c96 <__sflush_r+0x7e>
 8010c94:	6560      	str	r0, [r4, #84]	; 0x54
 8010c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c98:	602f      	str	r7, [r5, #0]
 8010c9a:	2900      	cmp	r1, #0
 8010c9c:	d0c9      	beq.n	8010c32 <__sflush_r+0x1a>
 8010c9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ca2:	4299      	cmp	r1, r3
 8010ca4:	d002      	beq.n	8010cac <__sflush_r+0x94>
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f7ff fc96 	bl	80105d8 <_free_r>
 8010cac:	2000      	movs	r0, #0
 8010cae:	6360      	str	r0, [r4, #52]	; 0x34
 8010cb0:	e7c0      	b.n	8010c34 <__sflush_r+0x1c>
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	47b0      	blx	r6
 8010cb8:	1c41      	adds	r1, r0, #1
 8010cba:	d1c8      	bne.n	8010c4e <__sflush_r+0x36>
 8010cbc:	682b      	ldr	r3, [r5, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d0c5      	beq.n	8010c4e <__sflush_r+0x36>
 8010cc2:	2b1d      	cmp	r3, #29
 8010cc4:	d001      	beq.n	8010cca <__sflush_r+0xb2>
 8010cc6:	2b16      	cmp	r3, #22
 8010cc8:	d101      	bne.n	8010cce <__sflush_r+0xb6>
 8010cca:	602f      	str	r7, [r5, #0]
 8010ccc:	e7b1      	b.n	8010c32 <__sflush_r+0x1a>
 8010cce:	89a3      	ldrh	r3, [r4, #12]
 8010cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cd4:	81a3      	strh	r3, [r4, #12]
 8010cd6:	e7ad      	b.n	8010c34 <__sflush_r+0x1c>
 8010cd8:	690f      	ldr	r7, [r1, #16]
 8010cda:	2f00      	cmp	r7, #0
 8010cdc:	d0a9      	beq.n	8010c32 <__sflush_r+0x1a>
 8010cde:	0793      	lsls	r3, r2, #30
 8010ce0:	680e      	ldr	r6, [r1, #0]
 8010ce2:	bf08      	it	eq
 8010ce4:	694b      	ldreq	r3, [r1, #20]
 8010ce6:	600f      	str	r7, [r1, #0]
 8010ce8:	bf18      	it	ne
 8010cea:	2300      	movne	r3, #0
 8010cec:	eba6 0807 	sub.w	r8, r6, r7
 8010cf0:	608b      	str	r3, [r1, #8]
 8010cf2:	f1b8 0f00 	cmp.w	r8, #0
 8010cf6:	dd9c      	ble.n	8010c32 <__sflush_r+0x1a>
 8010cf8:	6a21      	ldr	r1, [r4, #32]
 8010cfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010cfc:	4643      	mov	r3, r8
 8010cfe:	463a      	mov	r2, r7
 8010d00:	4628      	mov	r0, r5
 8010d02:	47b0      	blx	r6
 8010d04:	2800      	cmp	r0, #0
 8010d06:	dc06      	bgt.n	8010d16 <__sflush_r+0xfe>
 8010d08:	89a3      	ldrh	r3, [r4, #12]
 8010d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d0e:	81a3      	strh	r3, [r4, #12]
 8010d10:	f04f 30ff 	mov.w	r0, #4294967295
 8010d14:	e78e      	b.n	8010c34 <__sflush_r+0x1c>
 8010d16:	4407      	add	r7, r0
 8010d18:	eba8 0800 	sub.w	r8, r8, r0
 8010d1c:	e7e9      	b.n	8010cf2 <__sflush_r+0xda>
 8010d1e:	bf00      	nop
 8010d20:	dfbffffe 	.word	0xdfbffffe

08010d24 <_fflush_r>:
 8010d24:	b538      	push	{r3, r4, r5, lr}
 8010d26:	690b      	ldr	r3, [r1, #16]
 8010d28:	4605      	mov	r5, r0
 8010d2a:	460c      	mov	r4, r1
 8010d2c:	b913      	cbnz	r3, 8010d34 <_fflush_r+0x10>
 8010d2e:	2500      	movs	r5, #0
 8010d30:	4628      	mov	r0, r5
 8010d32:	bd38      	pop	{r3, r4, r5, pc}
 8010d34:	b118      	cbz	r0, 8010d3e <_fflush_r+0x1a>
 8010d36:	6a03      	ldr	r3, [r0, #32]
 8010d38:	b90b      	cbnz	r3, 8010d3e <_fflush_r+0x1a>
 8010d3a:	f7ff f92b 	bl	800ff94 <__sinit>
 8010d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d0f3      	beq.n	8010d2e <_fflush_r+0xa>
 8010d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d48:	07d0      	lsls	r0, r2, #31
 8010d4a:	d404      	bmi.n	8010d56 <_fflush_r+0x32>
 8010d4c:	0599      	lsls	r1, r3, #22
 8010d4e:	d402      	bmi.n	8010d56 <_fflush_r+0x32>
 8010d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d52:	f7ff fc30 	bl	80105b6 <__retarget_lock_acquire_recursive>
 8010d56:	4628      	mov	r0, r5
 8010d58:	4621      	mov	r1, r4
 8010d5a:	f7ff ff5d 	bl	8010c18 <__sflush_r>
 8010d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d60:	07da      	lsls	r2, r3, #31
 8010d62:	4605      	mov	r5, r0
 8010d64:	d4e4      	bmi.n	8010d30 <_fflush_r+0xc>
 8010d66:	89a3      	ldrh	r3, [r4, #12]
 8010d68:	059b      	lsls	r3, r3, #22
 8010d6a:	d4e1      	bmi.n	8010d30 <_fflush_r+0xc>
 8010d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d6e:	f7ff fc23 	bl	80105b8 <__retarget_lock_release_recursive>
 8010d72:	e7dd      	b.n	8010d30 <_fflush_r+0xc>

08010d74 <__swhatbuf_r>:
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	460c      	mov	r4, r1
 8010d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d7c:	2900      	cmp	r1, #0
 8010d7e:	b096      	sub	sp, #88	; 0x58
 8010d80:	4615      	mov	r5, r2
 8010d82:	461e      	mov	r6, r3
 8010d84:	da0d      	bge.n	8010da2 <__swhatbuf_r+0x2e>
 8010d86:	89a3      	ldrh	r3, [r4, #12]
 8010d88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010d8c:	f04f 0100 	mov.w	r1, #0
 8010d90:	bf0c      	ite	eq
 8010d92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010d96:	2340      	movne	r3, #64	; 0x40
 8010d98:	2000      	movs	r0, #0
 8010d9a:	6031      	str	r1, [r6, #0]
 8010d9c:	602b      	str	r3, [r5, #0]
 8010d9e:	b016      	add	sp, #88	; 0x58
 8010da0:	bd70      	pop	{r4, r5, r6, pc}
 8010da2:	466a      	mov	r2, sp
 8010da4:	f000 f848 	bl	8010e38 <_fstat_r>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	dbec      	blt.n	8010d86 <__swhatbuf_r+0x12>
 8010dac:	9901      	ldr	r1, [sp, #4]
 8010dae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010db2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010db6:	4259      	negs	r1, r3
 8010db8:	4159      	adcs	r1, r3
 8010dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dbe:	e7eb      	b.n	8010d98 <__swhatbuf_r+0x24>

08010dc0 <__smakebuf_r>:
 8010dc0:	898b      	ldrh	r3, [r1, #12]
 8010dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010dc4:	079d      	lsls	r5, r3, #30
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	460c      	mov	r4, r1
 8010dca:	d507      	bpl.n	8010ddc <__smakebuf_r+0x1c>
 8010dcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010dd0:	6023      	str	r3, [r4, #0]
 8010dd2:	6123      	str	r3, [r4, #16]
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	6163      	str	r3, [r4, #20]
 8010dd8:	b002      	add	sp, #8
 8010dda:	bd70      	pop	{r4, r5, r6, pc}
 8010ddc:	ab01      	add	r3, sp, #4
 8010dde:	466a      	mov	r2, sp
 8010de0:	f7ff ffc8 	bl	8010d74 <__swhatbuf_r>
 8010de4:	9900      	ldr	r1, [sp, #0]
 8010de6:	4605      	mov	r5, r0
 8010de8:	4630      	mov	r0, r6
 8010dea:	f7fe ffbb 	bl	800fd64 <_malloc_r>
 8010dee:	b948      	cbnz	r0, 8010e04 <__smakebuf_r+0x44>
 8010df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010df4:	059a      	lsls	r2, r3, #22
 8010df6:	d4ef      	bmi.n	8010dd8 <__smakebuf_r+0x18>
 8010df8:	f023 0303 	bic.w	r3, r3, #3
 8010dfc:	f043 0302 	orr.w	r3, r3, #2
 8010e00:	81a3      	strh	r3, [r4, #12]
 8010e02:	e7e3      	b.n	8010dcc <__smakebuf_r+0xc>
 8010e04:	89a3      	ldrh	r3, [r4, #12]
 8010e06:	6020      	str	r0, [r4, #0]
 8010e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e0c:	81a3      	strh	r3, [r4, #12]
 8010e0e:	9b00      	ldr	r3, [sp, #0]
 8010e10:	6163      	str	r3, [r4, #20]
 8010e12:	9b01      	ldr	r3, [sp, #4]
 8010e14:	6120      	str	r0, [r4, #16]
 8010e16:	b15b      	cbz	r3, 8010e30 <__smakebuf_r+0x70>
 8010e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f000 f81d 	bl	8010e5c <_isatty_r>
 8010e22:	b128      	cbz	r0, 8010e30 <__smakebuf_r+0x70>
 8010e24:	89a3      	ldrh	r3, [r4, #12]
 8010e26:	f023 0303 	bic.w	r3, r3, #3
 8010e2a:	f043 0301 	orr.w	r3, r3, #1
 8010e2e:	81a3      	strh	r3, [r4, #12]
 8010e30:	89a3      	ldrh	r3, [r4, #12]
 8010e32:	431d      	orrs	r5, r3
 8010e34:	81a5      	strh	r5, [r4, #12]
 8010e36:	e7cf      	b.n	8010dd8 <__smakebuf_r+0x18>

08010e38 <_fstat_r>:
 8010e38:	b538      	push	{r3, r4, r5, lr}
 8010e3a:	4d07      	ldr	r5, [pc, #28]	; (8010e58 <_fstat_r+0x20>)
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	4604      	mov	r4, r0
 8010e40:	4608      	mov	r0, r1
 8010e42:	4611      	mov	r1, r2
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	f7f0 fb1a 	bl	800147e <_fstat>
 8010e4a:	1c43      	adds	r3, r0, #1
 8010e4c:	d102      	bne.n	8010e54 <_fstat_r+0x1c>
 8010e4e:	682b      	ldr	r3, [r5, #0]
 8010e50:	b103      	cbz	r3, 8010e54 <_fstat_r+0x1c>
 8010e52:	6023      	str	r3, [r4, #0]
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	bf00      	nop
 8010e58:	20004ca0 	.word	0x20004ca0

08010e5c <_isatty_r>:
 8010e5c:	b538      	push	{r3, r4, r5, lr}
 8010e5e:	4d06      	ldr	r5, [pc, #24]	; (8010e78 <_isatty_r+0x1c>)
 8010e60:	2300      	movs	r3, #0
 8010e62:	4604      	mov	r4, r0
 8010e64:	4608      	mov	r0, r1
 8010e66:	602b      	str	r3, [r5, #0]
 8010e68:	f7f0 fb19 	bl	800149e <_isatty>
 8010e6c:	1c43      	adds	r3, r0, #1
 8010e6e:	d102      	bne.n	8010e76 <_isatty_r+0x1a>
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	b103      	cbz	r3, 8010e76 <_isatty_r+0x1a>
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	bd38      	pop	{r3, r4, r5, pc}
 8010e78:	20004ca0 	.word	0x20004ca0

08010e7c <_init>:
 8010e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7e:	bf00      	nop
 8010e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e82:	bc08      	pop	{r3}
 8010e84:	469e      	mov	lr, r3
 8010e86:	4770      	bx	lr

08010e88 <_fini>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	bf00      	nop
 8010e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8e:	bc08      	pop	{r3}
 8010e90:	469e      	mov	lr, r3
 8010e92:	4770      	bx	lr
